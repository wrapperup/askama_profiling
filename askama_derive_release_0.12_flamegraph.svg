<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="189"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.53%)</title><rect x="2.6455%" y="885" width="0.5291%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="1"/><text x="2.8955%" y="895.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.53%)</title><rect x="2.6455%" y="869" width="0.5291%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="1"/><text x="2.8955%" y="879.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.53%)</title><rect x="2.6455%" y="853" width="0.5291%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="2.8955%" y="863.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.53%)</title><rect x="2.6455%" y="837" width="0.5291%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="2.8955%" y="847.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.53%)</title><rect x="2.6455%" y="821" width="0.5291%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="2.8955%" y="831.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 3.70%)</title><rect x="0.0000%" y="901" width="3.7037%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="7"/><text x="0.2500%" y="911.50">[ld-..</text></g><g><title>[unknown] (1 samples, 0.53%)</title><rect x="3.1746%" y="885" width="0.5291%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="3.4246%" y="895.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="597" width="0.5291%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="3.9537%" y="607.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="581" width="0.5291%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="1"/><text x="3.9537%" y="591.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="565" width="0.5291%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="1"/><text x="3.9537%" y="575.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="549" width="0.5291%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="1"/><text x="3.9537%" y="559.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="533" width="0.5291%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="1"/><text x="3.9537%" y="543.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="517" width="0.5291%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="1"/><text x="3.9537%" y="527.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="501" width="0.5291%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="1"/><text x="3.9537%" y="511.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="485" width="0.5291%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1"/><text x="3.9537%" y="495.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="469" width="0.5291%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1"/><text x="3.9537%" y="479.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="453" width="0.5291%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="3.9537%" y="463.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="437" width="0.5291%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1"/><text x="3.9537%" y="447.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="421" width="0.5291%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="1"/><text x="3.9537%" y="431.50"></text></g><g><title>&lt;proc_macro2::Literal as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="405" width="0.5291%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="3.9537%" y="415.50"></text></g><g><title>&lt;proc_macro2::imp::Literal as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="389" width="0.5291%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="3.9537%" y="399.50"></text></g><g><title>&lt;proc_macro2::fallback::Literal as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="373" width="0.5291%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="3.9537%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="3.7037%" y="357" width="0.5291%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="3.9537%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.53%)</title><rect x="3.7037%" y="341" width="0.5291%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="3.9537%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.53%)</title><rect x="3.7037%" y="325" width="0.5291%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="1"/><text x="3.9537%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.53%)</title><rect x="3.7037%" y="309" width="0.5291%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="1"/><text x="3.9537%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.53%)</title><rect x="3.7037%" y="293" width="0.5291%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="3.9537%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.53%)</title><rect x="3.7037%" y="277" width="0.5291%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="3.9537%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.53%)</title><rect x="3.7037%" y="261" width="0.5291%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="3.9537%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.53%)</title><rect x="3.7037%" y="245" width="0.5291%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="3.9537%" y="255.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (2 samples, 1.06%)</title><rect x="3.7037%" y="629" width="1.0582%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="2"/><text x="3.9537%" y="639.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (2 samples, 1.06%)</title><rect x="3.7037%" y="613" width="1.0582%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="2"/><text x="3.9537%" y="623.50"></text></g><g><title>&lt;proc_macro2::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="4.2328%" y="597" width="0.5291%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="4.4828%" y="607.50"></text></g><g><title>&lt;proc_macro2::imp::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="4.2328%" y="581" width="0.5291%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="4.4828%" y="591.50"></text></g><g><title>&lt;proc_macro2::fallback::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="4.2328%" y="565" width="0.5291%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="1"/><text x="4.4828%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="4.2328%" y="549" width="0.5291%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="4.4828%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.53%)</title><rect x="4.2328%" y="533" width="0.5291%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="4.4828%" y="543.50"></text></g><g><title>askama_derive::generator::Generator::impl_display (1 samples, 0.53%)</title><rect x="4.7619%" y="565" width="0.5291%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="1"/><text x="5.0119%" y="575.50"></text></g><g><title>askama_derive::generator::Generator::write_header (1 samples, 0.53%)</title><rect x="4.7619%" y="549" width="0.5291%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="5.0119%" y="559.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.53%)</title><rect x="4.7619%" y="533" width="0.5291%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="5.0119%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.53%)</title><rect x="4.7619%" y="517" width="0.5291%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="5.0119%" y="527.50"></text></g><g><title>alloc::fmt::format::{{closure}} (1 samples, 0.53%)</title><rect x="4.7619%" y="501" width="0.5291%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="1"/><text x="5.0119%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.53%)</title><rect x="4.7619%" y="485" width="0.5291%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="5.0119%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.53%)</title><rect x="4.7619%" y="469" width="0.5291%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="5.0119%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.53%)</title><rect x="4.7619%" y="453" width="0.5291%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="1"/><text x="5.0119%" y="463.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="4.7619%" y="437" width="0.5291%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="1"/><text x="5.0119%" y="447.50"></text></g><g><title>&lt;&amp;T as quote::to_tokens::ToTokens&gt;::to_tokens (1 samples, 0.53%)</title><rect x="5.2910%" y="549" width="0.5291%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="1"/><text x="5.5410%" y="559.50"></text></g><g><title>&lt;str as quote::to_tokens::ToTokens&gt;::to_tokens (1 samples, 0.53%)</title><rect x="5.2910%" y="533" width="0.5291%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="5.5410%" y="543.50"></text></g><g><title>proc_macro2::Literal::string (1 samples, 0.53%)</title><rect x="5.2910%" y="517" width="0.5291%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="1"/><text x="5.5410%" y="527.50"></text></g><g><title>proc_macro2::imp::Literal::string (1 samples, 0.53%)</title><rect x="5.2910%" y="501" width="0.5291%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="1"/><text x="5.5410%" y="511.50"></text></g><g><title>proc_macro2::fallback::Literal::string (1 samples, 0.53%)</title><rect x="5.2910%" y="485" width="0.5291%" height="15" fill="rgb(225,35,8)" fg:x="10" fg:w="1"/><text x="5.5410%" y="495.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug (1 samples, 0.53%)</title><rect x="5.2910%" y="469" width="0.5291%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="1"/><text x="5.5410%" y="479.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (1 samples, 0.53%)</title><rect x="5.2910%" y="453" width="0.5291%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="1"/><text x="5.5410%" y="463.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (1 samples, 0.53%)</title><rect x="5.2910%" y="437" width="0.5291%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="1"/><text x="5.5410%" y="447.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.53%)</title><rect x="5.8201%" y="549" width="0.5291%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="1"/><text x="6.0701%" y="559.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="5.8201%" y="533" width="0.5291%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="1"/><text x="6.0701%" y="543.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="5.8201%" y="517" width="0.5291%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="1"/><text x="6.0701%" y="527.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="5.8201%" y="501" width="0.5291%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="1"/><text x="6.0701%" y="511.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="5.8201%" y="485" width="0.5291%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="1"/><text x="6.0701%" y="495.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="5.8201%" y="469" width="0.5291%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="1"/><text x="6.0701%" y="479.50"></text></g><g><title>&lt;proc_macro2::Literal as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="5.8201%" y="453" width="0.5291%" height="15" fill="rgb(248,47,43)" fg:x="11" fg:w="1"/><text x="6.0701%" y="463.50"></text></g><g><title>&lt;proc_macro2::imp::Literal as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="5.8201%" y="437" width="0.5291%" height="15" fill="rgb(221,10,30)" fg:x="11" fg:w="1"/><text x="6.0701%" y="447.50"></text></g><g><title>&lt;proc_macro2::fallback::Literal as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="5.8201%" y="421" width="0.5291%" height="15" fill="rgb(210,229,1)" fg:x="11" fg:w="1"/><text x="6.0701%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.53%)</title><rect x="5.8201%" y="405" width="0.5291%" height="15" fill="rgb(222,148,37)" fg:x="11" fg:w="1"/><text x="6.0701%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.53%)</title><rect x="5.8201%" y="389" width="0.5291%" height="15" fill="rgb(234,67,33)" fg:x="11" fg:w="1"/><text x="6.0701%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.53%)</title><rect x="5.8201%" y="373" width="0.5291%" height="15" fill="rgb(247,98,35)" fg:x="11" fg:w="1"/><text x="6.0701%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.53%)</title><rect x="5.8201%" y="357" width="0.5291%" height="15" fill="rgb(247,138,52)" fg:x="11" fg:w="1"/><text x="6.0701%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.53%)</title><rect x="5.8201%" y="341" width="0.5291%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="1"/><text x="6.0701%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.53%)</title><rect x="5.8201%" y="325" width="0.5291%" height="15" fill="rgb(246,177,23)" fg:x="11" fg:w="1"/><text x="6.0701%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.53%)</title><rect x="5.8201%" y="309" width="0.5291%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="1"/><text x="6.0701%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.53%)</title><rect x="5.8201%" y="293" width="0.5291%" height="15" fill="rgb(216,154,8)" fg:x="11" fg:w="1"/><text x="6.0701%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.53%)</title><rect x="5.8201%" y="277" width="0.5291%" height="15" fill="rgb(244,35,45)" fg:x="11" fg:w="1"/><text x="6.0701%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.53%)</title><rect x="5.8201%" y="261" width="0.5291%" height="15" fill="rgb(251,115,12)" fg:x="11" fg:w="1"/><text x="6.0701%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.53%)</title><rect x="5.8201%" y="245" width="0.5291%" height="15" fill="rgb(240,54,50)" fg:x="11" fg:w="1"/><text x="6.0701%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.53%)</title><rect x="5.8201%" y="229" width="0.5291%" height="15" fill="rgb(233,84,52)" fg:x="11" fg:w="1"/><text x="6.0701%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.53%)</title><rect x="5.8201%" y="213" width="0.5291%" height="15" fill="rgb(207,117,47)" fg:x="11" fg:w="1"/><text x="6.0701%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.53%)</title><rect x="5.8201%" y="197" width="0.5291%" height="15" fill="rgb(249,43,39)" fg:x="11" fg:w="1"/><text x="6.0701%" y="207.50"></text></g><g><title>__rust_realloc (1 samples, 0.53%)</title><rect x="5.8201%" y="181" width="0.5291%" height="15" fill="rgb(209,38,44)" fg:x="11" fg:w="1"/><text x="6.0701%" y="191.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (3 samples, 1.59%)</title><rect x="6.8783%" y="389" width="1.5873%" height="15" fill="rgb(236,212,23)" fg:x="13" fg:w="3"/><text x="7.1283%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (3 samples, 1.59%)</title><rect x="6.8783%" y="373" width="1.5873%" height="15" fill="rgb(242,79,21)" fg:x="13" fg:w="3"/><text x="7.1283%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (2 samples, 1.06%)</title><rect x="7.4074%" y="357" width="1.0582%" height="15" fill="rgb(211,96,35)" fg:x="14" fg:w="2"/><text x="7.6574%" y="367.50"></text></g><g><title>alloc::string::String::push (2 samples, 1.06%)</title><rect x="7.4074%" y="341" width="1.0582%" height="15" fill="rgb(253,215,40)" fg:x="14" fg:w="2"/><text x="7.6574%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.06%)</title><rect x="7.4074%" y="325" width="1.0582%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="2"/><text x="7.6574%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.53%)</title><rect x="7.9365%" y="309" width="0.5291%" height="15" fill="rgb(208,190,38)" fg:x="15" fg:w="1"/><text x="8.1865%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.53%)</title><rect x="7.9365%" y="293" width="0.5291%" height="15" fill="rgb(235,213,38)" fg:x="15" fg:w="1"/><text x="8.1865%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.53%)</title><rect x="7.9365%" y="277" width="0.5291%" height="15" fill="rgb(237,122,38)" fg:x="15" fg:w="1"/><text x="8.1865%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.53%)</title><rect x="7.9365%" y="261" width="0.5291%" height="15" fill="rgb(244,218,35)" fg:x="15" fg:w="1"/><text x="8.1865%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.53%)</title><rect x="7.9365%" y="245" width="0.5291%" height="15" fill="rgb(240,68,47)" fg:x="15" fg:w="1"/><text x="8.1865%" y="255.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.53%)</title><rect x="7.9365%" y="229" width="0.5291%" height="15" fill="rgb(210,16,53)" fg:x="15" fg:w="1"/><text x="8.1865%" y="239.50"></text></g><g><title>realloc (1 samples, 0.53%)</title><rect x="7.9365%" y="213" width="0.5291%" height="15" fill="rgb(235,124,12)" fg:x="15" fg:w="1"/><text x="8.1865%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.53%)</title><rect x="7.9365%" y="197" width="0.5291%" height="15" fill="rgb(224,169,11)" fg:x="15" fg:w="1"/><text x="8.1865%" y="207.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.53%)</title><rect x="8.4656%" y="389" width="0.5291%" height="15" fill="rgb(250,166,2)" fg:x="16" fg:w="1"/><text x="8.7156%" y="399.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.53%)</title><rect x="8.4656%" y="373" width="0.5291%" height="15" fill="rgb(242,216,29)" fg:x="16" fg:w="1"/><text x="8.7156%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.53%)</title><rect x="8.4656%" y="357" width="0.5291%" height="15" fill="rgb(230,116,27)" fg:x="16" fg:w="1"/><text x="8.7156%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 1.06%)</title><rect x="14.2857%" y="325" width="1.0582%" height="15" fill="rgb(228,99,48)" fg:x="27" fg:w="2"/><text x="14.5357%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 1.06%)</title><rect x="14.2857%" y="309" width="1.0582%" height="15" fill="rgb(253,11,6)" fg:x="27" fg:w="2"/><text x="14.5357%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 1.06%)</title><rect x="14.2857%" y="293" width="1.0582%" height="15" fill="rgb(247,143,39)" fg:x="27" fg:w="2"/><text x="14.5357%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.53%)</title><rect x="15.3439%" y="325" width="0.5291%" height="15" fill="rgb(236,97,10)" fg:x="29" fg:w="1"/><text x="15.5939%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (9 samples, 4.76%)</title><rect x="20.6349%" y="277" width="4.7619%" height="15" fill="rgb(233,208,19)" fg:x="39" fg:w="9"/><text x="20.8849%" y="287.50">core::..</text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (24 samples, 12.70%)</title><rect x="13.2275%" y="373" width="12.6984%" height="15" fill="rgb(216,164,2)" fg:x="25" fg:w="24"/><text x="13.4775%" y="383.50">core::char::methods..</text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (24 samples, 12.70%)</title><rect x="13.2275%" y="357" width="12.6984%" height="15" fill="rgb(220,129,5)" fg:x="25" fg:w="24"/><text x="13.4775%" y="367.50">core::unicode::unic..</text></g><g><title>core::unicode::unicode_data::skip_search (24 samples, 12.70%)</title><rect x="13.2275%" y="341" width="12.6984%" height="15" fill="rgb(242,17,10)" fg:x="25" fg:w="24"/><text x="13.4775%" y="351.50">core::unicode::unic..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (19 samples, 10.05%)</title><rect x="15.8730%" y="325" width="10.0529%" height="15" fill="rgb(242,107,0)" fg:x="30" fg:w="19"/><text x="16.1230%" y="335.50">core::slice::&lt;i..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (19 samples, 10.05%)</title><rect x="15.8730%" y="309" width="10.0529%" height="15" fill="rgb(251,28,31)" fg:x="30" fg:w="19"/><text x="16.1230%" y="319.50">core::slice::&lt;i..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (10 samples, 5.29%)</title><rect x="20.6349%" y="293" width="5.2910%" height="15" fill="rgb(233,223,10)" fg:x="39" fg:w="10"/><text x="20.8849%" y="303.50">core::..</text></g><g><title>core::unicode::unicode_data::skip_search::{{closure}} (1 samples, 0.53%)</title><rect x="25.3968%" y="277" width="0.5291%" height="15" fill="rgb(215,21,27)" fg:x="48" fg:w="1"/><text x="25.6468%" y="287.50"></text></g><g><title>&lt;&amp;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (1 samples, 0.53%)</title><rect x="25.3968%" y="261" width="0.5291%" height="15" fill="rgb(232,23,21)" fg:x="48" fg:w="1"/><text x="25.6468%" y="271.50"></text></g><g><title>&lt;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (1 samples, 0.53%)</title><rect x="25.3968%" y="245" width="0.5291%" height="15" fill="rgb(244,5,23)" fg:x="48" fg:w="1"/><text x="25.6468%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (35 samples, 18.52%)</title><rect x="8.9947%" y="389" width="18.5185%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="35"/><text x="9.2447%" y="399.50">core::char::methods::&lt;impl ch..</text></g><g><title>core::unicode::printable::is_printable (3 samples, 1.59%)</title><rect x="25.9259%" y="373" width="1.5873%" height="15" fill="rgb(247,70,30)" fg:x="49" fg:w="3"/><text x="26.1759%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 1.06%)</title><rect x="27.5132%" y="389" width="1.0582%" height="15" fill="rgb(212,68,19)" fg:x="52" fg:w="2"/><text x="27.7632%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 1.06%)</title><rect x="27.5132%" y="373" width="1.0582%" height="15" fill="rgb(240,187,13)" fg:x="52" fg:w="2"/><text x="27.7632%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 1.06%)</title><rect x="27.5132%" y="357" width="1.0582%" height="15" fill="rgb(223,113,26)" fg:x="52" fg:w="2"/><text x="27.7632%" y="367.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 1.06%)</title><rect x="27.5132%" y="341" width="1.0582%" height="15" fill="rgb(206,192,2)" fg:x="52" fg:w="2"/><text x="27.7632%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 1.06%)</title><rect x="27.5132%" y="325" width="1.0582%" height="15" fill="rgb(241,108,4)" fg:x="52" fg:w="2"/><text x="27.7632%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 1.06%)</title><rect x="27.5132%" y="309" width="1.0582%" height="15" fill="rgb(247,173,49)" fg:x="52" fg:w="2"/><text x="27.7632%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 1.06%)</title><rect x="27.5132%" y="293" width="1.0582%" height="15" fill="rgb(224,114,35)" fg:x="52" fg:w="2"/><text x="27.7632%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 1.06%)</title><rect x="27.5132%" y="277" width="1.0582%" height="15" fill="rgb(245,159,27)" fg:x="52" fg:w="2"/><text x="27.7632%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 1.06%)</title><rect x="27.5132%" y="261" width="1.0582%" height="15" fill="rgb(245,172,44)" fg:x="52" fg:w="2"/><text x="27.7632%" y="271.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (2 samples, 1.06%)</title><rect x="28.5714%" y="389" width="1.0582%" height="15" fill="rgb(236,23,11)" fg:x="54" fg:w="2"/><text x="28.8214%" y="399.50"></text></g><g><title>&lt;core::char::EscapeDebug as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 1.06%)</title><rect x="28.5714%" y="373" width="1.0582%" height="15" fill="rgb(205,117,38)" fg:x="54" fg:w="2"/><text x="28.8214%" y="383.50"></text></g><g><title>&lt;core::char::EscapeDefault as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 1.06%)</title><rect x="28.5714%" y="357" width="1.0582%" height="15" fill="rgb(237,72,25)" fg:x="54" fg:w="2"/><text x="28.8214%" y="367.50"></text></g><g><title>&lt;core::char::EscapeDefault as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (2 samples, 1.06%)</title><rect x="28.5714%" y="341" width="1.0582%" height="15" fill="rgb(244,70,9)" fg:x="54" fg:w="2"/><text x="28.8214%" y="351.50"></text></g><g><title>alloc::fmt::format (45 samples, 23.81%)</title><rect x="6.3492%" y="517" width="23.8095%" height="15" fill="rgb(217,125,39)" fg:x="12" fg:w="45"/><text x="6.5992%" y="527.50">alloc::fmt::format</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (45 samples, 23.81%)</title><rect x="6.3492%" y="501" width="23.8095%" height="15" fill="rgb(235,36,10)" fg:x="12" fg:w="45"/><text x="6.5992%" y="511.50">core::option::Option&lt;T&gt;::map_or_else</text></g><g><title>alloc::fmt::format::{{closure}} (45 samples, 23.81%)</title><rect x="6.3492%" y="485" width="23.8095%" height="15" fill="rgb(251,123,47)" fg:x="12" fg:w="45"/><text x="6.5992%" y="495.50">alloc::fmt::format::{{closure}}</text></g><g><title>alloc::fmt::format::format_inner (45 samples, 23.81%)</title><rect x="6.3492%" y="469" width="23.8095%" height="15" fill="rgb(221,13,13)" fg:x="12" fg:w="45"/><text x="6.5992%" y="479.50">alloc::fmt::format::format_inner</text></g><g><title>core::fmt::Write::write_fmt (45 samples, 23.81%)</title><rect x="6.3492%" y="453" width="23.8095%" height="15" fill="rgb(238,131,9)" fg:x="12" fg:w="45"/><text x="6.5992%" y="463.50">core::fmt::Write::write_fmt</text></g><g><title>core::fmt::write (45 samples, 23.81%)</title><rect x="6.3492%" y="437" width="23.8095%" height="15" fill="rgb(211,50,8)" fg:x="12" fg:w="45"/><text x="6.5992%" y="447.50">core::fmt::write</text></g><g><title>core::fmt::run (45 samples, 23.81%)</title><rect x="6.3492%" y="421" width="23.8095%" height="15" fill="rgb(245,182,24)" fg:x="12" fg:w="45"/><text x="6.5992%" y="431.50">core::fmt::run</text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (45 samples, 23.81%)</title><rect x="6.3492%" y="405" width="23.8095%" height="15" fill="rgb(242,14,37)" fg:x="12" fg:w="45"/><text x="6.5992%" y="415.50">&lt;str as core::fmt::Debug&gt;::fmt</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.53%)</title><rect x="29.6296%" y="389" width="0.5291%" height="15" fill="rgb(246,228,12)" fg:x="56" fg:w="1"/><text x="29.8796%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (1 samples, 0.53%)</title><rect x="29.6296%" y="373" width="0.5291%" height="15" fill="rgb(213,55,15)" fg:x="56" fg:w="1"/><text x="29.8796%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.53%)</title><rect x="29.6296%" y="357" width="0.5291%" height="15" fill="rgb(209,9,3)" fg:x="56" fg:w="1"/><text x="29.8796%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.53%)</title><rect x="29.6296%" y="341" width="0.5291%" height="15" fill="rgb(230,59,30)" fg:x="56" fg:w="1"/><text x="29.8796%" y="351.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (1 samples, 0.53%)</title><rect x="29.6296%" y="325" width="0.5291%" height="15" fill="rgb(209,121,21)" fg:x="56" fg:w="1"/><text x="29.8796%" y="335.50"></text></g><g><title>askama_derive::generator::Buffer::write (1 samples, 0.53%)</title><rect x="30.1587%" y="517" width="0.5291%" height="15" fill="rgb(220,109,13)" fg:x="57" fg:w="1"/><text x="30.4087%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.53%)</title><rect x="30.1587%" y="501" width="0.5291%" height="15" fill="rgb(232,18,1)" fg:x="57" fg:w="1"/><text x="30.4087%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.53%)</title><rect x="30.1587%" y="485" width="0.5291%" height="15" fill="rgb(215,41,42)" fg:x="57" fg:w="1"/><text x="30.4087%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.53%)</title><rect x="30.1587%" y="469" width="0.5291%" height="15" fill="rgb(224,123,36)" fg:x="57" fg:w="1"/><text x="30.4087%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.53%)</title><rect x="30.1587%" y="453" width="0.5291%" height="15" fill="rgb(240,125,3)" fg:x="57" fg:w="1"/><text x="30.4087%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.53%)</title><rect x="30.1587%" y="437" width="0.5291%" height="15" fill="rgb(205,98,50)" fg:x="57" fg:w="1"/><text x="30.4087%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.53%)</title><rect x="30.1587%" y="421" width="0.5291%" height="15" fill="rgb(205,185,37)" fg:x="57" fg:w="1"/><text x="30.4087%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.53%)</title><rect x="30.1587%" y="405" width="0.5291%" height="15" fill="rgb(238,207,15)" fg:x="57" fg:w="1"/><text x="30.4087%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.53%)</title><rect x="30.1587%" y="389" width="0.5291%" height="15" fill="rgb(213,199,42)" fg:x="57" fg:w="1"/><text x="30.4087%" y="399.50"></text></g><g><title>askama_derive::generator::Generator::build (50 samples, 26.46%)</title><rect x="4.7619%" y="581" width="26.4550%" height="15" fill="rgb(235,201,11)" fg:x="9" fg:w="50"/><text x="5.0119%" y="591.50">askama_derive::generator::Generator::build</text></g><g><title>askama_derive::generator::Generator::impl_template (49 samples, 25.93%)</title><rect x="5.2910%" y="565" width="25.9259%" height="15" fill="rgb(207,46,11)" fg:x="10" fg:w="49"/><text x="5.5410%" y="575.50">askama_derive::generator::Generator::impl..</text></g><g><title>askama_derive::generator::Generator::handle (47 samples, 24.87%)</title><rect x="6.3492%" y="549" width="24.8677%" height="15" fill="rgb(241,35,35)" fg:x="12" fg:w="47"/><text x="6.5992%" y="559.50">askama_derive::generator::Generator::han..</text></g><g><title>askama_derive::generator::Generator::write_buf_writable (47 samples, 24.87%)</title><rect x="6.3492%" y="533" width="24.8677%" height="15" fill="rgb(243,32,47)" fg:x="12" fg:w="47"/><text x="6.5992%" y="543.50">askama_derive::generator::Generator::wri..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.53%)</title><rect x="30.6878%" y="517" width="0.5291%" height="15" fill="rgb(247,202,23)" fg:x="58" fg:w="1"/><text x="30.9378%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.53%)</title><rect x="30.6878%" y="501" width="0.5291%" height="15" fill="rgb(219,102,11)" fg:x="58" fg:w="1"/><text x="30.9378%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.53%)</title><rect x="30.6878%" y="485" width="0.5291%" height="15" fill="rgb(243,110,44)" fg:x="58" fg:w="1"/><text x="30.9378%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.53%)</title><rect x="30.6878%" y="469" width="0.5291%" height="15" fill="rgb(222,74,54)" fg:x="58" fg:w="1"/><text x="30.9378%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.53%)</title><rect x="30.6878%" y="453" width="0.5291%" height="15" fill="rgb(216,99,12)" fg:x="58" fg:w="1"/><text x="30.9378%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.53%)</title><rect x="30.6878%" y="437" width="0.5291%" height="15" fill="rgb(226,22,26)" fg:x="58" fg:w="1"/><text x="30.9378%" y="447.50"></text></g><g><title>free (1 samples, 0.53%)</title><rect x="30.6878%" y="421" width="0.5291%" height="15" fill="rgb(217,163,10)" fg:x="58" fg:w="1"/><text x="30.9378%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 1.06%)</title><rect x="31.7460%" y="293" width="1.0582%" height="15" fill="rgb(213,25,53)" fg:x="60" fg:w="2"/><text x="31.9960%" y="303.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (6 samples, 3.17%)</title><rect x="40.7407%" y="181" width="3.1746%" height="15" fill="rgb(252,105,26)" fg:x="77" fg:w="6"/><text x="40.9907%" y="191.50">&lt;&amp;s..</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 1.06%)</title><rect x="42.8571%" y="165" width="1.0582%" height="15" fill="rgb(220,39,43)" fg:x="81" fg:w="2"/><text x="43.1071%" y="175.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (2 samples, 1.06%)</title><rect x="42.8571%" y="149" width="1.0582%" height="15" fill="rgb(229,68,48)" fg:x="81" fg:w="2"/><text x="43.1071%" y="159.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (2 samples, 1.06%)</title><rect x="42.8571%" y="133" width="1.0582%" height="15" fill="rgb(252,8,32)" fg:x="81" fg:w="2"/><text x="43.1071%" y="143.50"></text></g><g><title>core::ops::function::FnMut::call_mut (11 samples, 5.82%)</title><rect x="40.2116%" y="213" width="5.8201%" height="15" fill="rgb(223,20,43)" fg:x="76" fg:w="11"/><text x="40.4616%" y="223.50">core::o..</text></g><g><title>nom::character::complete::anychar (11 samples, 5.82%)</title><rect x="40.2116%" y="197" width="5.8201%" height="15" fill="rgb(229,81,49)" fg:x="76" fg:w="11"/><text x="40.4616%" y="207.50">nom::ch..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.12%)</title><rect x="43.9153%" y="181" width="2.1164%" height="15" fill="rgb(236,28,36)" fg:x="83" fg:w="4"/><text x="44.1653%" y="191.50">&lt;..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.12%)</title><rect x="43.9153%" y="165" width="2.1164%" height="15" fill="rgb(249,185,26)" fg:x="83" fg:w="4"/><text x="44.1653%" y="175.50">&lt;..</text></g><g><title>core::str::validations::next_code_point (4 samples, 2.12%)</title><rect x="43.9153%" y="149" width="2.1164%" height="15" fill="rgb(249,174,33)" fg:x="83" fg:w="4"/><text x="44.1653%" y="159.50">c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.06%)</title><rect x="44.9735%" y="133" width="1.0582%" height="15" fill="rgb(233,201,37)" fg:x="85" fg:w="2"/><text x="45.2235%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (2 samples, 1.06%)</title><rect x="58.2011%" y="117" width="1.0582%" height="15" fill="rgb(221,78,26)" fg:x="110" fg:w="2"/><text x="58.4511%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 1.06%)</title><rect x="58.2011%" y="101" width="1.0582%" height="15" fill="rgb(250,127,30)" fg:x="110" fg:w="2"/><text x="58.4511%" y="111.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (44 samples, 23.28%)</title><rect x="37.5661%" y="229" width="23.2804%" height="15" fill="rgb(230,49,44)" fg:x="71" fg:w="44"/><text x="37.8161%" y="239.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::..</text></g><g><title>nom::branch::alt::{{closure}} (28 samples, 14.81%)</title><rect x="46.0317%" y="213" width="14.8148%" height="15" fill="rgb(229,67,23)" fg:x="87" fg:w="28"/><text x="46.2817%" y="223.50">nom::branch::alt::{{clo..</text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (28 samples, 14.81%)</title><rect x="46.0317%" y="197" width="14.8148%" height="15" fill="rgb(249,83,47)" fg:x="87" fg:w="28"/><text x="46.2817%" y="207.50">&lt;(A,B,C) as nom::branch..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (21 samples, 11.11%)</title><rect x="49.7354%" y="181" width="11.1111%" height="15" fill="rgb(215,43,3)" fg:x="94" fg:w="21"/><text x="49.9854%" y="191.50">&lt;F as nom::inter..</text></g><g><title>nom::bytes::complete::tag::{{closure}} (16 samples, 8.47%)</title><rect x="52.3810%" y="165" width="8.4656%" height="15" fill="rgb(238,154,13)" fg:x="99" fg:w="16"/><text x="52.6310%" y="175.50">nom::bytes::..</text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (5 samples, 2.65%)</title><rect x="58.2011%" y="149" width="2.6455%" height="15" fill="rgb(219,56,2)" fg:x="110" fg:w="5"/><text x="58.4511%" y="159.50">&lt;&amp;..</text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (5 samples, 2.65%)</title><rect x="58.2011%" y="133" width="2.6455%" height="15" fill="rgb(233,0,4)" fg:x="110" fg:w="5"/><text x="58.4511%" y="143.50">&lt;&amp;..</text></g><g><title>core::iter::traits::iterator::Iterator::zip (3 samples, 1.59%)</title><rect x="59.2593%" y="117" width="1.5873%" height="15" fill="rgb(235,30,7)" fg:x="112" fg:w="3"/><text x="59.5093%" y="127.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (3 samples, 1.59%)</title><rect x="59.2593%" y="101" width="1.5873%" height="15" fill="rgb(250,79,13)" fg:x="112" fg:w="3"/><text x="59.5093%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (3 samples, 1.59%)</title><rect x="59.2593%" y="85" width="1.5873%" height="15" fill="rgb(211,146,34)" fg:x="112" fg:w="3"/><text x="59.5093%" y="95.50"></text></g><g><title>core::cmp::min (3 samples, 1.59%)</title><rect x="59.2593%" y="69" width="1.5873%" height="15" fill="rgb(228,22,38)" fg:x="112" fg:w="3"/><text x="59.5093%" y="79.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 1.59%)</title><rect x="59.2593%" y="53" width="1.5873%" height="15" fill="rgb(235,168,5)" fg:x="112" fg:w="3"/><text x="59.5093%" y="63.50"></text></g><g><title>core::cmp::min_by (3 samples, 1.59%)</title><rect x="59.2593%" y="37" width="1.5873%" height="15" fill="rgb(221,155,16)" fg:x="112" fg:w="3"/><text x="59.5093%" y="47.50"></text></g><g><title>askama_derive::generator::find_used_templates (58 samples, 30.69%)</title><rect x="31.2169%" y="581" width="30.6878%" height="15" fill="rgb(215,215,53)" fg:x="59" fg:w="58"/><text x="31.4669%" y="591.50">askama_derive::generator::find_used_templates</text></g><g><title>askama_derive::parser::parse (58 samples, 30.69%)</title><rect x="31.2169%" y="565" width="30.6878%" height="15" fill="rgb(223,4,10)" fg:x="59" fg:w="58"/><text x="31.4669%" y="575.50">askama_derive::parser::parse</text></g><g><title>askama_derive::parser::node::Node::parse (58 samples, 30.69%)</title><rect x="31.2169%" y="549" width="30.6878%" height="15" fill="rgb(234,103,6)" fg:x="59" fg:w="58"/><text x="31.4669%" y="559.50">askama_derive::parser::node::Node::parse</text></g><g><title>askama_derive::parser::node::parse_template (58 samples, 30.69%)</title><rect x="31.2169%" y="533" width="30.6878%" height="15" fill="rgb(227,97,0)" fg:x="59" fg:w="58"/><text x="31.4669%" y="543.50">askama_derive::parser::node::parse_template</text></g><g><title>nom::multi::many0::{{closure}} (58 samples, 30.69%)</title><rect x="31.2169%" y="517" width="30.6878%" height="15" fill="rgb(234,150,53)" fg:x="59" fg:w="58"/><text x="31.4669%" y="527.50">nom::multi::many0::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (58 samples, 30.69%)</title><rect x="31.2169%" y="501" width="30.6878%" height="15" fill="rgb(228,201,54)" fg:x="59" fg:w="58"/><text x="31.4669%" y="511.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::branch::alt::{{closure}} (58 samples, 30.69%)</title><rect x="31.2169%" y="485" width="30.6878%" height="15" fill="rgb(222,22,37)" fg:x="59" fg:w="58"/><text x="31.4669%" y="495.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (58 samples, 30.69%)</title><rect x="31.2169%" y="469" width="30.6878%" height="15" fill="rgb(237,53,32)" fg:x="59" fg:w="58"/><text x="31.4669%" y="479.50">&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (58 samples, 30.69%)</title><rect x="31.2169%" y="453" width="30.6878%" height="15" fill="rgb(233,25,53)" fg:x="59" fg:w="58"/><text x="31.4669%" y="463.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::complete::{{closure}} (58 samples, 30.69%)</title><rect x="31.2169%" y="437" width="30.6878%" height="15" fill="rgb(210,40,34)" fg:x="59" fg:w="58"/><text x="31.4669%" y="447.50">nom::combinator::complete::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (58 samples, 30.69%)</title><rect x="31.2169%" y="421" width="30.6878%" height="15" fill="rgb(241,220,44)" fg:x="59" fg:w="58"/><text x="31.4669%" y="431.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (58 samples, 30.69%)</title><rect x="31.2169%" y="405" width="30.6878%" height="15" fill="rgb(235,28,35)" fg:x="59" fg:w="58"/><text x="31.4669%" y="415.50">askama_derive::parser::node::parse_template::{{clo..</text></g><g><title>askama_derive::parser::take_content (58 samples, 30.69%)</title><rect x="31.2169%" y="389" width="30.6878%" height="15" fill="rgb(210,56,17)" fg:x="59" fg:w="58"/><text x="31.4669%" y="399.50">askama_derive::parser::take_content</text></g><g><title>nom::combinator::opt::{{closure}} (58 samples, 30.69%)</title><rect x="31.2169%" y="373" width="30.6878%" height="15" fill="rgb(224,130,29)" fg:x="59" fg:w="58"/><text x="31.4669%" y="383.50">nom::combinator::opt::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (58 samples, 30.69%)</title><rect x="31.2169%" y="357" width="30.6878%" height="15" fill="rgb(235,212,8)" fg:x="59" fg:w="58"/><text x="31.4669%" y="367.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::recognize::{{closure}} (58 samples, 30.69%)</title><rect x="31.2169%" y="341" width="30.6878%" height="15" fill="rgb(223,33,50)" fg:x="59" fg:w="58"/><text x="31.4669%" y="351.50">nom::combinator::recognize::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (58 samples, 30.69%)</title><rect x="31.2169%" y="325" width="30.6878%" height="15" fill="rgb(219,149,13)" fg:x="59" fg:w="58"/><text x="31.4669%" y="335.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>askama_derive::parser::skip_till::{{closure}} (58 samples, 30.69%)</title><rect x="31.2169%" y="309" width="30.6878%" height="15" fill="rgb(250,156,29)" fg:x="59" fg:w="58"/><text x="31.4669%" y="319.50">askama_derive::parser::skip_till::{{closure}}</text></g><g><title>nom::branch::alt::{{closure}} (55 samples, 29.10%)</title><rect x="32.8042%" y="293" width="29.1005%" height="15" fill="rgb(216,193,19)" fg:x="62" fg:w="55"/><text x="33.0542%" y="303.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (55 samples, 29.10%)</title><rect x="32.8042%" y="277" width="29.1005%" height="15" fill="rgb(216,135,14)" fg:x="62" fg:w="55"/><text x="33.0542%" y="287.50">&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (47 samples, 24.87%)</title><rect x="37.0370%" y="261" width="24.8677%" height="15" fill="rgb(241,47,5)" fg:x="70" fg:w="47"/><text x="37.2870%" y="271.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::par..</text></g><g><title>nom::combinator::map::{{closure}} (47 samples, 24.87%)</title><rect x="37.0370%" y="245" width="24.8677%" height="15" fill="rgb(233,42,35)" fg:x="70" fg:w="47"/><text x="37.2870%" y="255.50">nom::combinator::map::{{closure}}</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 1.06%)</title><rect x="60.8466%" y="229" width="1.0582%" height="15" fill="rgb(231,13,6)" fg:x="115" fg:w="2"/><text x="61.0966%" y="239.50"></text></g><g><title>askama_derive::heritage::Context::new (1 samples, 0.53%)</title><rect x="61.9048%" y="581" width="0.5291%" height="15" fill="rgb(207,181,40)" fg:x="117" fg:w="1"/><text x="62.1548%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.53%)</title><rect x="61.9048%" y="565" width="0.5291%" height="15" fill="rgb(254,173,49)" fg:x="117" fg:w="1"/><text x="62.1548%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.53%)</title><rect x="61.9048%" y="549" width="0.5291%" height="15" fill="rgb(221,1,38)" fg:x="117" fg:w="1"/><text x="62.1548%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.53%)</title><rect x="61.9048%" y="533" width="0.5291%" height="15" fill="rgb(206,124,46)" fg:x="117" fg:w="1"/><text x="62.1548%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.53%)</title><rect x="61.9048%" y="517" width="0.5291%" height="15" fill="rgb(249,21,11)" fg:x="117" fg:w="1"/><text x="62.1548%" y="527.50"></text></g><g><title>malloc (1 samples, 0.53%)</title><rect x="61.9048%" y="501" width="0.5291%" height="15" fill="rgb(222,201,40)" fg:x="117" fg:w="1"/><text x="62.1548%" y="511.50"></text></g><g><title>[libc.so.6] (1 samples, 0.53%)</title><rect x="61.9048%" y="485" width="0.5291%" height="15" fill="rgb(235,61,29)" fg:x="117" fg:w="1"/><text x="62.1548%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.53%)</title><rect x="63.4921%" y="309" width="0.5291%" height="15" fill="rgb(219,207,3)" fg:x="120" fg:w="1"/><text x="63.7421%" y="319.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (3 samples, 1.59%)</title><rect x="69.3122%" y="197" width="1.5873%" height="15" fill="rgb(222,56,46)" fg:x="131" fg:w="3"/><text x="69.5622%" y="207.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.53%)</title><rect x="70.3704%" y="181" width="0.5291%" height="15" fill="rgb(239,76,54)" fg:x="133" fg:w="1"/><text x="70.6204%" y="191.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (1 samples, 0.53%)</title><rect x="70.3704%" y="165" width="0.5291%" height="15" fill="rgb(231,124,27)" fg:x="133" fg:w="1"/><text x="70.6204%" y="175.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (1 samples, 0.53%)</title><rect x="70.3704%" y="149" width="0.5291%" height="15" fill="rgb(249,195,6)" fg:x="133" fg:w="1"/><text x="70.6204%" y="159.50"></text></g><g><title>core::ops::function::FnMut::call_mut (7 samples, 3.70%)</title><rect x="68.2540%" y="229" width="3.7037%" height="15" fill="rgb(237,174,47)" fg:x="129" fg:w="7"/><text x="68.5040%" y="239.50">core..</text></g><g><title>nom::character::complete::anychar (7 samples, 3.70%)</title><rect x="68.2540%" y="213" width="3.7037%" height="15" fill="rgb(206,201,31)" fg:x="129" fg:w="7"/><text x="68.5040%" y="223.50">nom:..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.06%)</title><rect x="70.8995%" y="197" width="1.0582%" height="15" fill="rgb(231,57,52)" fg:x="134" fg:w="2"/><text x="71.1495%" y="207.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.06%)</title><rect x="70.8995%" y="181" width="1.0582%" height="15" fill="rgb(248,177,22)" fg:x="134" fg:w="2"/><text x="71.1495%" y="191.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 1.06%)</title><rect x="70.8995%" y="165" width="1.0582%" height="15" fill="rgb(215,211,37)" fg:x="134" fg:w="2"/><text x="71.1495%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (4 samples, 2.12%)</title><rect x="86.2434%" y="133" width="2.1164%" height="15" fill="rgb(241,128,51)" fg:x="163" fg:w="4"/><text x="86.4934%" y="143.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 2.12%)</title><rect x="86.2434%" y="117" width="2.1164%" height="15" fill="rgb(227,165,31)" fg:x="163" fg:w="4"/><text x="86.4934%" y="127.50">c..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (46 samples, 24.34%)</title><rect x="66.1376%" y="245" width="24.3386%" height="15" fill="rgb(228,167,24)" fg:x="125" fg:w="46"/><text x="66.3876%" y="255.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::pa..</text></g><g><title>nom::branch::alt::{{closure}} (35 samples, 18.52%)</title><rect x="71.9577%" y="229" width="18.5185%" height="15" fill="rgb(228,143,12)" fg:x="136" fg:w="35"/><text x="72.2077%" y="239.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (35 samples, 18.52%)</title><rect x="71.9577%" y="213" width="18.5185%" height="15" fill="rgb(249,149,8)" fg:x="136" fg:w="35"/><text x="72.2077%" y="223.50">&lt;(A,B,C) as nom::branch::Alt&lt;..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (28 samples, 14.81%)</title><rect x="75.6614%" y="197" width="14.8148%" height="15" fill="rgb(243,35,44)" fg:x="143" fg:w="28"/><text x="75.9114%" y="207.50">&lt;F as nom::internal::Pa..</text></g><g><title>nom::bytes::complete::tag::{{closure}} (24 samples, 12.70%)</title><rect x="77.7778%" y="181" width="12.6984%" height="15" fill="rgb(246,89,9)" fg:x="147" fg:w="24"/><text x="78.0278%" y="191.50">nom::bytes::complet..</text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (8 samples, 4.23%)</title><rect x="86.2434%" y="165" width="4.2328%" height="15" fill="rgb(233,213,13)" fg:x="163" fg:w="8"/><text x="86.4934%" y="175.50">&lt;&amp;str..</text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (8 samples, 4.23%)</title><rect x="86.2434%" y="149" width="4.2328%" height="15" fill="rgb(233,141,41)" fg:x="163" fg:w="8"/><text x="86.4934%" y="159.50">&lt;&amp;[u8..</text></g><g><title>core::iter::traits::iterator::Iterator::zip (4 samples, 2.12%)</title><rect x="88.3598%" y="133" width="2.1164%" height="15" fill="rgb(239,167,4)" fg:x="167" fg:w="4"/><text x="88.6098%" y="143.50">c..</text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (4 samples, 2.12%)</title><rect x="88.3598%" y="117" width="2.1164%" height="15" fill="rgb(209,217,16)" fg:x="167" fg:w="4"/><text x="88.6098%" y="127.50">c..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (4 samples, 2.12%)</title><rect x="88.3598%" y="101" width="2.1164%" height="15" fill="rgb(219,88,35)" fg:x="167" fg:w="4"/><text x="88.6098%" y="111.50">&lt;..</text></g><g><title>core::cmp::min (4 samples, 2.12%)</title><rect x="88.3598%" y="85" width="2.1164%" height="15" fill="rgb(220,193,23)" fg:x="167" fg:w="4"/><text x="88.6098%" y="95.50">c..</text></g><g><title>core::cmp::Ord::min (4 samples, 2.12%)</title><rect x="88.3598%" y="69" width="2.1164%" height="15" fill="rgb(230,90,52)" fg:x="167" fg:w="4"/><text x="88.6098%" y="79.50">c..</text></g><g><title>core::cmp::min_by (4 samples, 2.12%)</title><rect x="88.3598%" y="53" width="2.1164%" height="15" fill="rgb(252,106,19)" fg:x="167" fg:w="4"/><text x="88.6098%" y="63.50">c..</text></g><g><title>askama_derive::generator::build_template (163 samples, 86.24%)</title><rect x="4.7619%" y="597" width="86.2434%" height="15" fill="rgb(206,74,20)" fg:x="9" fg:w="163"/><text x="5.0119%" y="607.50">askama_derive::generator::build_template</text></g><g><title>askama_derive::parser::parse (54 samples, 28.57%)</title><rect x="62.4339%" y="581" width="28.5714%" height="15" fill="rgb(230,138,44)" fg:x="118" fg:w="54"/><text x="62.6839%" y="591.50">askama_derive::parser::parse</text></g><g><title>askama_derive::parser::node::Node::parse (54 samples, 28.57%)</title><rect x="62.4339%" y="565" width="28.5714%" height="15" fill="rgb(235,182,43)" fg:x="118" fg:w="54"/><text x="62.6839%" y="575.50">askama_derive::parser::node::Node::parse</text></g><g><title>askama_derive::parser::node::parse_template (54 samples, 28.57%)</title><rect x="62.4339%" y="549" width="28.5714%" height="15" fill="rgb(242,16,51)" fg:x="118" fg:w="54"/><text x="62.6839%" y="559.50">askama_derive::parser::node::parse_template</text></g><g><title>nom::multi::many0::{{closure}} (54 samples, 28.57%)</title><rect x="62.4339%" y="533" width="28.5714%" height="15" fill="rgb(248,9,4)" fg:x="118" fg:w="54"/><text x="62.6839%" y="543.50">nom::multi::many0::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (54 samples, 28.57%)</title><rect x="62.4339%" y="517" width="28.5714%" height="15" fill="rgb(210,31,22)" fg:x="118" fg:w="54"/><text x="62.6839%" y="527.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::branch::alt::{{closure}} (54 samples, 28.57%)</title><rect x="62.4339%" y="501" width="28.5714%" height="15" fill="rgb(239,54,39)" fg:x="118" fg:w="54"/><text x="62.6839%" y="511.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (54 samples, 28.57%)</title><rect x="62.4339%" y="485" width="28.5714%" height="15" fill="rgb(230,99,41)" fg:x="118" fg:w="54"/><text x="62.6839%" y="495.50">&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Er..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (54 samples, 28.57%)</title><rect x="62.4339%" y="469" width="28.5714%" height="15" fill="rgb(253,106,12)" fg:x="118" fg:w="54"/><text x="62.6839%" y="479.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::complete::{{closure}} (54 samples, 28.57%)</title><rect x="62.4339%" y="453" width="28.5714%" height="15" fill="rgb(213,46,41)" fg:x="118" fg:w="54"/><text x="62.6839%" y="463.50">nom::combinator::complete::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (54 samples, 28.57%)</title><rect x="62.4339%" y="437" width="28.5714%" height="15" fill="rgb(215,133,35)" fg:x="118" fg:w="54"/><text x="62.6839%" y="447.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (54 samples, 28.57%)</title><rect x="62.4339%" y="421" width="28.5714%" height="15" fill="rgb(213,28,5)" fg:x="118" fg:w="54"/><text x="62.6839%" y="431.50">askama_derive::parser::node::parse_template::{..</text></g><g><title>askama_derive::parser::take_content (54 samples, 28.57%)</title><rect x="62.4339%" y="405" width="28.5714%" height="15" fill="rgb(215,77,49)" fg:x="118" fg:w="54"/><text x="62.6839%" y="415.50">askama_derive::parser::take_content</text></g><g><title>nom::combinator::opt::{{closure}} (54 samples, 28.57%)</title><rect x="62.4339%" y="389" width="28.5714%" height="15" fill="rgb(248,100,22)" fg:x="118" fg:w="54"/><text x="62.6839%" y="399.50">nom::combinator::opt::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (54 samples, 28.57%)</title><rect x="62.4339%" y="373" width="28.5714%" height="15" fill="rgb(208,67,9)" fg:x="118" fg:w="54"/><text x="62.6839%" y="383.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::recognize::{{closure}} (54 samples, 28.57%)</title><rect x="62.4339%" y="357" width="28.5714%" height="15" fill="rgb(219,133,21)" fg:x="118" fg:w="54"/><text x="62.6839%" y="367.50">nom::combinator::recognize::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (54 samples, 28.57%)</title><rect x="62.4339%" y="341" width="28.5714%" height="15" fill="rgb(246,46,29)" fg:x="118" fg:w="54"/><text x="62.6839%" y="351.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>askama_derive::parser::skip_till::{{closure}} (54 samples, 28.57%)</title><rect x="62.4339%" y="325" width="28.5714%" height="15" fill="rgb(246,185,52)" fg:x="118" fg:w="54"/><text x="62.6839%" y="335.50">askama_derive::parser::skip_till::{{closure}}</text></g><g><title>nom::branch::alt::{{closure}} (51 samples, 26.98%)</title><rect x="64.0212%" y="309" width="26.9841%" height="15" fill="rgb(252,136,11)" fg:x="121" fg:w="51"/><text x="64.2712%" y="319.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (51 samples, 26.98%)</title><rect x="64.0212%" y="293" width="26.9841%" height="15" fill="rgb(219,138,53)" fg:x="121" fg:w="51"/><text x="64.2712%" y="303.50">&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Err..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (47 samples, 24.87%)</title><rect x="66.1376%" y="277" width="24.8677%" height="15" fill="rgb(211,51,23)" fg:x="125" fg:w="47"/><text x="66.3876%" y="287.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::par..</text></g><g><title>nom::combinator::map::{{closure}} (47 samples, 24.87%)</title><rect x="66.1376%" y="261" width="24.8677%" height="15" fill="rgb(247,221,28)" fg:x="125" fg:w="47"/><text x="66.3876%" y="271.50">nom::combinator::map::{{closure}}</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.53%)</title><rect x="90.4762%" y="245" width="0.5291%" height="15" fill="rgb(251,222,45)" fg:x="171" fg:w="1"/><text x="90.7262%" y="255.50"></text></g><g><title>proc_macro2::fallback::TokenStreamBuilder::build (1 samples, 0.53%)</title><rect x="91.0053%" y="485" width="0.5291%" height="15" fill="rgb(217,162,53)" fg:x="172" fg:w="1"/><text x="91.2553%" y="495.50"></text></g><g><title>proc_macro2::rcvec::RcVecBuilder&lt;T&gt;::build (1 samples, 0.53%)</title><rect x="91.0053%" y="469" width="0.5291%" height="15" fill="rgb(229,93,14)" fg:x="172" fg:w="1"/><text x="91.2553%" y="479.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (1 samples, 0.53%)</title><rect x="91.0053%" y="453" width="0.5291%" height="15" fill="rgb(209,67,49)" fg:x="172" fg:w="1"/><text x="91.2553%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.53%)</title><rect x="91.0053%" y="437" width="0.5291%" height="15" fill="rgb(213,87,29)" fg:x="172" fg:w="1"/><text x="91.2553%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.53%)</title><rect x="91.0053%" y="421" width="0.5291%" height="15" fill="rgb(205,151,52)" fg:x="172" fg:w="1"/><text x="91.2553%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.53%)</title><rect x="91.0053%" y="405" width="0.5291%" height="15" fill="rgb(253,215,39)" fg:x="172" fg:w="1"/><text x="91.2553%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.53%)</title><rect x="91.0053%" y="389" width="0.5291%" height="15" fill="rgb(221,220,41)" fg:x="172" fg:w="1"/><text x="91.2553%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.53%)</title><rect x="91.0053%" y="373" width="0.5291%" height="15" fill="rgb(218,133,21)" fg:x="172" fg:w="1"/><text x="91.2553%" y="383.50"></text></g><g><title>malloc (1 samples, 0.53%)</title><rect x="91.0053%" y="357" width="0.5291%" height="15" fill="rgb(221,193,43)" fg:x="172" fg:w="1"/><text x="91.2553%" y="367.50"></text></g><g><title>proc_macro2::fallback::TokenStreamBuilder::push_token_from_parser (1 samples, 0.53%)</title><rect x="91.5344%" y="485" width="0.5291%" height="15" fill="rgb(240,128,52)" fg:x="173" fg:w="1"/><text x="91.7844%" y="495.50"></text></g><g><title>proc_macro2::rcvec::RcVecBuilder&lt;T&gt;::push (1 samples, 0.53%)</title><rect x="91.5344%" y="469" width="0.5291%" height="15" fill="rgb(253,114,12)" fg:x="173" fg:w="1"/><text x="91.7844%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.53%)</title><rect x="91.5344%" y="453" width="0.5291%" height="15" fill="rgb(215,223,47)" fg:x="173" fg:w="1"/><text x="91.7844%" y="463.50"></text></g><g><title>proc_macro2::parse::ident (1 samples, 0.53%)</title><rect x="92.0635%" y="469" width="0.5291%" height="15" fill="rgb(248,225,23)" fg:x="174" fg:w="1"/><text x="92.3135%" y="479.50"></text></g><g><title>proc_macro2::parse::ident_any (1 samples, 0.53%)</title><rect x="92.0635%" y="453" width="0.5291%" height="15" fill="rgb(250,108,0)" fg:x="174" fg:w="1"/><text x="92.3135%" y="463.50"></text></g><g><title>proc_macro2::Ident::new (1 samples, 0.53%)</title><rect x="92.0635%" y="437" width="0.5291%" height="15" fill="rgb(228,208,7)" fg:x="174" fg:w="1"/><text x="92.3135%" y="447.50"></text></g><g><title>proc_macro2::imp::Ident::new (1 samples, 0.53%)</title><rect x="92.0635%" y="421" width="0.5291%" height="15" fill="rgb(244,45,10)" fg:x="174" fg:w="1"/><text x="92.3135%" y="431.50"></text></g><g><title>proc_macro2::fallback::Ident::new (1 samples, 0.53%)</title><rect x="92.0635%" y="405" width="0.5291%" height="15" fill="rgb(207,125,25)" fg:x="174" fg:w="1"/><text x="92.3135%" y="415.50"></text></g><g><title>proc_macro2::fallback::Ident::_new (1 samples, 0.53%)</title><rect x="92.0635%" y="389" width="0.5291%" height="15" fill="rgb(210,195,18)" fg:x="174" fg:w="1"/><text x="92.3135%" y="399.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.53%)</title><rect x="92.0635%" y="373" width="0.5291%" height="15" fill="rgb(249,80,12)" fg:x="174" fg:w="1"/><text x="92.3135%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.53%)</title><rect x="92.0635%" y="357" width="0.5291%" height="15" fill="rgb(221,65,9)" fg:x="174" fg:w="1"/><text x="92.3135%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.53%)</title><rect x="92.0635%" y="341" width="0.5291%" height="15" fill="rgb(235,49,36)" fg:x="174" fg:w="1"/><text x="92.3135%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.53%)</title><rect x="92.0635%" y="325" width="0.5291%" height="15" fill="rgb(225,32,20)" fg:x="174" fg:w="1"/><text x="92.3135%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.53%)</title><rect x="92.0635%" y="309" width="0.5291%" height="15" fill="rgb(215,141,46)" fg:x="174" fg:w="1"/><text x="92.3135%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.53%)</title><rect x="92.0635%" y="293" width="0.5291%" height="15" fill="rgb(250,160,47)" fg:x="174" fg:w="1"/><text x="92.3135%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.53%)</title><rect x="92.0635%" y="277" width="0.5291%" height="15" fill="rgb(216,222,40)" fg:x="174" fg:w="1"/><text x="92.3135%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.53%)</title><rect x="92.0635%" y="261" width="0.5291%" height="15" fill="rgb(234,217,39)" fg:x="174" fg:w="1"/><text x="92.3135%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.53%)</title><rect x="92.0635%" y="245" width="0.5291%" height="15" fill="rgb(207,178,40)" fg:x="174" fg:w="1"/><text x="92.3135%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.53%)</title><rect x="92.0635%" y="229" width="0.5291%" height="15" fill="rgb(221,136,13)" fg:x="174" fg:w="1"/><text x="92.3135%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.53%)</title><rect x="92.0635%" y="213" width="0.5291%" height="15" fill="rgb(249,199,10)" fg:x="174" fg:w="1"/><text x="92.3135%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.53%)</title><rect x="92.0635%" y="197" width="0.5291%" height="15" fill="rgb(249,222,13)" fg:x="174" fg:w="1"/><text x="92.3135%" y="207.50"></text></g><g><title>malloc (1 samples, 0.53%)</title><rect x="92.0635%" y="181" width="0.5291%" height="15" fill="rgb(244,185,38)" fg:x="174" fg:w="1"/><text x="92.3135%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.53%)</title><rect x="92.0635%" y="165" width="0.5291%" height="15" fill="rgb(236,202,9)" fg:x="174" fg:w="1"/><text x="92.3135%" y="175.50"></text></g><g><title>proc_macro2::parse::byte (1 samples, 0.53%)</title><rect x="92.5926%" y="437" width="0.5291%" height="15" fill="rgb(250,229,37)" fg:x="175" fg:w="1"/><text x="92.8426%" y="447.50"></text></g><g><title>proc_macro2::parse::Cursor::parse (1 samples, 0.53%)</title><rect x="92.5926%" y="421" width="0.5291%" height="15" fill="rgb(206,174,23)" fg:x="175" fg:w="1"/><text x="92.8426%" y="431.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (1 samples, 0.53%)</title><rect x="92.5926%" y="405" width="0.5291%" height="15" fill="rgb(211,33,43)" fg:x="175" fg:w="1"/><text x="92.8426%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (1 samples, 0.53%)</title><rect x="92.5926%" y="389" width="0.5291%" height="15" fill="rgb(245,58,50)" fg:x="175" fg:w="1"/><text x="92.8426%" y="399.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (1 samples, 0.53%)</title><rect x="92.5926%" y="373" width="0.5291%" height="15" fill="rgb(244,68,36)" fg:x="175" fg:w="1"/><text x="92.8426%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (1 samples, 0.53%)</title><rect x="92.5926%" y="357" width="0.5291%" height="15" fill="rgb(232,229,15)" fg:x="175" fg:w="1"/><text x="92.8426%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.53%)</title><rect x="92.5926%" y="341" width="0.5291%" height="15" fill="rgb(254,30,23)" fg:x="175" fg:w="1"/><text x="92.8426%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.53%)</title><rect x="92.5926%" y="325" width="0.5291%" height="15" fill="rgb(235,160,14)" fg:x="175" fg:w="1"/><text x="92.8426%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.53%)</title><rect x="92.5926%" y="309" width="0.5291%" height="15" fill="rgb(212,155,44)" fg:x="175" fg:w="1"/><text x="92.8426%" y="319.50"></text></g><g><title>proc_macro2::parse::literal (9 samples, 4.76%)</title><rect x="92.5926%" y="469" width="4.7619%" height="15" fill="rgb(226,2,50)" fg:x="175" fg:w="9"/><text x="92.8426%" y="479.50">proc_m..</text></g><g><title>proc_macro2::parse::literal_nocapture (9 samples, 4.76%)</title><rect x="92.5926%" y="453" width="4.7619%" height="15" fill="rgb(234,177,6)" fg:x="175" fg:w="9"/><text x="92.8426%" y="463.50">proc_m..</text></g><g><title>proc_macro2::parse::string (8 samples, 4.23%)</title><rect x="93.1217%" y="437" width="4.2328%" height="15" fill="rgb(217,24,9)" fg:x="176" fg:w="8"/><text x="93.3717%" y="447.50">proc_..</text></g><g><title>proc_macro2::parse::cooked_string (8 samples, 4.23%)</title><rect x="93.1217%" y="421" width="4.2328%" height="15" fill="rgb(220,13,46)" fg:x="176" fg:w="8"/><text x="93.3717%" y="431.50">proc_..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.12%)</title><rect x="95.2381%" y="405" width="2.1164%" height="15" fill="rgb(239,221,27)" fg:x="180" fg:w="4"/><text x="95.4881%" y="415.50">&lt;..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.12%)</title><rect x="95.2381%" y="389" width="2.1164%" height="15" fill="rgb(222,198,25)" fg:x="180" fg:w="4"/><text x="95.4881%" y="399.50">&lt;..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.59%)</title><rect x="95.7672%" y="373" width="1.5873%" height="15" fill="rgb(211,99,13)" fg:x="181" fg:w="3"/><text x="96.0172%" y="383.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 1.59%)</title><rect x="95.7672%" y="357" width="1.5873%" height="15" fill="rgb(232,111,31)" fg:x="181" fg:w="3"/><text x="96.0172%" y="367.50"></text></g><g><title>proc_macro2::Punct::new (1 samples, 0.53%)</title><rect x="97.3545%" y="453" width="0.5291%" height="15" fill="rgb(245,82,37)" fg:x="184" fg:w="1"/><text x="97.6045%" y="463.50"></text></g><g><title>proc_macro2::Span::call_site (1 samples, 0.53%)</title><rect x="97.3545%" y="437" width="0.5291%" height="15" fill="rgb(227,149,46)" fg:x="184" fg:w="1"/><text x="97.6045%" y="447.50"></text></g><g><title>proc_macro2::imp::Span::call_site (1 samples, 0.53%)</title><rect x="97.3545%" y="421" width="0.5291%" height="15" fill="rgb(218,36,50)" fg:x="184" fg:w="1"/><text x="97.6045%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (15 samples, 7.94%)</title><rect x="91.0053%" y="597" width="7.9365%" height="15" fill="rgb(226,80,48)" fg:x="172" fg:w="15"/><text x="91.2553%" y="607.50">core::str::..</text></g><g><title>&lt;proc_macro2::TokenStream as core::str::traits::FromStr&gt;::from_str (15 samples, 7.94%)</title><rect x="91.0053%" y="581" width="7.9365%" height="15" fill="rgb(238,224,15)" fg:x="172" fg:w="15"/><text x="91.2553%" y="591.50">&lt;proc_macro..</text></g><g><title>core::str::&lt;impl str&gt;::parse (15 samples, 7.94%)</title><rect x="91.0053%" y="565" width="7.9365%" height="15" fill="rgb(241,136,10)" fg:x="172" fg:w="15"/><text x="91.2553%" y="575.50">core::str::..</text></g><g><title>&lt;proc_macro2::imp::TokenStream as core::str::traits::FromStr&gt;::from_str (15 samples, 7.94%)</title><rect x="91.0053%" y="549" width="7.9365%" height="15" fill="rgb(208,32,45)" fg:x="172" fg:w="15"/><text x="91.2553%" y="559.50">&lt;proc_macro..</text></g><g><title>core::str::&lt;impl str&gt;::parse (15 samples, 7.94%)</title><rect x="91.0053%" y="533" width="7.9365%" height="15" fill="rgb(207,135,9)" fg:x="172" fg:w="15"/><text x="91.2553%" y="543.50">core::str::..</text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::str::traits::FromStr&gt;::from_str (15 samples, 7.94%)</title><rect x="91.0053%" y="517" width="7.9365%" height="15" fill="rgb(206,86,44)" fg:x="172" fg:w="15"/><text x="91.2553%" y="527.50">&lt;proc_macro..</text></g><g><title>proc_macro2::parse::token_stream (15 samples, 7.94%)</title><rect x="91.0053%" y="501" width="7.9365%" height="15" fill="rgb(245,177,15)" fg:x="172" fg:w="15"/><text x="91.2553%" y="511.50">proc_macro2..</text></g><g><title>proc_macro2::parse::leaf_token (13 samples, 6.88%)</title><rect x="92.0635%" y="485" width="6.8783%" height="15" fill="rgb(206,64,50)" fg:x="174" fg:w="13"/><text x="92.3135%" y="495.50">proc_macr..</text></g><g><title>proc_macro2::parse::punct (3 samples, 1.59%)</title><rect x="97.3545%" y="469" width="1.5873%" height="15" fill="rgb(234,36,40)" fg:x="184" fg:w="3"/><text x="97.6045%" y="479.50"></text></g><g><title>proc_macro2::parse::ident_any (2 samples, 1.06%)</title><rect x="97.8836%" y="453" width="1.0582%" height="15" fill="rgb(213,64,8)" fg:x="185" fg:w="2"/><text x="98.1336%" y="463.50"></text></g><g><title>proc_macro2::Ident::new (2 samples, 1.06%)</title><rect x="97.8836%" y="437" width="1.0582%" height="15" fill="rgb(210,75,36)" fg:x="185" fg:w="2"/><text x="98.1336%" y="447.50"></text></g><g><title>proc_macro2::imp::Ident::new (2 samples, 1.06%)</title><rect x="97.8836%" y="421" width="1.0582%" height="15" fill="rgb(229,88,21)" fg:x="185" fg:w="2"/><text x="98.1336%" y="431.50"></text></g><g><title>proc_macro2::fallback::Ident::new (1 samples, 0.53%)</title><rect x="98.4127%" y="405" width="0.5291%" height="15" fill="rgb(252,204,47)" fg:x="186" fg:w="1"/><text x="98.6627%" y="415.50"></text></g><g><title>proc_macro2::fallback::Ident::_new (1 samples, 0.53%)</title><rect x="98.4127%" y="389" width="0.5291%" height="15" fill="rgb(208,77,27)" fg:x="186" fg:w="1"/><text x="98.6627%" y="399.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.53%)</title><rect x="98.4127%" y="373" width="0.5291%" height="15" fill="rgb(221,76,26)" fg:x="186" fg:w="1"/><text x="98.6627%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.53%)</title><rect x="98.4127%" y="357" width="0.5291%" height="15" fill="rgb(225,139,18)" fg:x="186" fg:w="1"/><text x="98.6627%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.53%)</title><rect x="98.4127%" y="341" width="0.5291%" height="15" fill="rgb(230,137,11)" fg:x="186" fg:w="1"/><text x="98.6627%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.53%)</title><rect x="98.4127%" y="325" width="0.5291%" height="15" fill="rgb(212,28,1)" fg:x="186" fg:w="1"/><text x="98.6627%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.53%)</title><rect x="98.4127%" y="309" width="0.5291%" height="15" fill="rgb(248,164,17)" fg:x="186" fg:w="1"/><text x="98.6627%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.53%)</title><rect x="98.4127%" y="293" width="0.5291%" height="15" fill="rgb(222,171,42)" fg:x="186" fg:w="1"/><text x="98.6627%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.53%)</title><rect x="98.4127%" y="277" width="0.5291%" height="15" fill="rgb(243,84,45)" fg:x="186" fg:w="1"/><text x="98.6627%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.53%)</title><rect x="98.4127%" y="261" width="0.5291%" height="15" fill="rgb(252,49,23)" fg:x="186" fg:w="1"/><text x="98.6627%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.53%)</title><rect x="98.4127%" y="245" width="0.5291%" height="15" fill="rgb(215,19,7)" fg:x="186" fg:w="1"/><text x="98.6627%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.53%)</title><rect x="98.4127%" y="229" width="0.5291%" height="15" fill="rgb(238,81,41)" fg:x="186" fg:w="1"/><text x="98.6627%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.53%)</title><rect x="98.4127%" y="213" width="0.5291%" height="15" fill="rgb(210,199,37)" fg:x="186" fg:w="1"/><text x="98.6627%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.53%)</title><rect x="98.4127%" y="197" width="0.5291%" height="15" fill="rgb(244,192,49)" fg:x="186" fg:w="1"/><text x="98.6627%" y="207.50"></text></g><g><title>malloc (1 samples, 0.53%)</title><rect x="98.4127%" y="181" width="0.5291%" height="15" fill="rgb(226,211,11)" fg:x="186" fg:w="1"/><text x="98.6627%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.53%)</title><rect x="98.4127%" y="165" width="0.5291%" height="15" fill="rgb(236,162,54)" fg:x="186" fg:w="1"/><text x="98.6627%" y="175.50"></text></g><g><title>askama_derive::derive_template (179 samples, 94.71%)</title><rect x="4.7619%" y="629" width="94.7090%" height="15" fill="rgb(220,229,9)" fg:x="9" fg:w="179"/><text x="5.0119%" y="639.50">askama_derive::derive_template</text></g><g><title>askama_derive::generator::derive_template (179 samples, 94.71%)</title><rect x="4.7619%" y="613" width="94.7090%" height="15" fill="rgb(250,87,22)" fg:x="9" fg:w="179"/><text x="5.0119%" y="623.50">askama_derive::generator::derive_template</text></g><g><title>syn::parse2 (1 samples, 0.53%)</title><rect x="98.9418%" y="597" width="0.5291%" height="15" fill="rgb(239,43,17)" fg:x="187" fg:w="1"/><text x="99.1918%" y="607.50"></text></g><g><title>&lt;F as syn::parse::Parser&gt;::parse2 (1 samples, 0.53%)</title><rect x="98.9418%" y="581" width="0.5291%" height="15" fill="rgb(231,177,25)" fg:x="187" fg:w="1"/><text x="99.1918%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.53%)</title><rect x="98.9418%" y="565" width="0.5291%" height="15" fill="rgb(219,179,1)" fg:x="187" fg:w="1"/><text x="99.1918%" y="575.50"></text></g><g><title>syn::derive::parsing::&lt;impl syn::parse::Parse for syn::derive::DeriveInput&gt;::parse (1 samples, 0.53%)</title><rect x="98.9418%" y="549" width="0.5291%" height="15" fill="rgb(238,219,53)" fg:x="187" fg:w="1"/><text x="99.1918%" y="559.50"></text></g><g><title>syn::derive::parsing::data_struct (1 samples, 0.53%)</title><rect x="98.9418%" y="533" width="0.5291%" height="15" fill="rgb(232,167,36)" fg:x="187" fg:w="1"/><text x="99.1918%" y="543.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.53%)</title><rect x="98.9418%" y="517" width="0.5291%" height="15" fill="rgb(244,19,51)" fg:x="187" fg:w="1"/><text x="99.1918%" y="527.50"></text></g><g><title>syn::data::parsing::&lt;impl syn::parse::Parse for syn::data::FieldsNamed&gt;::parse (1 samples, 0.53%)</title><rect x="98.9418%" y="501" width="0.5291%" height="15" fill="rgb(224,6,22)" fg:x="187" fg:w="1"/><text x="99.1918%" y="511.50"></text></g><g><title>syn::parse::ParseBuffer::parse_terminated (1 samples, 0.53%)</title><rect x="98.9418%" y="485" width="0.5291%" height="15" fill="rgb(224,145,5)" fg:x="187" fg:w="1"/><text x="99.1918%" y="495.50"></text></g><g><title>syn::punctuated::Punctuated&lt;T,P&gt;::parse_terminated_with (1 samples, 0.53%)</title><rect x="98.9418%" y="469" width="0.5291%" height="15" fill="rgb(234,130,49)" fg:x="187" fg:w="1"/><text x="99.1918%" y="479.50"></text></g><g><title>syn::data::parsing::&lt;impl syn::data::Field&gt;::parse_named (1 samples, 0.53%)</title><rect x="98.9418%" y="453" width="0.5291%" height="15" fill="rgb(254,6,2)" fg:x="187" fg:w="1"/><text x="99.1918%" y="463.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.53%)</title><rect x="98.9418%" y="437" width="0.5291%" height="15" fill="rgb(208,96,46)" fg:x="187" fg:w="1"/><text x="99.1918%" y="447.50"></text></g><g><title>syn::ty::parsing::&lt;impl syn::parse::Parse for syn::ty::Type&gt;::parse (1 samples, 0.53%)</title><rect x="98.9418%" y="421" width="0.5291%" height="15" fill="rgb(239,3,39)" fg:x="187" fg:w="1"/><text x="99.1918%" y="431.50"></text></g><g><title>syn::ty::parsing::ambig_ty (1 samples, 0.53%)</title><rect x="98.9418%" y="405" width="0.5291%" height="15" fill="rgb(233,210,1)" fg:x="187" fg:w="1"/><text x="99.1918%" y="415.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.53%)</title><rect x="98.9418%" y="389" width="0.5291%" height="15" fill="rgb(244,137,37)" fg:x="187" fg:w="1"/><text x="99.1918%" y="399.50"></text></g><g><title>syn::ty::parsing::&lt;impl syn::parse::Parse for syn::ty::TypeReference&gt;::parse (1 samples, 0.53%)</title><rect x="98.9418%" y="373" width="0.5291%" height="15" fill="rgb(240,136,2)" fg:x="187" fg:w="1"/><text x="99.1918%" y="383.50"></text></g><g><title>syn::parse::ParseBuffer::call (1 samples, 0.53%)</title><rect x="98.9418%" y="357" width="0.5291%" height="15" fill="rgb(239,18,37)" fg:x="187" fg:w="1"/><text x="99.1918%" y="367.50"></text></g><g><title>syn::ty::parsing::&lt;impl syn::ty::Type&gt;::without_plus (1 samples, 0.53%)</title><rect x="98.9418%" y="341" width="0.5291%" height="15" fill="rgb(218,185,22)" fg:x="187" fg:w="1"/><text x="99.1918%" y="351.50"></text></g><g><title>syn::ty::parsing::ambig_ty (1 samples, 0.53%)</title><rect x="98.9418%" y="325" width="0.5291%" height="15" fill="rgb(225,218,4)" fg:x="187" fg:w="1"/><text x="99.1918%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.53%)</title><rect x="98.9418%" y="309" width="0.5291%" height="15" fill="rgb(230,182,32)" fg:x="187" fg:w="1"/><text x="99.1918%" y="319.50"></text></g><g><title>all (189 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="189"/><text x="0.2500%" y="943.50"></text></g><g><title>askama_bench (189 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="189"/><text x="0.2500%" y="927.50">askama_bench</text></g><g><title>_start (182 samples, 96.30%)</title><rect x="3.7037%" y="901" width="96.2963%" height="15" fill="rgb(234,209,42)" fg:x="7" fg:w="182"/><text x="3.9537%" y="911.50">_start</text></g><g><title>__libc_start_main (182 samples, 96.30%)</title><rect x="3.7037%" y="885" width="96.2963%" height="15" fill="rgb(227,7,12)" fg:x="7" fg:w="182"/><text x="3.9537%" y="895.50">__libc_start_main</text></g><g><title>[libc.so.6] (182 samples, 96.30%)</title><rect x="3.7037%" y="869" width="96.2963%" height="15" fill="rgb(245,203,43)" fg:x="7" fg:w="182"/><text x="3.9537%" y="879.50">[libc.so.6]</text></g><g><title>main (182 samples, 96.30%)</title><rect x="3.7037%" y="853" width="96.2963%" height="15" fill="rgb(238,205,33)" fg:x="7" fg:w="182"/><text x="3.9537%" y="863.50">main</text></g><g><title>std::rt::lang_start_internal (182 samples, 96.30%)</title><rect x="3.7037%" y="837" width="96.2963%" height="15" fill="rgb(231,56,7)" fg:x="7" fg:w="182"/><text x="3.9537%" y="847.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (182 samples, 96.30%)</title><rect x="3.7037%" y="821" width="96.2963%" height="15" fill="rgb(244,186,29)" fg:x="7" fg:w="182"/><text x="3.9537%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (182 samples, 96.30%)</title><rect x="3.7037%" y="805" width="96.2963%" height="15" fill="rgb(234,111,31)" fg:x="7" fg:w="182"/><text x="3.9537%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (182 samples, 96.30%)</title><rect x="3.7037%" y="789" width="96.2963%" height="15" fill="rgb(241,149,10)" fg:x="7" fg:w="182"/><text x="3.9537%" y="799.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (182 samples, 96.30%)</title><rect x="3.7037%" y="773" width="96.2963%" height="15" fill="rgb(249,206,44)" fg:x="7" fg:w="182"/><text x="3.9537%" y="783.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (182 samples, 96.30%)</title><rect x="3.7037%" y="757" width="96.2963%" height="15" fill="rgb(251,153,30)" fg:x="7" fg:w="182"/><text x="3.9537%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (182 samples, 96.30%)</title><rect x="3.7037%" y="741" width="96.2963%" height="15" fill="rgb(239,152,38)" fg:x="7" fg:w="182"/><text x="3.9537%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (182 samples, 96.30%)</title><rect x="3.7037%" y="725" width="96.2963%" height="15" fill="rgb(249,139,47)" fg:x="7" fg:w="182"/><text x="3.9537%" y="735.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (182 samples, 96.30%)</title><rect x="3.7037%" y="709" width="96.2963%" height="15" fill="rgb(244,64,35)" fg:x="7" fg:w="182"/><text x="3.9537%" y="719.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (182 samples, 96.30%)</title><rect x="3.7037%" y="693" width="96.2963%" height="15" fill="rgb(216,46,15)" fg:x="7" fg:w="182"/><text x="3.9537%" y="703.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (182 samples, 96.30%)</title><rect x="3.7037%" y="677" width="96.2963%" height="15" fill="rgb(250,74,19)" fg:x="7" fg:w="182"/><text x="3.9537%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (182 samples, 96.30%)</title><rect x="3.7037%" y="661" width="96.2963%" height="15" fill="rgb(249,42,33)" fg:x="7" fg:w="182"/><text x="3.9537%" y="671.50">core::ops::function::FnOnce::call_once</text></g><g><title>askama_bench::main (182 samples, 96.30%)</title><rect x="3.7037%" y="645" width="96.2963%" height="15" fill="rgb(242,149,17)" fg:x="7" fg:w="182"/><text x="3.9537%" y="655.50">askama_bench::main</text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::TokenStream&gt; (1 samples, 0.53%)</title><rect x="99.4709%" y="629" width="0.5291%" height="15" fill="rgb(244,29,21)" fg:x="188" fg:w="1"/><text x="99.7209%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::imp::TokenStream&gt; (1 samples, 0.53%)</title><rect x="99.4709%" y="613" width="0.5291%" height="15" fill="rgb(220,130,37)" fg:x="188" fg:w="1"/><text x="99.7209%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::fallback::TokenStream&gt; (1 samples, 0.53%)</title><rect x="99.4709%" y="597" width="0.5291%" height="15" fill="rgb(211,67,2)" fg:x="188" fg:w="1"/><text x="99.7209%" y="607.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::ops::drop::Drop&gt;::drop (1 samples, 0.53%)</title><rect x="99.4709%" y="581" width="0.5291%" height="15" fill="rgb(235,68,52)" fg:x="188" fg:w="1"/><text x="99.7209%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::TokenTree&gt; (1 samples, 0.53%)</title><rect x="99.4709%" y="565" width="0.5291%" height="15" fill="rgb(246,142,3)" fg:x="188" fg:w="1"/><text x="99.7209%" y="575.50"></text></g></svg></svg>