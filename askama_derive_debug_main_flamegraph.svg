<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="2110"><g><title>[askama_bench] (1 samples, 0.05%)</title><rect x="0.0000%" y="885" width="0.0474%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="0.2370%" y="853" width="0.0474%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="1"/><text x="0.4870%" y="863.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="0.2370%" y="837" width="0.0474%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="0.4870%" y="847.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="0.2370%" y="821" width="0.0474%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.4870%" y="831.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.05%)</title><rect x="0.2370%" y="805" width="0.0474%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.4870%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="0.2370%" y="789" width="0.0474%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.4870%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="0.2370%" y="773" width="0.0474%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.4870%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="0.2370%" y="757" width="0.0474%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.4870%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.09%)</title><rect x="0.2370%" y="869" width="0.0948%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="2"/><text x="0.4870%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.2844%" y="853" width="0.0474%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="1"/><text x="0.5344%" y="863.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.33%)</title><rect x="0.0474%" y="885" width="0.3318%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="7"/><text x="0.2974%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3318%" y="869" width="0.0474%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="1"/><text x="0.5818%" y="879.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="0.3791%" y="869" width="0.0474%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1"/><text x="0.6291%" y="879.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.05%)</title><rect x="0.3791%" y="853" width="0.0474%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="0.6291%" y="863.50"></text></g><g><title>askama_derive::parser::expr::expr_or (1 samples, 0.05%)</title><rect x="0.3791%" y="837" width="0.0474%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="0.6291%" y="847.50"></text></g><g><title>askama_derive::parser::expr::expr_and (1 samples, 0.05%)</title><rect x="0.3791%" y="821" width="0.0474%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="0.6291%" y="831.50"></text></g><g><title>askama_derive::parser::expr::expr_compare (1 samples, 0.05%)</title><rect x="0.3791%" y="805" width="0.0474%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="0.6291%" y="815.50"></text></g><g><title>askama_derive::parser::expr::expr_bor (1 samples, 0.05%)</title><rect x="0.3791%" y="789" width="0.0474%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="0.6291%" y="799.50"></text></g><g><title>askama_derive::parser::expr::expr_bxor (1 samples, 0.05%)</title><rect x="0.3791%" y="773" width="0.0474%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="1"/><text x="0.6291%" y="783.50"></text></g><g><title>askama_derive::parser::expr::expr_band (1 samples, 0.05%)</title><rect x="0.3791%" y="757" width="0.0474%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1"/><text x="0.6291%" y="767.50"></text></g><g><title>askama_derive::parser::expr::expr_shifts (1 samples, 0.05%)</title><rect x="0.3791%" y="741" width="0.0474%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="1"/><text x="0.6291%" y="751.50"></text></g><g><title>askama_derive::parser::expr::expr_addsub (1 samples, 0.05%)</title><rect x="0.3791%" y="725" width="0.0474%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="0.6291%" y="735.50"></text></g><g><title>askama_derive::parser::expr::expr_muldivmod (1 samples, 0.05%)</title><rect x="0.3791%" y="709" width="0.0474%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="1"/><text x="0.6291%" y="719.50"></text></g><g><title>askama_derive::parser::expr::expr_filtered (1 samples, 0.05%)</title><rect x="0.3791%" y="693" width="0.0474%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="1"/><text x="0.6291%" y="703.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.05%)</title><rect x="0.3791%" y="677" width="0.0474%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="1"/><text x="0.6291%" y="687.50"></text></g><g><title>&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="0.3791%" y="661" width="0.0474%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="1"/><text x="0.6291%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="0.3791%" y="645" width="0.0474%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="1"/><text x="0.6291%" y="655.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.05%)</title><rect x="0.3791%" y="629" width="0.0474%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="1"/><text x="0.6291%" y="639.50"></text></g><g><title>askama_derive::parser::expr::expr_prefix (1 samples, 0.05%)</title><rect x="0.3791%" y="613" width="0.0474%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="0.6291%" y="623.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1 samples, 0.05%)</title><rect x="0.3791%" y="597" width="0.0474%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="1"/><text x="0.6291%" y="607.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="0.3791%" y="581" width="0.0474%" height="15" fill="rgb(209,103,24)" fg:x="8" fg:w="1"/><text x="0.6291%" y="591.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.05%)</title><rect x="0.3791%" y="565" width="0.0474%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="1"/><text x="0.6291%" y="575.50"></text></g><g><title>askama_derive::parser::expr::expr_suffix (1 samples, 0.05%)</title><rect x="0.3791%" y="549" width="0.0474%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="0.6291%" y="559.50"></text></g><g><title>nom::combinator::opt::{{closure}} (1 samples, 0.05%)</title><rect x="0.3791%" y="533" width="0.0474%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="0.6291%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="0.3791%" y="517" width="0.0474%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="1"/><text x="0.6291%" y="527.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.05%)</title><rect x="0.3791%" y="501" width="0.0474%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="0.6291%" y="511.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.05%)</title><rect x="0.3791%" y="485" width="0.0474%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="0.6291%" y="495.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="0.3791%" y="469" width="0.0474%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="1"/><text x="0.6291%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.05%)</title><rect x="0.3791%" y="453" width="0.0474%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="1"/><text x="0.6291%" y="463.50"></text></g><g><title>askama_derive::parser::expr::expr_index (1 samples, 0.05%)</title><rect x="0.3791%" y="437" width="0.0474%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="0.6291%" y="447.50"></text></g><g><title>nom::sequence::terminated (1 samples, 0.05%)</title><rect x="0.3791%" y="421" width="0.0474%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="0.6291%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="0.4265%" y="869" width="0.0474%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="1"/><text x="0.6765%" y="879.50"></text></g><g><title>main (1 samples, 0.05%)</title><rect x="0.4265%" y="853" width="0.0474%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="0.6765%" y="863.50"></text></g><g><title>std::rt::lang_start (1 samples, 0.05%)</title><rect x="0.4265%" y="837" width="0.0474%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="0.6765%" y="847.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.05%)</title><rect x="0.4265%" y="821" width="0.0474%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="1"/><text x="0.6765%" y="831.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.05%)</title><rect x="0.4265%" y="805" width="0.0474%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="1"/><text x="0.6765%" y="815.50"></text></g><g><title>std::panicking::try (1 samples, 0.05%)</title><rect x="0.4265%" y="789" width="0.0474%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="1"/><text x="0.6765%" y="799.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.05%)</title><rect x="0.4265%" y="773" width="0.0474%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="1"/><text x="0.6765%" y="783.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.05%)</title><rect x="0.4265%" y="757" width="0.0474%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="1"/><text x="0.6765%" y="767.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.05%)</title><rect x="0.4265%" y="741" width="0.0474%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="1"/><text x="0.6765%" y="751.50"></text></g><g><title>std::panicking::try (1 samples, 0.05%)</title><rect x="0.4265%" y="725" width="0.0474%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="1"/><text x="0.6765%" y="735.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.05%)</title><rect x="0.4265%" y="709" width="0.0474%" height="15" fill="rgb(250,213,24)" fg:x="9" fg:w="1"/><text x="0.6765%" y="719.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.05%)</title><rect x="0.4265%" y="693" width="0.0474%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="1"/><text x="0.6765%" y="703.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.05%)</title><rect x="0.4265%" y="677" width="0.0474%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="0.6765%" y="687.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.05%)</title><rect x="0.4265%" y="661" width="0.0474%" height="15" fill="rgb(231,145,46)" fg:x="9" fg:w="1"/><text x="0.6765%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.05%)</title><rect x="0.4265%" y="645" width="0.0474%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="1"/><text x="0.6765%" y="655.50"></text></g><g><title>askama_bench::main (1 samples, 0.05%)</title><rect x="0.4265%" y="629" width="0.0474%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="1"/><text x="0.6765%" y="639.50"></text></g><g><title>askama_derive::derive_template (1 samples, 0.05%)</title><rect x="0.4265%" y="613" width="0.0474%" height="15" fill="rgb(247,81,37)" fg:x="9" fg:w="1"/><text x="0.6765%" y="623.50"></text></g><g><title>askama_derive::generator::derive_template (1 samples, 0.05%)</title><rect x="0.4265%" y="597" width="0.0474%" height="15" fill="rgb(209,12,38)" fg:x="9" fg:w="1"/><text x="0.6765%" y="607.50"></text></g><g><title>askama_derive::generator::build_template (1 samples, 0.05%)</title><rect x="0.4265%" y="581" width="0.0474%" height="15" fill="rgb(227,1,9)" fg:x="9" fg:w="1"/><text x="0.6765%" y="591.50"></text></g><g><title>askama_derive::generator::Generator::build (1 samples, 0.05%)</title><rect x="0.4265%" y="565" width="0.0474%" height="15" fill="rgb(248,47,43)" fg:x="9" fg:w="1"/><text x="0.6765%" y="575.50"></text></g><g><title>askama_derive::generator::Generator::impl_template (1 samples, 0.05%)</title><rect x="0.4265%" y="549" width="0.0474%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="1"/><text x="0.6765%" y="559.50"></text></g><g><title>askama_derive::generator::Generator::handle (1 samples, 0.05%)</title><rect x="0.4265%" y="533" width="0.0474%" height="15" fill="rgb(210,229,1)" fg:x="9" fg:w="1"/><text x="0.6765%" y="543.50"></text></g><g><title>askama_derive::generator::Generator::write_buf_writable (1 samples, 0.05%)</title><rect x="0.4265%" y="517" width="0.0474%" height="15" fill="rgb(222,148,37)" fg:x="9" fg:w="1"/><text x="0.6765%" y="527.50"></text></g><g><title>askama_derive::generator::Buffer::new (1 samples, 0.05%)</title><rect x="0.4265%" y="501" width="0.0474%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="1"/><text x="0.6765%" y="511.50"></text></g><g><title>alloc::string::String::new (1 samples, 0.05%)</title><rect x="0.4265%" y="485" width="0.0474%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="1"/><text x="0.6765%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.05%)</title><rect x="0.4265%" y="469" width="0.0474%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="1"/><text x="0.6765%" y="479.50"></text></g><g><title>__libc_start_main (1 samples, 0.05%)</title><rect x="0.4739%" y="869" width="0.0474%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="1"/><text x="0.7239%" y="879.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="0.4739%" y="853" width="0.0474%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="1"/><text x="0.7239%" y="863.50"></text></g><g><title>main (1 samples, 0.05%)</title><rect x="0.4739%" y="837" width="0.0474%" height="15" fill="rgb(230,62,27)" fg:x="10" fg:w="1"/><text x="0.7239%" y="847.50"></text></g><g><title>std::rt::lang_start (1 samples, 0.05%)</title><rect x="0.4739%" y="821" width="0.0474%" height="15" fill="rgb(216,154,8)" fg:x="10" fg:w="1"/><text x="0.7239%" y="831.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.05%)</title><rect x="0.4739%" y="805" width="0.0474%" height="15" fill="rgb(244,35,45)" fg:x="10" fg:w="1"/><text x="0.7239%" y="815.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.05%)</title><rect x="0.4739%" y="789" width="0.0474%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="1"/><text x="0.7239%" y="799.50"></text></g><g><title>std::panicking::try (1 samples, 0.05%)</title><rect x="0.4739%" y="773" width="0.0474%" height="15" fill="rgb(240,54,50)" fg:x="10" fg:w="1"/><text x="0.7239%" y="783.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.05%)</title><rect x="0.4739%" y="757" width="0.0474%" height="15" fill="rgb(233,84,52)" fg:x="10" fg:w="1"/><text x="0.7239%" y="767.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.05%)</title><rect x="0.4739%" y="741" width="0.0474%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="1"/><text x="0.7239%" y="751.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.05%)</title><rect x="0.4739%" y="725" width="0.0474%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="1"/><text x="0.7239%" y="735.50"></text></g><g><title>std::panicking::try (1 samples, 0.05%)</title><rect x="0.4739%" y="709" width="0.0474%" height="15" fill="rgb(209,38,44)" fg:x="10" fg:w="1"/><text x="0.7239%" y="719.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.05%)</title><rect x="0.4739%" y="693" width="0.0474%" height="15" fill="rgb(236,212,23)" fg:x="10" fg:w="1"/><text x="0.7239%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.05%)</title><rect x="0.4739%" y="677" width="0.0474%" height="15" fill="rgb(242,79,21)" fg:x="10" fg:w="1"/><text x="0.7239%" y="687.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.05%)</title><rect x="0.4739%" y="661" width="0.0474%" height="15" fill="rgb(211,96,35)" fg:x="10" fg:w="1"/><text x="0.7239%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.05%)</title><rect x="0.4739%" y="645" width="0.0474%" height="15" fill="rgb(253,215,40)" fg:x="10" fg:w="1"/><text x="0.7239%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.05%)</title><rect x="0.4739%" y="629" width="0.0474%" height="15" fill="rgb(211,81,21)" fg:x="10" fg:w="1"/><text x="0.7239%" y="639.50"></text></g><g><title>askama_bench::main (1 samples, 0.05%)</title><rect x="0.4739%" y="613" width="0.0474%" height="15" fill="rgb(208,190,38)" fg:x="10" fg:w="1"/><text x="0.7239%" y="623.50"></text></g><g><title>askama_derive::derive_template (1 samples, 0.05%)</title><rect x="0.4739%" y="597" width="0.0474%" height="15" fill="rgb(235,213,38)" fg:x="10" fg:w="1"/><text x="0.7239%" y="607.50"></text></g><g><title>askama_derive::generator::derive_template (1 samples, 0.05%)</title><rect x="0.4739%" y="581" width="0.0474%" height="15" fill="rgb(237,122,38)" fg:x="10" fg:w="1"/><text x="0.7239%" y="591.50"></text></g><g><title>askama_derive::generator::build_template (1 samples, 0.05%)</title><rect x="0.4739%" y="565" width="0.0474%" height="15" fill="rgb(244,218,35)" fg:x="10" fg:w="1"/><text x="0.7239%" y="575.50"></text></g><g><title>askama_derive::generator::Generator::build (1 samples, 0.05%)</title><rect x="0.4739%" y="549" width="0.0474%" height="15" fill="rgb(240,68,47)" fg:x="10" fg:w="1"/><text x="0.7239%" y="559.50"></text></g><g><title>askama_derive::generator::Generator::impl_template (1 samples, 0.05%)</title><rect x="0.4739%" y="533" width="0.0474%" height="15" fill="rgb(210,16,53)" fg:x="10" fg:w="1"/><text x="0.7239%" y="543.50"></text></g><g><title>askama_derive::generator::Generator::write_header (1 samples, 0.05%)</title><rect x="0.4739%" y="517" width="0.0474%" height="15" fill="rgb(235,124,12)" fg:x="10" fg:w="1"/><text x="0.7239%" y="527.50"></text></g><g><title>syn::generics::printing::&lt;impl quote::to_tokens::ToTokens for syn::generics::ImplGenerics&gt;::to_tokens (1 samples, 0.05%)</title><rect x="0.4739%" y="501" width="0.0474%" height="15" fill="rgb(224,169,11)" fg:x="10" fg:w="1"/><text x="0.7239%" y="511.50"></text></g><g><title>&lt;syn::print::TokensOrDefault&lt;T&gt; as quote::to_tokens::ToTokens&gt;::to_tokens (1 samples, 0.05%)</title><rect x="0.4739%" y="485" width="0.0474%" height="15" fill="rgb(250,166,2)" fg:x="10" fg:w="1"/><text x="0.7239%" y="495.50"></text></g><g><title>&lt;syn::token::Gt as quote::to_tokens::ToTokens&gt;::to_tokens (1 samples, 0.05%)</title><rect x="0.4739%" y="469" width="0.0474%" height="15" fill="rgb(242,216,29)" fg:x="10" fg:w="1"/><text x="0.7239%" y="479.50"></text></g><g><title>syn::token::printing::punct (1 samples, 0.05%)</title><rect x="0.4739%" y="453" width="0.0474%" height="15" fill="rgb(230,116,27)" fg:x="10" fg:w="1"/><text x="0.7239%" y="463.50"></text></g><g><title>&lt;proc_macro2::TokenStream as quote::ext::TokenStreamExt&gt;::append (1 samples, 0.05%)</title><rect x="0.4739%" y="437" width="0.0474%" height="15" fill="rgb(228,99,48)" fg:x="10" fg:w="1"/><text x="0.7239%" y="447.50"></text></g><g><title>&lt;proc_macro2::TokenStream as core::iter::traits::collect::Extend&lt;proc_macro2::TokenTree&gt;&gt;::extend (1 samples, 0.05%)</title><rect x="0.4739%" y="421" width="0.0474%" height="15" fill="rgb(253,11,6)" fg:x="10" fg:w="1"/><text x="0.7239%" y="431.50"></text></g><g><title>&lt;proc_macro2::imp::TokenStream as core::iter::traits::collect::Extend&lt;proc_macro2::TokenTree&gt;&gt;::extend (1 samples, 0.05%)</title><rect x="0.4739%" y="405" width="0.0474%" height="15" fill="rgb(247,143,39)" fg:x="10" fg:w="1"/><text x="0.7239%" y="415.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::iter::traits::collect::Extend&lt;proc_macro2::TokenTree&gt;&gt;::extend (1 samples, 0.05%)</title><rect x="0.4739%" y="389" width="0.0474%" height="15" fill="rgb(236,97,10)" fg:x="10" fg:w="1"/><text x="0.7239%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.05%)</title><rect x="0.4739%" y="373" width="0.0474%" height="15" fill="rgb(233,208,19)" fg:x="10" fg:w="1"/><text x="0.7239%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.05%)</title><rect x="0.4739%" y="357" width="0.0474%" height="15" fill="rgb(216,164,2)" fg:x="10" fg:w="1"/><text x="0.7239%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.05%)</title><rect x="0.4739%" y="341" width="0.0474%" height="15" fill="rgb(220,129,5)" fg:x="10" fg:w="1"/><text x="0.7239%" y="351.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::iter::traits::collect::Extend&lt;proc_macro2::TokenTree&gt;&gt;::extend::{{closure}} (1 samples, 0.05%)</title><rect x="0.4739%" y="325" width="0.0474%" height="15" fill="rgb(242,17,10)" fg:x="10" fg:w="1"/><text x="0.7239%" y="335.50"></text></g><g><title>proc_macro2::fallback::push_token_from_proc_macro (1 samples, 0.05%)</title><rect x="0.4739%" y="309" width="0.0474%" height="15" fill="rgb(242,107,0)" fg:x="10" fg:w="1"/><text x="0.7239%" y="319.50"></text></g><g><title>proc_macro2::rcvec::RcVecMut&lt;T&gt;::push (1 samples, 0.05%)</title><rect x="0.4739%" y="293" width="0.0474%" height="15" fill="rgb(251,28,31)" fg:x="10" fg:w="1"/><text x="0.7239%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.05%)</title><rect x="0.4739%" y="277" width="0.0474%" height="15" fill="rgb(233,223,10)" fg:x="10" fg:w="1"/><text x="0.7239%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.05%)</title><rect x="0.4739%" y="261" width="0.0474%" height="15" fill="rgb(215,21,27)" fg:x="10" fg:w="1"/><text x="0.7239%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.05%)</title><rect x="0.4739%" y="245" width="0.0474%" height="15" fill="rgb(232,23,21)" fg:x="10" fg:w="1"/><text x="0.7239%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="0.4739%" y="229" width="0.0474%" height="15" fill="rgb(244,5,23)" fg:x="10" fg:w="1"/><text x="0.7239%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.05%)</title><rect x="0.4739%" y="213" width="0.0474%" height="15" fill="rgb(226,81,46)" fg:x="10" fg:w="1"/><text x="0.7239%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.05%)</title><rect x="0.4739%" y="197" width="0.0474%" height="15" fill="rgb(247,70,30)" fg:x="10" fg:w="1"/><text x="0.7239%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.05%)</title><rect x="0.4739%" y="181" width="0.0474%" height="15" fill="rgb(212,68,19)" fg:x="10" fg:w="1"/><text x="0.7239%" y="191.50"></text></g><g><title>realloc (1 samples, 0.05%)</title><rect x="0.4739%" y="165" width="0.0474%" height="15" fill="rgb(240,187,13)" fg:x="10" fg:w="1"/><text x="0.7239%" y="175.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (1 samples, 0.05%)</title><rect x="0.6635%" y="581" width="0.0474%" height="15" fill="rgb(223,113,26)" fg:x="14" fg:w="1"/><text x="0.9135%" y="591.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.14%)</title><rect x="0.7109%" y="581" width="0.1422%" height="15" fill="rgb(206,192,2)" fg:x="15" fg:w="3"/><text x="0.9609%" y="591.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.14%)</title><rect x="0.7109%" y="565" width="0.1422%" height="15" fill="rgb(241,108,4)" fg:x="15" fg:w="3"/><text x="0.9609%" y="575.50"></text></g><g><title>core::str::validations::next_code_point (3 samples, 0.14%)</title><rect x="0.7109%" y="549" width="0.1422%" height="15" fill="rgb(247,173,49)" fg:x="15" fg:w="3"/><text x="0.9609%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (2 samples, 0.09%)</title><rect x="1.8009%" y="517" width="0.0948%" height="15" fill="rgb(224,114,35)" fg:x="38" fg:w="2"/><text x="2.0509%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (11 samples, 0.52%)</title><rect x="2.5118%" y="469" width="0.5213%" height="15" fill="rgb(245,159,27)" fg:x="53" fg:w="11"/><text x="2.7618%" y="479.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (39 samples, 1.85%)</title><rect x="1.2796%" y="565" width="1.8483%" height="15" fill="rgb(245,172,44)" fg:x="27" fg:w="39"/><text x="1.5296%" y="575.50">c..</text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (35 samples, 1.66%)</title><rect x="1.4692%" y="549" width="1.6588%" height="15" fill="rgb(236,23,11)" fg:x="31" fg:w="35"/><text x="1.7192%" y="559.50"></text></g><g><title>core::unicode::unicode_data::skip_search (33 samples, 1.56%)</title><rect x="1.5640%" y="533" width="1.5640%" height="15" fill="rgb(205,117,38)" fg:x="33" fg:w="33"/><text x="1.8140%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (26 samples, 1.23%)</title><rect x="1.8957%" y="517" width="1.2322%" height="15" fill="rgb(237,72,25)" fg:x="40" fg:w="26"/><text x="2.1457%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (26 samples, 1.23%)</title><rect x="1.8957%" y="501" width="1.2322%" height="15" fill="rgb(244,70,9)" fg:x="40" fg:w="26"/><text x="2.1457%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (13 samples, 0.62%)</title><rect x="2.5118%" y="485" width="0.6161%" height="15" fill="rgb(217,125,39)" fg:x="53" fg:w="13"/><text x="2.7618%" y="495.50"></text></g><g><title>core::unicode::unicode_data::skip_search::{{closure}} (2 samples, 0.09%)</title><rect x="3.0332%" y="469" width="0.0948%" height="15" fill="rgb(235,36,10)" fg:x="64" fg:w="2"/><text x="3.2832%" y="479.50"></text></g><g><title>&lt;&amp;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (2 samples, 0.09%)</title><rect x="3.0332%" y="453" width="0.0948%" height="15" fill="rgb(251,123,47)" fg:x="64" fg:w="2"/><text x="3.2832%" y="463.50"></text></g><g><title>&lt;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (2 samples, 0.09%)</title><rect x="3.0332%" y="437" width="0.0948%" height="15" fill="rgb(221,13,13)" fg:x="64" fg:w="2"/><text x="3.2832%" y="447.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (49 samples, 2.32%)</title><rect x="0.8531%" y="581" width="2.3223%" height="15" fill="rgb(238,131,9)" fg:x="18" fg:w="49"/><text x="1.1031%" y="591.50">c..</text></g><g><title>core::unicode::printable::is_printable (1 samples, 0.05%)</title><rect x="3.1280%" y="565" width="0.0474%" height="15" fill="rgb(211,50,8)" fg:x="66" fg:w="1"/><text x="3.3780%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.05%)</title><rect x="3.1754%" y="581" width="0.0474%" height="15" fill="rgb(245,182,24)" fg:x="67" fg:w="1"/><text x="3.4254%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="3.1754%" y="565" width="0.0474%" height="15" fill="rgb(242,14,37)" fg:x="67" fg:w="1"/><text x="3.4254%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="3.1754%" y="549" width="0.0474%" height="15" fill="rgb(246,228,12)" fg:x="67" fg:w="1"/><text x="3.4254%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.05%)</title><rect x="3.1754%" y="533" width="0.0474%" height="15" fill="rgb(213,55,15)" fg:x="67" fg:w="1"/><text x="3.4254%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="3.1754%" y="517" width="0.0474%" height="15" fill="rgb(209,9,3)" fg:x="67" fg:w="1"/><text x="3.4254%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="3.1754%" y="501" width="0.0474%" height="15" fill="rgb(230,59,30)" fg:x="67" fg:w="1"/><text x="3.4254%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.05%)</title><rect x="3.1754%" y="485" width="0.0474%" height="15" fill="rgb(209,121,21)" fg:x="67" fg:w="1"/><text x="3.4254%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="3.1754%" y="469" width="0.0474%" height="15" fill="rgb(220,109,13)" fg:x="67" fg:w="1"/><text x="3.4254%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="3.1754%" y="453" width="0.0474%" height="15" fill="rgb(232,18,1)" fg:x="67" fg:w="1"/><text x="3.4254%" y="463.50"></text></g><g><title>askama_bench::main (58 samples, 2.75%)</title><rect x="0.5213%" y="869" width="2.7488%" height="15" fill="rgb(215,41,42)" fg:x="11" fg:w="58"/><text x="0.7713%" y="879.50">as..</text></g><g><title>askama_derive::derive_template (58 samples, 2.75%)</title><rect x="0.5213%" y="853" width="2.7488%" height="15" fill="rgb(224,123,36)" fg:x="11" fg:w="58"/><text x="0.7713%" y="863.50">as..</text></g><g><title>askama_derive::generator::derive_template (58 samples, 2.75%)</title><rect x="0.5213%" y="837" width="2.7488%" height="15" fill="rgb(240,125,3)" fg:x="11" fg:w="58"/><text x="0.7713%" y="847.50">as..</text></g><g><title>askama_derive::generator::build_template (58 samples, 2.75%)</title><rect x="0.5213%" y="821" width="2.7488%" height="15" fill="rgb(205,98,50)" fg:x="11" fg:w="58"/><text x="0.7713%" y="831.50">as..</text></g><g><title>askama_derive::generator::Generator::build (58 samples, 2.75%)</title><rect x="0.5213%" y="805" width="2.7488%" height="15" fill="rgb(205,185,37)" fg:x="11" fg:w="58"/><text x="0.7713%" y="815.50">as..</text></g><g><title>askama_derive::generator::Generator::impl_template (58 samples, 2.75%)</title><rect x="0.5213%" y="789" width="2.7488%" height="15" fill="rgb(238,207,15)" fg:x="11" fg:w="58"/><text x="0.7713%" y="799.50">as..</text></g><g><title>askama_derive::generator::Generator::handle (58 samples, 2.75%)</title><rect x="0.5213%" y="773" width="2.7488%" height="15" fill="rgb(213,199,42)" fg:x="11" fg:w="58"/><text x="0.7713%" y="783.50">as..</text></g><g><title>askama_derive::generator::Generator::write_buf_writable (58 samples, 2.75%)</title><rect x="0.5213%" y="757" width="2.7488%" height="15" fill="rgb(235,201,11)" fg:x="11" fg:w="58"/><text x="0.7713%" y="767.50">as..</text></g><g><title>alloc::fmt::format (58 samples, 2.75%)</title><rect x="0.5213%" y="741" width="2.7488%" height="15" fill="rgb(207,46,11)" fg:x="11" fg:w="58"/><text x="0.7713%" y="751.50">al..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (58 samples, 2.75%)</title><rect x="0.5213%" y="725" width="2.7488%" height="15" fill="rgb(241,35,35)" fg:x="11" fg:w="58"/><text x="0.7713%" y="735.50">co..</text></g><g><title>alloc::fmt::format::{{closure}} (58 samples, 2.75%)</title><rect x="0.5213%" y="709" width="2.7488%" height="15" fill="rgb(243,32,47)" fg:x="11" fg:w="58"/><text x="0.7713%" y="719.50">al..</text></g><g><title>alloc::fmt::format::format_inner (58 samples, 2.75%)</title><rect x="0.5213%" y="693" width="2.7488%" height="15" fill="rgb(247,202,23)" fg:x="11" fg:w="58"/><text x="0.7713%" y="703.50">al..</text></g><g><title>core::fmt::Write::write_fmt (58 samples, 2.75%)</title><rect x="0.5213%" y="677" width="2.7488%" height="15" fill="rgb(219,102,11)" fg:x="11" fg:w="58"/><text x="0.7713%" y="687.50">co..</text></g><g><title>core::fmt::write (58 samples, 2.75%)</title><rect x="0.5213%" y="661" width="2.7488%" height="15" fill="rgb(243,110,44)" fg:x="11" fg:w="58"/><text x="0.7713%" y="671.50">co..</text></g><g><title>core::fmt::run (58 samples, 2.75%)</title><rect x="0.5213%" y="645" width="2.7488%" height="15" fill="rgb(222,74,54)" fg:x="11" fg:w="58"/><text x="0.7713%" y="655.50">co..</text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (58 samples, 2.75%)</title><rect x="0.5213%" y="629" width="2.7488%" height="15" fill="rgb(216,99,12)" fg:x="11" fg:w="58"/><text x="0.7713%" y="639.50">&lt;&amp;..</text></g><g><title>&lt;alloc::string::String as core::fmt::Debug&gt;::fmt (58 samples, 2.75%)</title><rect x="0.5213%" y="613" width="2.7488%" height="15" fill="rgb(226,22,26)" fg:x="11" fg:w="58"/><text x="0.7713%" y="623.50">&lt;a..</text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (58 samples, 2.75%)</title><rect x="0.5213%" y="597" width="2.7488%" height="15" fill="rgb(217,163,10)" fg:x="11" fg:w="58"/><text x="0.7713%" y="607.50">&lt;s..</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.05%)</title><rect x="3.2227%" y="581" width="0.0474%" height="15" fill="rgb(213,25,53)" fg:x="68" fg:w="1"/><text x="3.4727%" y="591.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (1 samples, 0.05%)</title><rect x="3.2227%" y="565" width="0.0474%" height="15" fill="rgb(252,105,26)" fg:x="68" fg:w="1"/><text x="3.4727%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.05%)</title><rect x="3.2227%" y="549" width="0.0474%" height="15" fill="rgb(220,39,43)" fg:x="68" fg:w="1"/><text x="3.4727%" y="559.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.05%)</title><rect x="3.2227%" y="533" width="0.0474%" height="15" fill="rgb(229,68,48)" fg:x="68" fg:w="1"/><text x="3.4727%" y="543.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (1 samples, 0.05%)</title><rect x="3.2227%" y="517" width="0.0474%" height="15" fill="rgb(252,8,32)" fg:x="68" fg:w="1"/><text x="3.4727%" y="527.50"></text></g><g><title>askama_derive::generator::Generator::build (1 samples, 0.05%)</title><rect x="3.2701%" y="853" width="0.0474%" height="15" fill="rgb(223,20,43)" fg:x="69" fg:w="1"/><text x="3.5201%" y="863.50"></text></g><g><title>askama_derive::generator::Generator::impl_template (1 samples, 0.05%)</title><rect x="3.2701%" y="837" width="0.0474%" height="15" fill="rgb(229,81,49)" fg:x="69" fg:w="1"/><text x="3.5201%" y="847.50"></text></g><g><title>askama_derive::generator::Generator::handle (1 samples, 0.05%)</title><rect x="3.2701%" y="821" width="0.0474%" height="15" fill="rgb(236,28,36)" fg:x="69" fg:w="1"/><text x="3.5201%" y="831.50"></text></g><g><title>askama_derive::generator::Generator::write_buf_writable (1 samples, 0.05%)</title><rect x="3.2701%" y="805" width="0.0474%" height="15" fill="rgb(249,185,26)" fg:x="69" fg:w="1"/><text x="3.5201%" y="815.50"></text></g><g><title>askama_derive::generator::Buffer::write (1 samples, 0.05%)</title><rect x="3.2701%" y="789" width="0.0474%" height="15" fill="rgb(249,174,33)" fg:x="69" fg:w="1"/><text x="3.5201%" y="799.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.05%)</title><rect x="3.2701%" y="773" width="0.0474%" height="15" fill="rgb(233,201,37)" fg:x="69" fg:w="1"/><text x="3.5201%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="3.2701%" y="757" width="0.0474%" height="15" fill="rgb(221,78,26)" fg:x="69" fg:w="1"/><text x="3.5201%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="3.2701%" y="741" width="0.0474%" height="15" fill="rgb(250,127,30)" fg:x="69" fg:w="1"/><text x="3.5201%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.05%)</title><rect x="3.2701%" y="725" width="0.0474%" height="15" fill="rgb(230,49,44)" fg:x="69" fg:w="1"/><text x="3.5201%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="3.2701%" y="709" width="0.0474%" height="15" fill="rgb(229,67,23)" fg:x="69" fg:w="1"/><text x="3.5201%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="3.2701%" y="693" width="0.0474%" height="15" fill="rgb(249,83,47)" fg:x="69" fg:w="1"/><text x="3.5201%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="3.2701%" y="677" width="0.0474%" height="15" fill="rgb(215,43,3)" fg:x="69" fg:w="1"/><text x="3.5201%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.05%)</title><rect x="3.2701%" y="661" width="0.0474%" height="15" fill="rgb(238,154,13)" fg:x="69" fg:w="1"/><text x="3.5201%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="3.2701%" y="645" width="0.0474%" height="15" fill="rgb(219,56,2)" fg:x="69" fg:w="1"/><text x="3.5201%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.05%)</title><rect x="3.2701%" y="629" width="0.0474%" height="15" fill="rgb(233,0,4)" fg:x="69" fg:w="1"/><text x="3.5201%" y="639.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.05%)</title><rect x="3.2701%" y="613" width="0.0474%" height="15" fill="rgb(235,30,7)" fg:x="69" fg:w="1"/><text x="3.5201%" y="623.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.05%)</title><rect x="3.2701%" y="597" width="0.0474%" height="15" fill="rgb(250,79,13)" fg:x="69" fg:w="1"/><text x="3.5201%" y="607.50"></text></g><g><title>realloc (1 samples, 0.05%)</title><rect x="3.2701%" y="581" width="0.0474%" height="15" fill="rgb(211,146,34)" fg:x="69" fg:w="1"/><text x="3.5201%" y="591.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="3.2701%" y="565" width="0.0474%" height="15" fill="rgb(228,22,38)" fg:x="69" fg:w="1"/><text x="3.5201%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.09%)</title><rect x="14.6445%" y="357" width="0.0948%" height="15" fill="rgb(235,168,5)" fg:x="309" fg:w="2"/><text x="14.8945%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.09%)</title><rect x="14.6445%" y="341" width="0.0948%" height="15" fill="rgb(221,155,16)" fg:x="309" fg:w="2"/><text x="14.8945%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (2 samples, 0.09%)</title><rect x="14.7393%" y="357" width="0.0948%" height="15" fill="rgb(215,215,53)" fg:x="311" fg:w="2"/><text x="14.9893%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.05%)</title><rect x="14.8341%" y="357" width="0.0474%" height="15" fill="rgb(223,4,10)" fg:x="313" fg:w="1"/><text x="15.0841%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (18 samples, 0.85%)</title><rect x="14.1232%" y="389" width="0.8531%" height="15" fill="rgb(234,103,6)" fg:x="298" fg:w="18"/><text x="14.3732%" y="399.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (18 samples, 0.85%)</title><rect x="14.1232%" y="373" width="0.8531%" height="15" fill="rgb(227,97,0)" fg:x="298" fg:w="18"/><text x="14.3732%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (2 samples, 0.09%)</title><rect x="14.8815%" y="357" width="0.0948%" height="15" fill="rgb(234,150,53)" fg:x="314" fg:w="2"/><text x="15.1315%" y="367.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::iter_indices (35 samples, 1.66%)</title><rect x="13.3649%" y="437" width="1.6588%" height="15" fill="rgb(228,201,54)" fg:x="282" fg:w="35"/><text x="13.6149%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (31 samples, 1.47%)</title><rect x="13.5545%" y="421" width="1.4692%" height="15" fill="rgb(222,22,37)" fg:x="286" fg:w="31"/><text x="13.8045%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (19 samples, 0.90%)</title><rect x="14.1232%" y="405" width="0.9005%" height="15" fill="rgb(237,53,32)" fg:x="298" fg:w="19"/><text x="14.3732%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (1 samples, 0.05%)</title><rect x="14.9763%" y="389" width="0.0474%" height="15" fill="rgb(233,25,53)" fg:x="316" fg:w="1"/><text x="15.2263%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (20 samples, 0.95%)</title><rect x="16.7773%" y="373" width="0.9479%" height="15" fill="rgb(210,40,34)" fg:x="354" fg:w="20"/><text x="17.0273%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.14%)</title><rect x="17.5829%" y="357" width="0.1422%" height="15" fill="rgb(241,220,44)" fg:x="371" fg:w="3"/><text x="17.8329%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.14%)</title><rect x="17.5829%" y="341" width="0.1422%" height="15" fill="rgb(235,28,35)" fg:x="371" fg:w="3"/><text x="17.8329%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.09%)</title><rect x="17.6303%" y="325" width="0.0948%" height="15" fill="rgb(210,56,17)" fg:x="372" fg:w="2"/><text x="17.8803%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.09%)</title><rect x="17.6303%" y="309" width="0.0948%" height="15" fill="rgb(224,130,29)" fg:x="372" fg:w="2"/><text x="17.8803%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.09%)</title><rect x="17.6303%" y="293" width="0.0948%" height="15" fill="rgb(235,212,8)" fg:x="372" fg:w="2"/><text x="17.8803%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (3 samples, 0.14%)</title><rect x="17.7725%" y="357" width="0.1422%" height="15" fill="rgb(223,33,50)" fg:x="375" fg:w="3"/><text x="18.0225%" y="367.50"></text></g><g><title>core::ptr::metadata::metadata (3 samples, 0.14%)</title><rect x="17.7725%" y="341" width="0.1422%" height="15" fill="rgb(219,149,13)" fg:x="375" fg:w="3"/><text x="18.0225%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.09%)</title><rect x="18.1517%" y="341" width="0.0948%" height="15" fill="rgb(250,156,29)" fg:x="383" fg:w="2"/><text x="18.4017%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.05%)</title><rect x="18.1991%" y="325" width="0.0474%" height="15" fill="rgb(216,193,19)" fg:x="384" fg:w="1"/><text x="18.4491%" y="335.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (70 samples, 3.32%)</title><rect x="15.0237%" y="437" width="3.3175%" height="15" fill="rgb(216,135,14)" fg:x="317" fg:w="70"/><text x="15.2737%" y="447.50">&lt;&amp;s..</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (67 samples, 3.18%)</title><rect x="15.1659%" y="421" width="3.1754%" height="15" fill="rgb(241,47,5)" fg:x="320" fg:w="67"/><text x="15.4159%" y="431.50">cor..</text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (63 samples, 2.99%)</title><rect x="15.3555%" y="405" width="2.9858%" height="15" fill="rgb(233,42,35)" fg:x="324" fg:w="63"/><text x="15.6055%" y="415.50">cor..</text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (49 samples, 2.32%)</title><rect x="16.0190%" y="389" width="2.3223%" height="15" fill="rgb(231,13,6)" fg:x="338" fg:w="49"/><text x="16.2690%" y="399.50">c..</text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (13 samples, 0.62%)</title><rect x="17.7251%" y="373" width="0.6161%" height="15" fill="rgb(207,181,40)" fg:x="374" fg:w="13"/><text x="17.9751%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (9 samples, 0.43%)</title><rect x="17.9147%" y="357" width="0.4265%" height="15" fill="rgb(254,173,49)" fg:x="378" fg:w="9"/><text x="18.1647%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (2 samples, 0.09%)</title><rect x="18.2464%" y="341" width="0.0948%" height="15" fill="rgb(221,1,38)" fg:x="385" fg:w="2"/><text x="18.4964%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (2 samples, 0.09%)</title><rect x="18.2464%" y="325" width="0.0948%" height="15" fill="rgb(206,124,46)" fg:x="385" fg:w="2"/><text x="18.4964%" y="335.50"></text></g><g><title>&lt;char as nom::traits::AsChar&gt;::as_char (1 samples, 0.05%)</title><rect x="18.3412%" y="437" width="0.0474%" height="15" fill="rgb(249,21,11)" fg:x="387" fg:w="1"/><text x="18.5912%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (28 samples, 1.33%)</title><rect x="19.4313%" y="421" width="1.3270%" height="15" fill="rgb(222,201,40)" fg:x="410" fg:w="28"/><text x="19.6813%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (20 samples, 0.95%)</title><rect x="19.8104%" y="405" width="0.9479%" height="15" fill="rgb(235,61,29)" fg:x="418" fg:w="20"/><text x="20.0604%" y="415.50"></text></g><g><title>core::mem::size_of (3 samples, 0.14%)</title><rect x="20.6161%" y="389" width="0.1422%" height="15" fill="rgb(219,207,3)" fg:x="435" fg:w="3"/><text x="20.8661%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (23 samples, 1.09%)</title><rect x="20.8531%" y="405" width="1.0900%" height="15" fill="rgb(222,56,46)" fg:x="440" fg:w="23"/><text x="21.1031%" y="415.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (7 samples, 0.33%)</title><rect x="21.6114%" y="389" width="0.3318%" height="15" fill="rgb(239,76,54)" fg:x="456" fg:w="7"/><text x="21.8614%" y="399.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::from_u32_unchecked (2 samples, 0.09%)</title><rect x="21.8483%" y="373" width="0.0948%" height="15" fill="rgb(231,124,27)" fg:x="461" fg:w="2"/><text x="22.0983%" y="383.50"></text></g><g><title>core::char::convert::from_u32_unchecked (2 samples, 0.09%)</title><rect x="21.8483%" y="357" width="0.0948%" height="15" fill="rgb(249,195,6)" fg:x="461" fg:w="2"/><text x="22.0983%" y="367.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.24%)</title><rect x="23.8863%" y="389" width="0.2370%" height="15" fill="rgb(237,174,47)" fg:x="504" fg:w="5"/><text x="24.1363%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (9 samples, 0.43%)</title><rect x="25.0237%" y="373" width="0.4265%" height="15" fill="rgb(206,201,31)" fg:x="528" fg:w="9"/><text x="25.2737%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (5 samples, 0.24%)</title><rect x="25.4502%" y="373" width="0.2370%" height="15" fill="rgb(231,57,52)" fg:x="537" fg:w="5"/><text x="25.7002%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7 samples, 0.33%)</title><rect x="26.3981%" y="357" width="0.3318%" height="15" fill="rgb(248,177,22)" fg:x="557" fg:w="7"/><text x="26.6481%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.24%)</title><rect x="26.4929%" y="341" width="0.2370%" height="15" fill="rgb(215,211,37)" fg:x="559" fg:w="5"/><text x="26.7429%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (3 samples, 0.14%)</title><rect x="26.7299%" y="357" width="0.1422%" height="15" fill="rgb(241,128,51)" fg:x="564" fg:w="3"/><text x="26.9799%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (349 samples, 16.54%)</title><rect x="10.3791%" y="469" width="16.5403%" height="15" fill="rgb(227,165,31)" fg:x="219" fg:w="349"/><text x="10.6291%" y="479.50">core::ops::function::FnMut..</text></g><g><title>nom::character::complete::anychar (344 samples, 16.30%)</title><rect x="10.6161%" y="453" width="16.3033%" height="15" fill="rgb(228,167,24)" fg:x="224" fg:w="344"/><text x="10.8661%" y="463.50">nom::character::complete:..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (180 samples, 8.53%)</title><rect x="18.3886%" y="437" width="8.5308%" height="15" fill="rgb(228,143,12)" fg:x="388" fg:w="180"/><text x="18.6386%" y="447.50">&lt;core::str::..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (130 samples, 6.16%)</title><rect x="20.7583%" y="421" width="6.1611%" height="15" fill="rgb(249,149,8)" fg:x="438" fg:w="130"/><text x="21.0083%" y="431.50">&lt;core::s..</text></g><g><title>core::str::validations::next_code_point (105 samples, 4.98%)</title><rect x="21.9431%" y="405" width="4.9763%" height="15" fill="rgb(243,35,44)" fg:x="463" fg:w="105"/><text x="22.1931%" y="415.50">core::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 2.80%)</title><rect x="24.1232%" y="389" width="2.7962%" height="15" fill="rgb(246,89,9)" fg:x="509" fg:w="59"/><text x="24.3732%" y="399.50">&lt;c..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (26 samples, 1.23%)</title><rect x="25.6872%" y="373" width="1.2322%" height="15" fill="rgb(233,213,13)" fg:x="542" fg:w="26"/><text x="25.9372%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.05%)</title><rect x="26.8720%" y="357" width="0.0474%" height="15" fill="rgb(233,141,41)" fg:x="567" fg:w="1"/><text x="27.1220%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11 samples, 0.52%)</title><rect x="51.8957%" y="293" width="0.5213%" height="15" fill="rgb(239,167,4)" fg:x="1095" fg:w="11"/><text x="52.1457%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.52%)</title><rect x="51.8957%" y="277" width="0.5213%" height="15" fill="rgb(209,217,16)" fg:x="1095" fg:w="11"/><text x="52.1457%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 4.12%)</title><rect x="48.5782%" y="341" width="4.1232%" height="15" fill="rgb(219,88,35)" fg:x="1025" fg:w="87"/><text x="48.8282%" y="351.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (82 samples, 3.89%)</title><rect x="48.8152%" y="325" width="3.8863%" height="15" fill="rgb(220,193,23)" fg:x="1030" fg:w="82"/><text x="49.0652%" y="335.50">&lt;cor..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (26 samples, 1.23%)</title><rect x="51.4692%" y="309" width="1.2322%" height="15" fill="rgb(230,90,52)" fg:x="1086" fg:w="26"/><text x="51.7192%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (6 samples, 0.28%)</title><rect x="52.4171%" y="293" width="0.2844%" height="15" fill="rgb(252,106,19)" fg:x="1106" fg:w="6"/><text x="52.6671%" y="303.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (23 samples, 1.09%)</title><rect x="52.7014%" y="341" width="1.0900%" height="15" fill="rgb(206,74,20)" fg:x="1112" fg:w="23"/><text x="52.9514%" y="351.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.57%)</title><rect x="53.7915%" y="341" width="0.5687%" height="15" fill="rgb(230,138,44)" fg:x="1135" fg:w="12"/><text x="54.0415%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (286 samples, 13.55%)</title><rect x="44.7393%" y="357" width="13.5545%" height="15" fill="rgb(235,182,43)" fg:x="944" fg:w="286"/><text x="44.9893%" y="367.50">core::iter::traits::..</text></g><g><title>core::iter::traits::iterator::Iterator::position::check::{{closure}} (83 samples, 3.93%)</title><rect x="54.3602%" y="341" width="3.9336%" height="15" fill="rgb(242,16,51)" fg:x="1147" fg:w="83"/><text x="54.6102%" y="351.50">core..</text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare::{{closure}} (65 samples, 3.08%)</title><rect x="55.2133%" y="325" width="3.0806%" height="15" fill="rgb(248,9,4)" fg:x="1165" fg:w="65"/><text x="55.4633%" y="335.50">&lt;&amp;[..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (50 samples, 2.37%)</title><rect x="55.9242%" y="309" width="2.3697%" height="15" fill="rgb(210,31,22)" fg:x="1180" fg:w="50"/><text x="56.1742%" y="319.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::ne (29 samples, 1.37%)</title><rect x="56.9194%" y="293" width="1.3744%" height="15" fill="rgb(239,54,39)" fg:x="1201" fg:w="29"/><text x="57.1694%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (323 samples, 15.31%)</title><rect x="43.7441%" y="373" width="15.3081%" height="15" fill="rgb(230,99,41)" fg:x="923" fg:w="323"/><text x="43.9941%" y="383.50">core::iter::traits::ite..</text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (16 samples, 0.76%)</title><rect x="58.2938%" y="357" width="0.7583%" height="15" fill="rgb(253,106,12)" fg:x="1230" fg:w="16"/><text x="58.5438%" y="367.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.71%)</title><rect x="60.8531%" y="357" width="0.7109%" height="15" fill="rgb(213,46,41)" fg:x="1284" fg:w="15"/><text x="61.1031%" y="367.50"></text></g><g><title>core::cmp::min (109 samples, 5.17%)</title><rect x="64.6919%" y="325" width="5.1659%" height="15" fill="rgb(215,133,35)" fg:x="1365" fg:w="109"/><text x="64.9419%" y="335.50">core::..</text></g><g><title>core::cmp::Ord::min (109 samples, 5.17%)</title><rect x="64.6919%" y="309" width="5.1659%" height="15" fill="rgb(213,28,5)" fg:x="1365" fg:w="109"/><text x="64.9419%" y="319.50">core::..</text></g><g><title>core::cmp::min_by (89 samples, 4.22%)</title><rect x="65.6398%" y="293" width="4.2180%" height="15" fill="rgb(215,77,49)" fg:x="1385" fg:w="89"/><text x="65.8898%" y="303.50">core:..</text></g><g><title>core::ops::function::FnOnce::call_once (45 samples, 2.13%)</title><rect x="67.7251%" y="277" width="2.1327%" height="15" fill="rgb(248,100,22)" fg:x="1429" fg:w="45"/><text x="67.9751%" y="287.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (36 samples, 1.71%)</title><rect x="68.1517%" y="261" width="1.7062%" height="15" fill="rgb(208,67,9)" fg:x="1438" fg:w="36"/><text x="68.4017%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (377 samples, 17.87%)</title><rect x="59.0521%" y="373" width="17.8673%" height="15" fill="rgb(219,133,21)" fg:x="1246" fg:w="377"/><text x="59.3021%" y="383.50">core::iter::traits::iterator..</text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (324 samples, 15.36%)</title><rect x="61.5640%" y="357" width="15.3555%" height="15" fill="rgb(246,46,29)" fg:x="1299" fg:w="324"/><text x="61.8140%" y="367.50">core::iter::adapters::zi..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (310 samples, 14.69%)</title><rect x="62.2275%" y="341" width="14.6919%" height="15" fill="rgb(246,185,52)" fg:x="1313" fg:w="310"/><text x="62.4775%" y="351.50">&lt;core::iter::adapters:..</text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (149 samples, 7.06%)</title><rect x="69.8578%" y="325" width="7.0616%" height="15" fill="rgb(252,136,11)" fg:x="1474" fg:w="149"/><text x="70.1078%" y="335.50">core::ite..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (138 samples, 6.54%)</title><rect x="70.3791%" y="309" width="6.5403%" height="15" fill="rgb(219,138,53)" fg:x="1485" fg:w="138"/><text x="70.6291%" y="319.50">&lt;core::sl..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (25 samples, 1.18%)</title><rect x="75.7346%" y="293" width="1.1848%" height="15" fill="rgb(211,51,23)" fg:x="1598" fg:w="25"/><text x="75.9846%" y="303.50"></text></g><g><title>core::mem::size_of (2 samples, 0.09%)</title><rect x="76.8246%" y="277" width="0.0948%" height="15" fill="rgb(247,221,28)" fg:x="1621" fg:w="2"/><text x="77.0746%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (6 samples, 0.28%)</title><rect x="81.3744%" y="341" width="0.2844%" height="15" fill="rgb(251,222,45)" fg:x="1717" fg:w="6"/><text x="81.6244%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (6 samples, 0.28%)</title><rect x="81.3744%" y="325" width="0.2844%" height="15" fill="rgb(217,162,53)" fg:x="1717" fg:w="6"/><text x="81.6244%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (9 samples, 0.43%)</title><rect x="81.6588%" y="341" width="0.4265%" height="15" fill="rgb(229,93,14)" fg:x="1723" fg:w="9"/><text x="81.9088%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (4 samples, 0.19%)</title><rect x="82.0853%" y="341" width="0.1896%" height="15" fill="rgb(209,67,49)" fg:x="1732" fg:w="4"/><text x="82.3353%" y="351.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (876 samples, 41.52%)</title><rect x="41.0427%" y="389" width="41.5166%" height="15" fill="rgb(213,87,29)" fg:x="866" fg:w="876"/><text x="41.2927%" y="399.50">&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (119 samples, 5.64%)</title><rect x="76.9194%" y="373" width="5.6398%" height="15" fill="rgb(205,151,52)" fg:x="1623" fg:w="119"/><text x="77.1694%" y="383.50">core::s..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (102 samples, 4.83%)</title><rect x="77.7251%" y="357" width="4.8341%" height="15" fill="rgb(253,215,39)" fg:x="1640" fg:w="102"/><text x="77.9751%" y="367.50">core::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (6 samples, 0.28%)</title><rect x="82.2749%" y="341" width="0.2844%" height="15" fill="rgb(221,220,41)" fg:x="1736" fg:w="6"/><text x="82.5249%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (894 samples, 42.37%)</title><rect x="40.3791%" y="405" width="42.3697%" height="15" fill="rgb(218,133,21)" fg:x="852" fg:w="894"/><text x="40.6291%" y="415.50">&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare</text></g><g><title>&lt;&amp;str as nom::traits::AsBytes&gt;::as_bytes (4 samples, 0.19%)</title><rect x="82.5592%" y="389" width="0.1896%" height="15" fill="rgb(221,193,43)" fg:x="1742" fg:w="4"/><text x="82.8092%" y="399.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputLength&gt;::input_len (13 samples, 0.62%)</title><rect x="82.7488%" y="405" width="0.6161%" height="15" fill="rgb(240,128,52)" fg:x="1746" fg:w="13"/><text x="82.9988%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::len (6 samples, 0.28%)</title><rect x="83.0806%" y="389" width="0.2844%" height="15" fill="rgb(253,114,12)" fg:x="1753" fg:w="6"/><text x="83.3306%" y="399.50"></text></g><g><title>&lt;nom::error::Error&lt;I&gt; as nom::error::ParseError&lt;I&gt;&gt;::from_error_kind (3 samples, 0.14%)</title><rect x="83.3649%" y="405" width="0.1422%" height="15" fill="rgb(215,223,47)" fg:x="1759" fg:w="3"/><text x="83.6149%" y="415.50"></text></g><g><title>[libc.so.6] (72 samples, 3.41%)</title><rect x="83.5071%" y="405" width="3.4123%" height="15" fill="rgb(248,225,23)" fg:x="1762" fg:w="72"/><text x="83.7571%" y="415.50">[li..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,158 samples, 54.88%)</title><rect x="32.3697%" y="437" width="54.8815%" height="15" fill="rgb(250,108,0)" fg:x="683" fg:w="1158"/><text x="32.6197%" y="447.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::bytes::complete::tag::{{closure}} (1,140 samples, 54.03%)</title><rect x="33.2227%" y="421" width="54.0284%" height="15" fill="rgb(228,208,7)" fg:x="701" fg:w="1140"/><text x="33.4727%" y="431.50">nom::bytes::complete::tag::{{closure}}</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (7 samples, 0.33%)</title><rect x="86.9194%" y="405" width="0.3318%" height="15" fill="rgb(244,45,10)" fg:x="1834" fg:w="7"/><text x="87.1694%" y="415.50"></text></g><g><title>&lt;nom::error::Error&lt;I&gt; as nom::error::ParseError&lt;I&gt;&gt;::append (4 samples, 0.19%)</title><rect x="87.2512%" y="437" width="0.1896%" height="15" fill="rgb(207,125,25)" fg:x="1841" fg:w="4"/><text x="87.5012%" y="447.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (2 samples, 0.09%)</title><rect x="87.4408%" y="437" width="0.0948%" height="15" fill="rgb(210,195,18)" fg:x="1845" fg:w="2"/><text x="87.6908%" y="447.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,651 samples, 78.25%)</title><rect x="9.5735%" y="485" width="78.2464%" height="15" fill="rgb(249,80,12)" fg:x="202" fg:w="1651"/><text x="9.8235%" y="495.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::branch::alt::{{closure}} (1,285 samples, 60.90%)</title><rect x="26.9194%" y="469" width="60.9005%" height="15" fill="rgb(221,65,9)" fg:x="568" fg:w="1285"/><text x="27.1694%" y="479.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1,282 samples, 60.76%)</title><rect x="27.0616%" y="453" width="60.7583%" height="15" fill="rgb(235,49,36)" fg:x="571" fg:w="1282"/><text x="27.3116%" y="463.50">&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice</text></g><g><title>nom::error::ParseError::or (6 samples, 0.28%)</title><rect x="87.5355%" y="437" width="0.2844%" height="15" fill="rgb(225,32,20)" fg:x="1847" fg:w="6"/><text x="87.7855%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.71%)</title><rect x="87.8199%" y="485" width="0.7109%" height="15" fill="rgb(215,141,46)" fg:x="1853" fg:w="15"/><text x="88.0699%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (13 samples, 0.62%)</title><rect x="88.5308%" y="485" width="0.6161%" height="15" fill="rgb(250,160,47)" fg:x="1868" fg:w="13"/><text x="88.7808%" y="495.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (4 samples, 0.19%)</title><rect x="88.9573%" y="469" width="0.1896%" height="15" fill="rgb(216,222,40)" fg:x="1877" fg:w="4"/><text x="89.2073%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,761 samples, 83.46%)</title><rect x="5.8768%" y="517" width="83.4597%" height="15" fill="rgb(234,217,39)" fg:x="124" fg:w="1761"/><text x="6.1268%" y="527.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::map::{{closure}} (1,751 samples, 82.99%)</title><rect x="6.3507%" y="501" width="82.9858%" height="15" fill="rgb(207,178,40)" fg:x="134" fg:w="1751"/><text x="6.6007%" y="511.50">nom::combinator::map::{{closure}}</text></g><g><title>core::ops::function::FnMut::call_mut (4 samples, 0.19%)</title><rect x="89.1469%" y="485" width="0.1896%" height="15" fill="rgb(221,136,13)" fg:x="1881" fg:w="4"/><text x="89.3969%" y="495.50"></text></g><g><title>[libc.so.6] (25 samples, 1.18%)</title><rect x="89.3365%" y="517" width="1.1848%" height="15" fill="rgb(249,199,10)" fg:x="1885" fg:w="25"/><text x="89.5865%" y="527.50"></text></g><g><title>askama_derive::generator::build_template (1,844 samples, 87.39%)</title><rect x="3.2701%" y="869" width="87.3934%" height="15" fill="rgb(249,222,13)" fg:x="69" fg:w="1844"/><text x="3.5201%" y="879.50">askama_derive::generator::build_template</text></g><g><title>askama_derive::generator::find_used_templates (1,843 samples, 87.35%)</title><rect x="3.3175%" y="853" width="87.3460%" height="15" fill="rgb(244,185,38)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="863.50">askama_derive::generator::find_used_templates</text></g><g><title>askama_derive::generator::_parsed::Parsed::new (1,843 samples, 87.35%)</title><rect x="3.3175%" y="837" width="87.3460%" height="15" fill="rgb(236,202,9)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="847.50">askama_derive::generator::_parsed::Parsed::new</text></g><g><title>askama_derive::parser::parse (1,843 samples, 87.35%)</title><rect x="3.3175%" y="821" width="87.3460%" height="15" fill="rgb(250,229,37)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="831.50">askama_derive::parser::parse</text></g><g><title>askama_derive::parser::node::Node::parse (1,843 samples, 87.35%)</title><rect x="3.3175%" y="805" width="87.3460%" height="15" fill="rgb(206,174,23)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="815.50">askama_derive::parser::node::Node::parse</text></g><g><title>askama_derive::parser::node::parse_template (1,843 samples, 87.35%)</title><rect x="3.3175%" y="789" width="87.3460%" height="15" fill="rgb(211,33,43)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="799.50">askama_derive::parser::node::parse_template</text></g><g><title>nom::multi::many0::{{closure}} (1,843 samples, 87.35%)</title><rect x="3.3175%" y="773" width="87.3460%" height="15" fill="rgb(245,58,50)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="783.50">nom::multi::many0::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,843 samples, 87.35%)</title><rect x="3.3175%" y="757" width="87.3460%" height="15" fill="rgb(244,68,36)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="767.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::branch::alt::{{closure}} (1,843 samples, 87.35%)</title><rect x="3.3175%" y="741" width="87.3460%" height="15" fill="rgb(232,229,15)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="751.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1,843 samples, 87.35%)</title><rect x="3.3175%" y="725" width="87.3460%" height="15" fill="rgb(254,30,23)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="735.50">&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,843 samples, 87.35%)</title><rect x="3.3175%" y="709" width="87.3460%" height="15" fill="rgb(235,160,14)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="719.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::complete::{{closure}} (1,843 samples, 87.35%)</title><rect x="3.3175%" y="693" width="87.3460%" height="15" fill="rgb(212,155,44)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="703.50">nom::combinator::complete::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,843 samples, 87.35%)</title><rect x="3.3175%" y="677" width="87.3460%" height="15" fill="rgb(226,2,50)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="687.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (1,843 samples, 87.35%)</title><rect x="3.3175%" y="661" width="87.3460%" height="15" fill="rgb(234,177,6)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="671.50">askama_derive::parser::node::parse_template::{{closure}}</text></g><g><title>askama_derive::parser::take_content (1,843 samples, 87.35%)</title><rect x="3.3175%" y="645" width="87.3460%" height="15" fill="rgb(217,24,9)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="655.50">askama_derive::parser::take_content</text></g><g><title>nom::combinator::opt::{{closure}} (1,843 samples, 87.35%)</title><rect x="3.3175%" y="629" width="87.3460%" height="15" fill="rgb(220,13,46)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="639.50">nom::combinator::opt::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,843 samples, 87.35%)</title><rect x="3.3175%" y="613" width="87.3460%" height="15" fill="rgb(239,221,27)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="623.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::recognize::{{closure}} (1,843 samples, 87.35%)</title><rect x="3.3175%" y="597" width="87.3460%" height="15" fill="rgb(222,198,25)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="607.50">nom::combinator::recognize::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,843 samples, 87.35%)</title><rect x="3.3175%" y="581" width="87.3460%" height="15" fill="rgb(211,99,13)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="591.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>askama_derive::parser::skip_till::{{closure}} (1,843 samples, 87.35%)</title><rect x="3.3175%" y="565" width="87.3460%" height="15" fill="rgb(232,111,31)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="575.50">askama_derive::parser::skip_till::{{closure}}</text></g><g><title>nom::branch::alt::{{closure}} (1,843 samples, 87.35%)</title><rect x="3.3175%" y="549" width="87.3460%" height="15" fill="rgb(245,82,37)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="559.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1,843 samples, 87.35%)</title><rect x="3.3175%" y="533" width="87.3460%" height="15" fill="rgb(227,149,46)" fg:x="70" fg:w="1843"/><text x="3.5675%" y="543.50">&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (3 samples, 0.14%)</title><rect x="90.5213%" y="517" width="0.1422%" height="15" fill="rgb(218,36,50)" fg:x="1910" fg:w="3"/><text x="90.7713%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.47%)</title><rect x="91.0900%" y="533" width="0.4739%" height="15" fill="rgb(226,80,48)" fg:x="1922" fg:w="10"/><text x="91.3400%" y="543.50"></text></g><g><title>askama_derive::generator::build_template (27 samples, 1.28%)</title><rect x="90.6635%" y="853" width="1.2796%" height="15" fill="rgb(238,224,15)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="863.50"></text></g><g><title>askama_derive::generator::find_used_templates (27 samples, 1.28%)</title><rect x="90.6635%" y="837" width="1.2796%" height="15" fill="rgb(241,136,10)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="847.50"></text></g><g><title>askama_derive::generator::_parsed::Parsed::new (27 samples, 1.28%)</title><rect x="90.6635%" y="821" width="1.2796%" height="15" fill="rgb(208,32,45)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="831.50"></text></g><g><title>askama_derive::parser::parse (27 samples, 1.28%)</title><rect x="90.6635%" y="805" width="1.2796%" height="15" fill="rgb(207,135,9)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="815.50"></text></g><g><title>askama_derive::parser::node::Node::parse (27 samples, 1.28%)</title><rect x="90.6635%" y="789" width="1.2796%" height="15" fill="rgb(206,86,44)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="799.50"></text></g><g><title>askama_derive::parser::node::parse_template (27 samples, 1.28%)</title><rect x="90.6635%" y="773" width="1.2796%" height="15" fill="rgb(245,177,15)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="783.50"></text></g><g><title>nom::multi::many0::{{closure}} (27 samples, 1.28%)</title><rect x="90.6635%" y="757" width="1.2796%" height="15" fill="rgb(206,64,50)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="767.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (27 samples, 1.28%)</title><rect x="90.6635%" y="741" width="1.2796%" height="15" fill="rgb(234,36,40)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="751.50"></text></g><g><title>nom::branch::alt::{{closure}} (27 samples, 1.28%)</title><rect x="90.6635%" y="725" width="1.2796%" height="15" fill="rgb(213,64,8)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="735.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (27 samples, 1.28%)</title><rect x="90.6635%" y="709" width="1.2796%" height="15" fill="rgb(210,75,36)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="719.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (27 samples, 1.28%)</title><rect x="90.6635%" y="693" width="1.2796%" height="15" fill="rgb(229,88,21)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="703.50"></text></g><g><title>nom::combinator::complete::{{closure}} (27 samples, 1.28%)</title><rect x="90.6635%" y="677" width="1.2796%" height="15" fill="rgb(252,204,47)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="687.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (27 samples, 1.28%)</title><rect x="90.6635%" y="661" width="1.2796%" height="15" fill="rgb(208,77,27)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="671.50"></text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (27 samples, 1.28%)</title><rect x="90.6635%" y="645" width="1.2796%" height="15" fill="rgb(221,76,26)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="655.50"></text></g><g><title>askama_derive::parser::take_content (27 samples, 1.28%)</title><rect x="90.6635%" y="629" width="1.2796%" height="15" fill="rgb(225,139,18)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="639.50"></text></g><g><title>nom::combinator::opt::{{closure}} (27 samples, 1.28%)</title><rect x="90.6635%" y="613" width="1.2796%" height="15" fill="rgb(230,137,11)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (27 samples, 1.28%)</title><rect x="90.6635%" y="597" width="1.2796%" height="15" fill="rgb(212,28,1)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="607.50"></text></g><g><title>nom::combinator::recognize::{{closure}} (27 samples, 1.28%)</title><rect x="90.6635%" y="581" width="1.2796%" height="15" fill="rgb(248,164,17)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (27 samples, 1.28%)</title><rect x="90.6635%" y="565" width="1.2796%" height="15" fill="rgb(222,171,42)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="575.50"></text></g><g><title>askama_derive::parser::skip_till::{{closure}} (27 samples, 1.28%)</title><rect x="90.6635%" y="549" width="1.2796%" height="15" fill="rgb(243,84,45)" fg:x="1913" fg:w="27"/><text x="90.9135%" y="559.50"></text></g><g><title>nom::branch::alt::{{closure}} (8 samples, 0.38%)</title><rect x="91.5640%" y="533" width="0.3791%" height="15" fill="rgb(252,49,23)" fg:x="1932" fg:w="8"/><text x="91.8140%" y="543.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (4 samples, 0.19%)</title><rect x="91.7536%" y="517" width="0.1896%" height="15" fill="rgb(215,19,7)" fg:x="1936" fg:w="4"/><text x="92.0036%" y="527.50"></text></g><g><title>syn::derive::parsing::data_struct (1 samples, 0.05%)</title><rect x="91.9431%" y="789" width="0.0474%" height="15" fill="rgb(238,81,41)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="799.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.05%)</title><rect x="91.9431%" y="773" width="0.0474%" height="15" fill="rgb(210,199,37)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="783.50"></text></g><g><title>syn::data::parsing::&lt;impl syn::parse::Parse for syn::data::FieldsNamed&gt;::parse (1 samples, 0.05%)</title><rect x="91.9431%" y="757" width="0.0474%" height="15" fill="rgb(244,192,49)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="767.50"></text></g><g><title>syn::parse::ParseBuffer::parse_terminated (1 samples, 0.05%)</title><rect x="91.9431%" y="741" width="0.0474%" height="15" fill="rgb(226,211,11)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="751.50"></text></g><g><title>syn::punctuated::Punctuated&lt;T,P&gt;::parse_terminated_with (1 samples, 0.05%)</title><rect x="91.9431%" y="725" width="0.0474%" height="15" fill="rgb(236,162,54)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="735.50"></text></g><g><title>syn::data::parsing::&lt;impl syn::data::Field&gt;::parse_named (1 samples, 0.05%)</title><rect x="91.9431%" y="709" width="0.0474%" height="15" fill="rgb(220,229,9)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="719.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.05%)</title><rect x="91.9431%" y="693" width="0.0474%" height="15" fill="rgb(250,87,22)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="703.50"></text></g><g><title>syn::ident::parsing::&lt;impl syn::parse::Parse for proc_macro2::Ident&gt;::parse (1 samples, 0.05%)</title><rect x="91.9431%" y="677" width="0.0474%" height="15" fill="rgb(239,43,17)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="687.50"></text></g><g><title>syn::parse::ParseBuffer::step (1 samples, 0.05%)</title><rect x="91.9431%" y="661" width="0.0474%" height="15" fill="rgb(231,177,25)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="671.50"></text></g><g><title>syn::ident::parsing::&lt;impl syn::parse::Parse for proc_macro2::Ident&gt;::parse::{{closure}} (1 samples, 0.05%)</title><rect x="91.9431%" y="645" width="0.0474%" height="15" fill="rgb(219,179,1)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="655.50"></text></g><g><title>syn::ident::parsing::accept_as_ident (1 samples, 0.05%)</title><rect x="91.9431%" y="629" width="0.0474%" height="15" fill="rgb(238,219,53)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="639.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.05%)</title><rect x="91.9431%" y="613" width="0.0474%" height="15" fill="rgb(232,167,36)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="623.50"></text></g><g><title>&lt;proc_macro2::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="91.9431%" y="597" width="0.0474%" height="15" fill="rgb(244,19,51)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="607.50"></text></g><g><title>&lt;proc_macro2::imp::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="91.9431%" y="581" width="0.0474%" height="15" fill="rgb(224,6,22)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="591.50"></text></g><g><title>&lt;proc_macro2::fallback::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="91.9431%" y="565" width="0.0474%" height="15" fill="rgb(224,145,5)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="91.9431%" y="549" width="0.0474%" height="15" fill="rgb(234,130,49)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="91.9431%" y="533" width="0.0474%" height="15" fill="rgb(254,6,2)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.05%)</title><rect x="91.9431%" y="517" width="0.0474%" height="15" fill="rgb(208,96,46)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="91.9431%" y="501" width="0.0474%" height="15" fill="rgb(239,3,39)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="91.9431%" y="485" width="0.0474%" height="15" fill="rgb(233,210,1)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.05%)</title><rect x="91.9431%" y="469" width="0.0474%" height="15" fill="rgb(244,137,37)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="91.9431%" y="453" width="0.0474%" height="15" fill="rgb(240,136,2)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="91.9431%" y="437" width="0.0474%" height="15" fill="rgb(239,18,37)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="91.9431%" y="421" width="0.0474%" height="15" fill="rgb(218,185,22)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.05%)</title><rect x="91.9431%" y="405" width="0.0474%" height="15" fill="rgb(225,218,4)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.05%)</title><rect x="91.9431%" y="389" width="0.0474%" height="15" fill="rgb(230,182,32)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (1 samples, 0.05%)</title><rect x="91.9431%" y="373" width="0.0474%" height="15" fill="rgb(242,56,43)" fg:x="1940" fg:w="1"/><text x="92.1931%" y="383.50"></text></g><g><title>askama_derive::generator::derive_template (29 samples, 1.37%)</title><rect x="90.6635%" y="869" width="1.3744%" height="15" fill="rgb(233,99,24)" fg:x="1913" fg:w="29"/><text x="90.9135%" y="879.50"></text></g><g><title>syn::parse2 (2 samples, 0.09%)</title><rect x="91.9431%" y="853" width="0.0948%" height="15" fill="rgb(234,209,42)" fg:x="1940" fg:w="2"/><text x="92.1931%" y="863.50"></text></g><g><title>&lt;F as syn::parse::Parser&gt;::parse2 (2 samples, 0.09%)</title><rect x="91.9431%" y="837" width="0.0948%" height="15" fill="rgb(227,7,12)" fg:x="1940" fg:w="2"/><text x="92.1931%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.09%)</title><rect x="91.9431%" y="821" width="0.0948%" height="15" fill="rgb(245,203,43)" fg:x="1940" fg:w="2"/><text x="92.1931%" y="831.50"></text></g><g><title>syn::derive::parsing::&lt;impl syn::parse::Parse for syn::derive::DeriveInput&gt;::parse (2 samples, 0.09%)</title><rect x="91.9431%" y="805" width="0.0948%" height="15" fill="rgb(238,205,33)" fg:x="1940" fg:w="2"/><text x="92.1931%" y="815.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.05%)</title><rect x="91.9905%" y="789" width="0.0474%" height="15" fill="rgb(231,56,7)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="799.50"></text></g><g><title>syn::generics::parsing::&lt;impl syn::parse::Parse for syn::generics::Generics&gt;::parse (1 samples, 0.05%)</title><rect x="91.9905%" y="773" width="0.0474%" height="15" fill="rgb(244,186,29)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="783.50"></text></g><g><title>syn::lookahead::Lookahead1::peek (1 samples, 0.05%)</title><rect x="91.9905%" y="757" width="0.0474%" height="15" fill="rgb(234,111,31)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="767.50"></text></g><g><title>syn::lookahead::peek_impl (1 samples, 0.05%)</title><rect x="91.9905%" y="741" width="0.0474%" height="15" fill="rgb(241,149,10)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="751.50"></text></g><g><title>&lt;syn::lifetime::Lifetime as syn::token::Token&gt;::peek (1 samples, 0.05%)</title><rect x="91.9905%" y="725" width="0.0474%" height="15" fill="rgb(249,206,44)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="735.50"></text></g><g><title>syn::token::peek_impl (1 samples, 0.05%)</title><rect x="91.9905%" y="709" width="0.0474%" height="15" fill="rgb(251,153,30)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;syn::parse::ParseBuffer&gt; (1 samples, 0.05%)</title><rect x="91.9905%" y="693" width="0.0474%" height="15" fill="rgb(239,152,38)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="703.50"></text></g><g><title>&lt;syn::parse::ParseBuffer as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="91.9905%" y="677" width="0.0474%" height="15" fill="rgb(249,139,47)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="687.50"></text></g><g><title>syn::parse::inner_unexpected (1 samples, 0.05%)</title><rect x="91.9905%" y="661" width="0.0474%" height="15" fill="rgb(244,64,35)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="671.50"></text></g><g><title>syn::parse::get_unexpected (1 samples, 0.05%)</title><rect x="91.9905%" y="645" width="0.0474%" height="15" fill="rgb(216,46,15)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="655.50"></text></g><g><title>syn::parse::cell_clone (1 samples, 0.05%)</title><rect x="91.9905%" y="629" width="0.0474%" height="15" fill="rgb(250,74,19)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="91.9905%" y="613" width="0.0474%" height="15" fill="rgb(249,42,33)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="91.9905%" y="597" width="0.0474%" height="15" fill="rgb(242,149,17)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="607.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_inner (1 samples, 0.05%)</title><rect x="91.9905%" y="581" width="0.0474%" height="15" fill="rgb(244,29,21)" fg:x="1941" fg:w="1"/><text x="92.2405%" y="591.50"></text></g><g><title>askama_derive::parser::expr::expr_single (1 samples, 0.05%)</title><rect x="92.0379%" y="597" width="0.0474%" height="15" fill="rgb(220,130,37)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="607.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.05%)</title><rect x="92.0379%" y="581" width="0.0474%" height="15" fill="rgb(211,67,2)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="591.50"></text></g><g><title>&lt;(A,B,C,D,E,F,G,H,I) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.05%)</title><rect x="92.0379%" y="565" width="0.0474%" height="15" fill="rgb(235,68,52)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.0379%" y="549" width="0.0474%" height="15" fill="rgb(246,142,3)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="559.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.05%)</title><rect x="92.0379%" y="533" width="0.0474%" height="15" fill="rgb(241,25,7)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="543.50"></text></g><g><title>askama_derive::parser::expr::expr_path (1 samples, 0.05%)</title><rect x="92.0379%" y="517" width="0.0474%" height="15" fill="rgb(242,119,39)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="527.50"></text></g><g><title>askama_derive::parser::path (1 samples, 0.05%)</title><rect x="92.0379%" y="501" width="0.0474%" height="15" fill="rgb(241,98,45)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="511.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (1 samples, 0.05%)</title><rect x="92.0379%" y="485" width="0.0474%" height="15" fill="rgb(254,28,30)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="495.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.05%)</title><rect x="92.0379%" y="469" width="0.0474%" height="15" fill="rgb(241,142,54)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="479.50"></text></g><g><title>core::str::pattern::Pattern::is_contained_in (1 samples, 0.05%)</title><rect x="92.0379%" y="453" width="0.0474%" height="15" fill="rgb(222,85,15)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="463.50"></text></g><g><title>core::str::pattern::Searcher::next_match (1 samples, 0.05%)</title><rect x="92.0379%" y="437" width="0.0474%" height="15" fill="rgb(210,85,47)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="447.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.05%)</title><rect x="92.0379%" y="421" width="0.0474%" height="15" fill="rgb(224,206,25)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="431.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="92.0379%" y="405" width="0.0474%" height="15" fill="rgb(243,201,19)" fg:x="1942" fg:w="1"/><text x="92.2879%" y="415.50"></text></g><g><title>askama_derive::parser::expr::expr_compare (2 samples, 0.09%)</title><rect x="92.0379%" y="869" width="0.0948%" height="15" fill="rgb(236,59,4)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="879.50"></text></g><g><title>askama_derive::parser::expr::expr_bor (2 samples, 0.09%)</title><rect x="92.0379%" y="853" width="0.0948%" height="15" fill="rgb(254,179,45)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="863.50"></text></g><g><title>askama_derive::parser::expr::expr_bxor (2 samples, 0.09%)</title><rect x="92.0379%" y="837" width="0.0948%" height="15" fill="rgb(226,14,10)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="847.50"></text></g><g><title>askama_derive::parser::expr::expr_band (2 samples, 0.09%)</title><rect x="92.0379%" y="821" width="0.0948%" height="15" fill="rgb(244,27,41)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="831.50"></text></g><g><title>askama_derive::parser::expr::expr_shifts (2 samples, 0.09%)</title><rect x="92.0379%" y="805" width="0.0948%" height="15" fill="rgb(235,35,32)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="815.50"></text></g><g><title>askama_derive::parser::expr::expr_addsub (2 samples, 0.09%)</title><rect x="92.0379%" y="789" width="0.0948%" height="15" fill="rgb(218,68,31)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="799.50"></text></g><g><title>askama_derive::parser::expr::expr_muldivmod (2 samples, 0.09%)</title><rect x="92.0379%" y="773" width="0.0948%" height="15" fill="rgb(207,120,37)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="783.50"></text></g><g><title>askama_derive::parser::expr::expr_filtered (2 samples, 0.09%)</title><rect x="92.0379%" y="757" width="0.0948%" height="15" fill="rgb(227,98,0)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="767.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (2 samples, 0.09%)</title><rect x="92.0379%" y="741" width="0.0948%" height="15" fill="rgb(207,7,3)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="751.50"></text></g><g><title>&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (2 samples, 0.09%)</title><rect x="92.0379%" y="725" width="0.0948%" height="15" fill="rgb(206,98,19)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="735.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.09%)</title><rect x="92.0379%" y="709" width="0.0948%" height="15" fill="rgb(217,5,26)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="719.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2 samples, 0.09%)</title><rect x="92.0379%" y="693" width="0.0948%" height="15" fill="rgb(235,190,38)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="703.50"></text></g><g><title>askama_derive::parser::expr::expr_prefix (2 samples, 0.09%)</title><rect x="92.0379%" y="677" width="0.0948%" height="15" fill="rgb(247,86,24)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="687.50"></text></g><g><title>nom::sequence::pair::{{closure}} (2 samples, 0.09%)</title><rect x="92.0379%" y="661" width="0.0948%" height="15" fill="rgb(205,101,16)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.09%)</title><rect x="92.0379%" y="645" width="0.0948%" height="15" fill="rgb(246,168,33)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="655.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2 samples, 0.09%)</title><rect x="92.0379%" y="629" width="0.0948%" height="15" fill="rgb(231,114,1)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="639.50"></text></g><g><title>askama_derive::parser::expr::expr_suffix (2 samples, 0.09%)</title><rect x="92.0379%" y="613" width="0.0948%" height="15" fill="rgb(207,184,53)" fg:x="1942" fg:w="2"/><text x="92.2879%" y="623.50"></text></g><g><title>nom::combinator::opt::{{closure}} (1 samples, 0.05%)</title><rect x="92.0853%" y="597" width="0.0474%" height="15" fill="rgb(224,95,51)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="607.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.0853%" y="581" width="0.0474%" height="15" fill="rgb(212,188,45)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="591.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.05%)</title><rect x="92.0853%" y="565" width="0.0474%" height="15" fill="rgb(223,154,38)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="575.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.05%)</title><rect x="92.0853%" y="549" width="0.0474%" height="15" fill="rgb(251,22,52)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.0853%" y="533" width="0.0474%" height="15" fill="rgb(229,209,22)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="543.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.05%)</title><rect x="92.0853%" y="517" width="0.0474%" height="15" fill="rgb(234,138,34)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="527.50"></text></g><g><title>askama_derive::parser::expr::expr_call (1 samples, 0.05%)</title><rect x="92.0853%" y="501" width="0.0474%" height="15" fill="rgb(212,95,11)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="511.50"></text></g><g><title>nom::combinator::map::{{closure}} (1 samples, 0.05%)</title><rect x="92.0853%" y="485" width="0.0474%" height="15" fill="rgb(240,179,47)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="495.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.0853%" y="469" width="0.0474%" height="15" fill="rgb(240,163,11)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.05%)</title><rect x="92.0853%" y="453" width="0.0474%" height="15" fill="rgb(236,37,12)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="463.50"></text></g><g><title>askama_derive::parser::expr::arguments (1 samples, 0.05%)</title><rect x="92.0853%" y="437" width="0.0474%" height="15" fill="rgb(232,164,16)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="447.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1 samples, 0.05%)</title><rect x="92.0853%" y="421" width="0.0474%" height="15" fill="rgb(244,205,15)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.0853%" y="405" width="0.0474%" height="15" fill="rgb(223,117,47)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="415.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1 samples, 0.05%)</title><rect x="92.0853%" y="389" width="0.0474%" height="15" fill="rgb(244,107,35)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="399.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.0853%" y="373" width="0.0474%" height="15" fill="rgb(205,140,8)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="383.50"></text></g><g><title>nom::bytes::complete::take_till::{{closure}} (1 samples, 0.05%)</title><rect x="92.0853%" y="357" width="0.0474%" height="15" fill="rgb(228,84,46)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="367.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position_complete (1 samples, 0.05%)</title><rect x="92.0853%" y="341" width="0.0474%" height="15" fill="rgb(254,188,9)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.05%)</title><rect x="92.0853%" y="325" width="0.0474%" height="15" fill="rgb(206,112,54)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="335.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (1 samples, 0.05%)</title><rect x="92.0853%" y="309" width="0.0474%" height="15" fill="rgb(216,84,49)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="319.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (1 samples, 0.05%)</title><rect x="92.0853%" y="293" width="0.0474%" height="15" fill="rgb(214,194,35)" fg:x="1943" fg:w="1"/><text x="92.3353%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.05%)</title><rect x="92.1327%" y="869" width="0.0474%" height="15" fill="rgb(249,28,3)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="879.50"></text></g><g><title>askama_bench::main (1 samples, 0.05%)</title><rect x="92.1327%" y="853" width="0.0474%" height="15" fill="rgb(222,56,52)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="863.50"></text></g><g><title>askama_derive::derive_template (1 samples, 0.05%)</title><rect x="92.1327%" y="837" width="0.0474%" height="15" fill="rgb(245,217,50)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="847.50"></text></g><g><title>askama_derive::generator::derive_template (1 samples, 0.05%)</title><rect x="92.1327%" y="821" width="0.0474%" height="15" fill="rgb(213,201,24)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="831.50"></text></g><g><title>askama_derive::generator::build_template (1 samples, 0.05%)</title><rect x="92.1327%" y="805" width="0.0474%" height="15" fill="rgb(248,116,28)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="815.50"></text></g><g><title>askama_derive::generator::find_used_templates (1 samples, 0.05%)</title><rect x="92.1327%" y="789" width="0.0474%" height="15" fill="rgb(219,72,43)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="799.50"></text></g><g><title>askama_derive::generator::_parsed::Parsed::new (1 samples, 0.05%)</title><rect x="92.1327%" y="773" width="0.0474%" height="15" fill="rgb(209,138,14)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="783.50"></text></g><g><title>askama_derive::parser::parse (1 samples, 0.05%)</title><rect x="92.1327%" y="757" width="0.0474%" height="15" fill="rgb(222,18,33)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="767.50"></text></g><g><title>askama_derive::parser::node::Node::parse (1 samples, 0.05%)</title><rect x="92.1327%" y="741" width="0.0474%" height="15" fill="rgb(213,199,7)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="751.50"></text></g><g><title>askama_derive::parser::node::parse_template (1 samples, 0.05%)</title><rect x="92.1327%" y="725" width="0.0474%" height="15" fill="rgb(250,110,10)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="735.50"></text></g><g><title>nom::multi::many0::{{closure}} (1 samples, 0.05%)</title><rect x="92.1327%" y="709" width="0.0474%" height="15" fill="rgb(248,123,6)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="719.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.1327%" y="693" width="0.0474%" height="15" fill="rgb(206,91,31)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="703.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.05%)</title><rect x="92.1327%" y="677" width="0.0474%" height="15" fill="rgb(211,154,13)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="687.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.05%)</title><rect x="92.1327%" y="661" width="0.0474%" height="15" fill="rgb(225,148,7)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.1327%" y="645" width="0.0474%" height="15" fill="rgb(220,160,43)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="655.50"></text></g><g><title>nom::combinator::complete::{{closure}} (1 samples, 0.05%)</title><rect x="92.1327%" y="629" width="0.0474%" height="15" fill="rgb(213,52,39)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.1327%" y="613" width="0.0474%" height="15" fill="rgb(243,137,7)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="623.50"></text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (1 samples, 0.05%)</title><rect x="92.1327%" y="597" width="0.0474%" height="15" fill="rgb(230,79,13)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="607.50"></text></g><g><title>askama_derive::parser::node::expr_node (1 samples, 0.05%)</title><rect x="92.1327%" y="581" width="0.0474%" height="15" fill="rgb(247,105,23)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="591.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="92.1327%" y="565" width="0.0474%" height="15" fill="rgb(223,179,41)" fg:x="1944" fg:w="1"/><text x="92.3827%" y="575.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.05%)</title><rect x="92.1801%" y="869" width="0.0474%" height="15" fill="rgb(218,9,34)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="879.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.05%)</title><rect x="92.1801%" y="853" width="0.0474%" height="15" fill="rgb(222,106,8)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.05%)</title><rect x="92.1801%" y="837" width="0.0474%" height="15" fill="rgb(211,220,0)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="847.50"></text></g><g><title>askama_bench::main (1 samples, 0.05%)</title><rect x="92.1801%" y="821" width="0.0474%" height="15" fill="rgb(229,52,16)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="831.50"></text></g><g><title>askama_derive::derive_template (1 samples, 0.05%)</title><rect x="92.1801%" y="805" width="0.0474%" height="15" fill="rgb(212,155,18)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="815.50"></text></g><g><title>askama_derive::generator::derive_template (1 samples, 0.05%)</title><rect x="92.1801%" y="789" width="0.0474%" height="15" fill="rgb(242,21,14)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="799.50"></text></g><g><title>askama_derive::generator::build_template (1 samples, 0.05%)</title><rect x="92.1801%" y="773" width="0.0474%" height="15" fill="rgb(222,19,48)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="783.50"></text></g><g><title>askama_derive::generator::Generator::build (1 samples, 0.05%)</title><rect x="92.1801%" y="757" width="0.0474%" height="15" fill="rgb(232,45,27)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="767.50"></text></g><g><title>askama_derive::generator::Generator::impl_template (1 samples, 0.05%)</title><rect x="92.1801%" y="741" width="0.0474%" height="15" fill="rgb(249,103,42)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="751.50"></text></g><g><title>askama_derive::generator::Generator::handle (1 samples, 0.05%)</title><rect x="92.1801%" y="725" width="0.0474%" height="15" fill="rgb(246,81,33)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="735.50"></text></g><g><title>askama_derive::generator::Generator::write_buf_writable (1 samples, 0.05%)</title><rect x="92.1801%" y="709" width="0.0474%" height="15" fill="rgb(252,33,42)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="719.50"></text></g><g><title>askama_derive::generator::Buffer::writeln (1 samples, 0.05%)</title><rect x="92.1801%" y="693" width="0.0474%" height="15" fill="rgb(209,212,41)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="703.50"></text></g><g><title>askama_derive::generator::Buffer::write (1 samples, 0.05%)</title><rect x="92.1801%" y="677" width="0.0474%" height="15" fill="rgb(207,154,6)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="687.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.05%)</title><rect x="92.1801%" y="661" width="0.0474%" height="15" fill="rgb(223,64,47)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="92.1801%" y="645" width="0.0474%" height="15" fill="rgb(211,161,38)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="92.1801%" y="629" width="0.0474%" height="15" fill="rgb(219,138,40)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.05%)</title><rect x="92.1801%" y="613" width="0.0474%" height="15" fill="rgb(241,228,46)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="92.1801%" y="597" width="0.0474%" height="15" fill="rgb(223,209,38)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="607.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="92.1801%" y="581" width="0.0474%" height="15" fill="rgb(236,164,45)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="92.1801%" y="565" width="0.0474%" height="15" fill="rgb(231,15,5)" fg:x="1945" fg:w="1"/><text x="92.4301%" y="575.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.05%)</title><rect x="92.2275%" y="869" width="0.0474%" height="15" fill="rgb(252,35,15)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="879.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.05%)</title><rect x="92.2275%" y="853" width="0.0474%" height="15" fill="rgb(248,181,18)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="863.50"></text></g><g><title>std::panicking::try (1 samples, 0.05%)</title><rect x="92.2275%" y="837" width="0.0474%" height="15" fill="rgb(233,39,42)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="847.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.05%)</title><rect x="92.2275%" y="821" width="0.0474%" height="15" fill="rgb(238,110,33)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="831.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.05%)</title><rect x="92.2275%" y="805" width="0.0474%" height="15" fill="rgb(233,195,10)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="815.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.05%)</title><rect x="92.2275%" y="789" width="0.0474%" height="15" fill="rgb(254,105,3)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="799.50"></text></g><g><title>std::panicking::try (1 samples, 0.05%)</title><rect x="92.2275%" y="773" width="0.0474%" height="15" fill="rgb(221,225,9)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="783.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.05%)</title><rect x="92.2275%" y="757" width="0.0474%" height="15" fill="rgb(224,227,45)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="767.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.05%)</title><rect x="92.2275%" y="741" width="0.0474%" height="15" fill="rgb(229,198,43)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="751.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1 samples, 0.05%)</title><rect x="92.2275%" y="725" width="0.0474%" height="15" fill="rgb(206,209,35)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.05%)</title><rect x="92.2275%" y="709" width="0.0474%" height="15" fill="rgb(245,195,53)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="719.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.05%)</title><rect x="92.2275%" y="693" width="0.0474%" height="15" fill="rgb(240,92,26)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="703.50"></text></g><g><title>askama_bench::main (1 samples, 0.05%)</title><rect x="92.2275%" y="677" width="0.0474%" height="15" fill="rgb(207,40,23)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="687.50"></text></g><g><title>askama_derive::derive_template (1 samples, 0.05%)</title><rect x="92.2275%" y="661" width="0.0474%" height="15" fill="rgb(223,111,35)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="671.50"></text></g><g><title>askama_derive::generator::derive_template (1 samples, 0.05%)</title><rect x="92.2275%" y="645" width="0.0474%" height="15" fill="rgb(229,147,28)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="655.50"></text></g><g><title>askama_derive::generator::build_template (1 samples, 0.05%)</title><rect x="92.2275%" y="629" width="0.0474%" height="15" fill="rgb(211,29,28)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="639.50"></text></g><g><title>askama_derive::generator::Generator::build (1 samples, 0.05%)</title><rect x="92.2275%" y="613" width="0.0474%" height="15" fill="rgb(228,72,33)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="623.50"></text></g><g><title>askama_derive::generator::Generator::impl_template (1 samples, 0.05%)</title><rect x="92.2275%" y="597" width="0.0474%" height="15" fill="rgb(205,214,31)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="607.50"></text></g><g><title>askama_derive::generator::Generator::handle (1 samples, 0.05%)</title><rect x="92.2275%" y="581" width="0.0474%" height="15" fill="rgb(224,111,15)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="591.50"></text></g><g><title>askama_derive::generator::Generator::write_buf_writable (1 samples, 0.05%)</title><rect x="92.2275%" y="565" width="0.0474%" height="15" fill="rgb(253,21,26)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="575.50"></text></g><g><title>askama_derive::generator::Buffer::write (1 samples, 0.05%)</title><rect x="92.2275%" y="549" width="0.0474%" height="15" fill="rgb(245,139,43)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.05%)</title><rect x="92.2275%" y="533" width="0.0474%" height="15" fill="rgb(252,170,7)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="92.2275%" y="517" width="0.0474%" height="15" fill="rgb(231,118,14)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="92.2275%" y="501" width="0.0474%" height="15" fill="rgb(238,83,0)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.05%)</title><rect x="92.2275%" y="485" width="0.0474%" height="15" fill="rgb(221,39,39)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="92.2275%" y="469" width="0.0474%" height="15" fill="rgb(222,119,46)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="92.2275%" y="453" width="0.0474%" height="15" fill="rgb(222,165,49)" fg:x="1946" fg:w="1"/><text x="92.4775%" y="463.50"></text></g><g><title>[unknown] (1,940 samples, 91.94%)</title><rect x="0.3791%" y="885" width="91.9431%" height="15" fill="rgb(219,113,52)" fg:x="8" fg:w="1940"/><text x="0.6291%" y="895.50">[unknown]</text></g><g><title>syn::ty::parsing::ambig_ty (1 samples, 0.05%)</title><rect x="92.2749%" y="869" width="0.0474%" height="15" fill="rgb(214,7,15)" fg:x="1947" fg:w="1"/><text x="92.5249%" y="879.50"></text></g><g><title>syn::lookahead::Lookahead1::peek (1 samples, 0.05%)</title><rect x="92.2749%" y="853" width="0.0474%" height="15" fill="rgb(235,32,4)" fg:x="1947" fg:w="1"/><text x="92.5249%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.05%)</title><rect x="92.3223%" y="149" width="0.0474%" height="15" fill="rgb(238,90,54)" fg:x="1948" fg:w="1"/><text x="92.5723%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="92.3223%" y="133" width="0.0474%" height="15" fill="rgb(213,208,19)" fg:x="1948" fg:w="1"/><text x="92.5723%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.05%)</title><rect x="92.3223%" y="117" width="0.0474%" height="15" fill="rgb(233,156,4)" fg:x="1948" fg:w="1"/><text x="92.5723%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.05%)</title><rect x="92.3223%" y="101" width="0.0474%" height="15" fill="rgb(207,194,5)" fg:x="1948" fg:w="1"/><text x="92.5723%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.05%)</title><rect x="92.3223%" y="85" width="0.0474%" height="15" fill="rgb(206,111,30)" fg:x="1948" fg:w="1"/><text x="92.5723%" y="95.50"></text></g><g><title>realloc (1 samples, 0.05%)</title><rect x="92.3223%" y="69" width="0.0474%" height="15" fill="rgb(243,70,54)" fg:x="1948" fg:w="1"/><text x="92.5723%" y="79.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="92.3223%" y="53" width="0.0474%" height="15" fill="rgb(242,28,8)" fg:x="1948" fg:w="1"/><text x="92.5723%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="92.3223%" y="37" width="0.0474%" height="15" fill="rgb(219,106,18)" fg:x="1948" fg:w="1"/><text x="92.5723%" y="47.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (2 samples, 0.09%)</title><rect x="92.3223%" y="405" width="0.0948%" height="15" fill="rgb(244,222,10)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="415.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (2 samples, 0.09%)</title><rect x="92.3223%" y="389" width="0.0948%" height="15" fill="rgb(236,179,52)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="399.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (2 samples, 0.09%)</title><rect x="92.3223%" y="373" width="0.0948%" height="15" fill="rgb(213,23,39)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="383.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (2 samples, 0.09%)</title><rect x="92.3223%" y="357" width="0.0948%" height="15" fill="rgb(238,48,10)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="367.50"></text></g><g><title>&lt;proc_macro2::Ident as core::fmt::Display&gt;::fmt (2 samples, 0.09%)</title><rect x="92.3223%" y="341" width="0.0948%" height="15" fill="rgb(251,196,23)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="351.50"></text></g><g><title>&lt;proc_macro2::imp::Ident as core::fmt::Display&gt;::fmt (2 samples, 0.09%)</title><rect x="92.3223%" y="325" width="0.0948%" height="15" fill="rgb(250,152,24)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="335.50"></text></g><g><title>&lt;proc_macro2::fallback::Ident as core::fmt::Display&gt;::fmt (2 samples, 0.09%)</title><rect x="92.3223%" y="309" width="0.0948%" height="15" fill="rgb(209,150,17)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (2 samples, 0.09%)</title><rect x="92.3223%" y="293" width="0.0948%" height="15" fill="rgb(234,202,34)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.09%)</title><rect x="92.3223%" y="277" width="0.0948%" height="15" fill="rgb(253,148,53)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="287.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.09%)</title><rect x="92.3223%" y="261" width="0.0948%" height="15" fill="rgb(218,129,16)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.09%)</title><rect x="92.3223%" y="245" width="0.0948%" height="15" fill="rgb(216,85,19)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.09%)</title><rect x="92.3223%" y="229" width="0.0948%" height="15" fill="rgb(235,228,7)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.09%)</title><rect x="92.3223%" y="213" width="0.0948%" height="15" fill="rgb(245,175,0)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.09%)</title><rect x="92.3223%" y="197" width="0.0948%" height="15" fill="rgb(208,168,36)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.09%)</title><rect x="92.3223%" y="181" width="0.0948%" height="15" fill="rgb(246,171,24)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.09%)</title><rect x="92.3223%" y="165" width="0.0948%" height="15" fill="rgb(215,142,24)" fg:x="1948" fg:w="2"/><text x="92.5723%" y="175.50"></text></g><g><title>alloc::raw_vec::handle_reserve (1 samples, 0.05%)</title><rect x="92.3697%" y="149" width="0.0474%" height="15" fill="rgb(250,187,7)" fg:x="1949" fg:w="1"/><text x="92.6197%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.05%)</title><rect x="92.3697%" y="133" width="0.0474%" height="15" fill="rgb(228,66,33)" fg:x="1949" fg:w="1"/><text x="92.6197%" y="143.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (3 samples, 0.14%)</title><rect x="92.3223%" y="533" width="0.1422%" height="15" fill="rgb(234,215,21)" fg:x="1948" fg:w="3"/><text x="92.5723%" y="543.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (3 samples, 0.14%)</title><rect x="92.3223%" y="517" width="0.1422%" height="15" fill="rgb(222,191,20)" fg:x="1948" fg:w="3"/><text x="92.5723%" y="527.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (3 samples, 0.14%)</title><rect x="92.3223%" y="501" width="0.1422%" height="15" fill="rgb(245,79,54)" fg:x="1948" fg:w="3"/><text x="92.5723%" y="511.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (3 samples, 0.14%)</title><rect x="92.3223%" y="485" width="0.1422%" height="15" fill="rgb(240,10,37)" fg:x="1948" fg:w="3"/><text x="92.5723%" y="495.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (3 samples, 0.14%)</title><rect x="92.3223%" y="469" width="0.1422%" height="15" fill="rgb(214,192,32)" fg:x="1948" fg:w="3"/><text x="92.5723%" y="479.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (3 samples, 0.14%)</title><rect x="92.3223%" y="453" width="0.1422%" height="15" fill="rgb(209,36,54)" fg:x="1948" fg:w="3"/><text x="92.5723%" y="463.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (3 samples, 0.14%)</title><rect x="92.3223%" y="437" width="0.1422%" height="15" fill="rgb(220,10,11)" fg:x="1948" fg:w="3"/><text x="92.5723%" y="447.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (3 samples, 0.14%)</title><rect x="92.3223%" y="421" width="0.1422%" height="15" fill="rgb(221,106,17)" fg:x="1948" fg:w="3"/><text x="92.5723%" y="431.50"></text></g><g><title>&lt;proc_macro2::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.4171%" y="405" width="0.0474%" height="15" fill="rgb(251,142,44)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="415.50"></text></g><g><title>&lt;proc_macro2::imp::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.4171%" y="389" width="0.0474%" height="15" fill="rgb(238,13,15)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="399.50"></text></g><g><title>&lt;proc_macro2::fallback::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.4171%" y="373" width="0.0474%" height="15" fill="rgb(208,107,27)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.4171%" y="357" width="0.0474%" height="15" fill="rgb(205,136,37)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="92.4171%" y="341" width="0.0474%" height="15" fill="rgb(250,205,27)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.05%)</title><rect x="92.4171%" y="325" width="0.0474%" height="15" fill="rgb(210,80,43)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="92.4171%" y="309" width="0.0474%" height="15" fill="rgb(247,160,36)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="92.4171%" y="293" width="0.0474%" height="15" fill="rgb(234,13,49)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 0.05%)</title><rect x="92.4171%" y="277" width="0.0474%" height="15" fill="rgb(234,122,0)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="287.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 0.05%)</title><rect x="92.4171%" y="261" width="0.0474%" height="15" fill="rgb(207,146,38)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1 samples, 0.05%)</title><rect x="92.4171%" y="245" width="0.0474%" height="15" fill="rgb(207,177,25)" fg:x="1950" fg:w="1"/><text x="92.6671%" y="255.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (4 samples, 0.19%)</title><rect x="92.3223%" y="597" width="0.1896%" height="15" fill="rgb(211,178,42)" fg:x="1948" fg:w="4"/><text x="92.5723%" y="607.50"></text></g><g><title>&lt;proc_macro2::TokenStream as core::fmt::Display&gt;::fmt (4 samples, 0.19%)</title><rect x="92.3223%" y="581" width="0.1896%" height="15" fill="rgb(230,69,54)" fg:x="1948" fg:w="4"/><text x="92.5723%" y="591.50"></text></g><g><title>&lt;proc_macro2::imp::TokenStream as core::fmt::Display&gt;::fmt (4 samples, 0.19%)</title><rect x="92.3223%" y="565" width="0.1896%" height="15" fill="rgb(214,135,41)" fg:x="1948" fg:w="4"/><text x="92.5723%" y="575.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (4 samples, 0.19%)</title><rect x="92.3223%" y="549" width="0.1896%" height="15" fill="rgb(237,67,25)" fg:x="1948" fg:w="4"/><text x="92.5723%" y="559.50"></text></g><g><title>&lt;proc_macro2::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.4645%" y="533" width="0.0474%" height="15" fill="rgb(222,189,50)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="543.50"></text></g><g><title>&lt;proc_macro2::imp::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.4645%" y="517" width="0.0474%" height="15" fill="rgb(245,148,34)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="527.50"></text></g><g><title>&lt;proc_macro2::fallback::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.4645%" y="501" width="0.0474%" height="15" fill="rgb(222,29,6)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.4645%" y="485" width="0.0474%" height="15" fill="rgb(221,189,43)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="92.4645%" y="469" width="0.0474%" height="15" fill="rgb(207,36,27)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.05%)</title><rect x="92.4645%" y="453" width="0.0474%" height="15" fill="rgb(217,90,24)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="92.4645%" y="437" width="0.0474%" height="15" fill="rgb(224,66,35)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="92.4645%" y="421" width="0.0474%" height="15" fill="rgb(221,13,50)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.05%)</title><rect x="92.4645%" y="405" width="0.0474%" height="15" fill="rgb(236,68,49)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="92.4645%" y="389" width="0.0474%" height="15" fill="rgb(229,146,28)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="92.4645%" y="373" width="0.0474%" height="15" fill="rgb(225,31,38)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="92.4645%" y="357" width="0.0474%" height="15" fill="rgb(250,208,3)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.05%)</title><rect x="92.4645%" y="341" width="0.0474%" height="15" fill="rgb(246,54,23)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="92.4645%" y="325" width="0.0474%" height="15" fill="rgb(243,76,11)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.05%)</title><rect x="92.4645%" y="309" width="0.0474%" height="15" fill="rgb(245,21,50)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.05%)</title><rect x="92.4645%" y="293" width="0.0474%" height="15" fill="rgb(228,9,43)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="303.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.05%)</title><rect x="92.4645%" y="277" width="0.0474%" height="15" fill="rgb(208,100,47)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="287.50"></text></g><g><title>realloc (1 samples, 0.05%)</title><rect x="92.4645%" y="261" width="0.0474%" height="15" fill="rgb(232,26,8)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="92.4645%" y="245" width="0.0474%" height="15" fill="rgb(216,166,38)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="92.4645%" y="229" width="0.0474%" height="15" fill="rgb(251,202,51)" fg:x="1951" fg:w="1"/><text x="92.7145%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1 samples, 0.05%)</title><rect x="92.5118%" y="549" width="0.0474%" height="15" fill="rgb(254,216,34)" fg:x="1952" fg:w="1"/><text x="92.7618%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.05%)</title><rect x="92.5118%" y="533" width="0.0474%" height="15" fill="rgb(251,32,27)" fg:x="1952" fg:w="1"/><text x="92.7618%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.05%)</title><rect x="92.5118%" y="517" width="0.0474%" height="15" fill="rgb(208,127,28)" fg:x="1952" fg:w="1"/><text x="92.7618%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.05%)</title><rect x="92.5118%" y="501" width="0.0474%" height="15" fill="rgb(224,137,22)" fg:x="1952" fg:w="1"/><text x="92.7618%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.05%)</title><rect x="92.5118%" y="485" width="0.0474%" height="15" fill="rgb(254,70,32)" fg:x="1952" fg:w="1"/><text x="92.7618%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="92.5118%" y="469" width="0.0474%" height="15" fill="rgb(229,75,37)" fg:x="1952" fg:w="1"/><text x="92.7618%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.05%)</title><rect x="92.5118%" y="453" width="0.0474%" height="15" fill="rgb(252,64,23)" fg:x="1952" fg:w="1"/><text x="92.7618%" y="463.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (1 samples, 0.05%)</title><rect x="92.5118%" y="437" width="0.0474%" height="15" fill="rgb(232,162,48)" fg:x="1952" fg:w="1"/><text x="92.7618%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.05%)</title><rect x="92.5118%" y="421" width="0.0474%" height="15" fill="rgb(246,160,12)" fg:x="1952" fg:w="1"/><text x="92.7618%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.05%)</title><rect x="92.5118%" y="405" width="0.0474%" height="15" fill="rgb(247,166,0)" fg:x="1952" fg:w="1"/><text x="92.7618%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.05%)</title><rect x="92.5592%" y="533" width="0.0474%" height="15" fill="rgb(249,219,21)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.05%)</title><rect x="92.5592%" y="517" width="0.0474%" height="15" fill="rgb(205,209,3)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="527.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.05%)</title><rect x="92.5592%" y="501" width="0.0474%" height="15" fill="rgb(243,44,1)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="511.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.05%)</title><rect x="92.5592%" y="485" width="0.0474%" height="15" fill="rgb(206,159,16)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.05%)</title><rect x="92.5592%" y="469" width="0.0474%" height="15" fill="rgb(244,77,30)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="479.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.05%)</title><rect x="92.5592%" y="453" width="0.0474%" height="15" fill="rgb(218,69,12)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.05%)</title><rect x="92.5592%" y="437" width="0.0474%" height="15" fill="rgb(212,87,7)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.05%)</title><rect x="92.5592%" y="421" width="0.0474%" height="15" fill="rgb(245,114,25)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.05%)</title><rect x="92.5592%" y="405" width="0.0474%" height="15" fill="rgb(210,61,42)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="415.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="92.5592%" y="389" width="0.0474%" height="15" fill="rgb(211,52,33)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="92.5592%" y="373" width="0.0474%" height="15" fill="rgb(234,58,33)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="92.5592%" y="357" width="0.0474%" height="15" fill="rgb(220,115,36)" fg:x="1953" fg:w="1"/><text x="92.8092%" y="367.50"></text></g><g><title>askama_derive::config::Config::new (2 samples, 0.09%)</title><rect x="92.5592%" y="549" width="0.0948%" height="15" fill="rgb(243,153,54)" fg:x="1953" fg:w="2"/><text x="92.8092%" y="559.50"></text></g><g><title>askama_derive::config::str_set (1 samples, 0.05%)</title><rect x="92.6066%" y="533" width="0.0474%" height="15" fill="rgb(251,47,18)" fg:x="1954" fg:w="1"/><text x="92.8566%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.05%)</title><rect x="92.6066%" y="517" width="0.0474%" height="15" fill="rgb(242,102,42)" fg:x="1954" fg:w="1"/><text x="92.8566%" y="527.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="92.6066%" y="501" width="0.0474%" height="15" fill="rgb(234,31,38)" fg:x="1954" fg:w="1"/><text x="92.8566%" y="511.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.05%)</title><rect x="92.6066%" y="485" width="0.0474%" height="15" fill="rgb(221,117,51)" fg:x="1954" fg:w="1"/><text x="92.8566%" y="495.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.05%)</title><rect x="92.6066%" y="469" width="0.0474%" height="15" fill="rgb(212,20,18)" fg:x="1954" fg:w="1"/><text x="92.8566%" y="479.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.05%)</title><rect x="92.6066%" y="453" width="0.0474%" height="15" fill="rgb(245,133,36)" fg:x="1954" fg:w="1"/><text x="92.8566%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 0.05%)</title><rect x="92.6066%" y="437" width="0.0474%" height="15" fill="rgb(212,6,19)" fg:x="1954" fg:w="1"/><text x="92.8566%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="92.6066%" y="421" width="0.0474%" height="15" fill="rgb(218,1,36)" fg:x="1954" fg:w="1"/><text x="92.8566%" y="431.50"></text></g><g><title>askama_derive::config::get_template_source (1 samples, 0.05%)</title><rect x="92.6540%" y="549" width="0.0474%" height="15" fill="rgb(246,84,54)" fg:x="1955" fg:w="1"/><text x="92.9040%" y="559.50"></text></g><g><title>std::fs::read_to_string (1 samples, 0.05%)</title><rect x="92.6540%" y="533" width="0.0474%" height="15" fill="rgb(242,110,6)" fg:x="1955" fg:w="1"/><text x="92.9040%" y="543.50"></text></g><g><title>std::fs::read_to_string::inner (1 samples, 0.05%)</title><rect x="92.6540%" y="517" width="0.0474%" height="15" fill="rgb(214,47,5)" fg:x="1955" fg:w="1"/><text x="92.9040%" y="527.50"></text></g><g><title>std::io::default_read_to_string (1 samples, 0.05%)</title><rect x="92.6540%" y="501" width="0.0474%" height="15" fill="rgb(218,159,25)" fg:x="1955" fg:w="1"/><text x="92.9040%" y="511.50"></text></g><g><title>std::io::append_to_string (1 samples, 0.05%)</title><rect x="92.6540%" y="485" width="0.0474%" height="15" fill="rgb(215,211,28)" fg:x="1955" fg:w="1"/><text x="92.9040%" y="495.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.05%)</title><rect x="92.6540%" y="469" width="0.0474%" height="15" fill="rgb(238,59,32)" fg:x="1955" fg:w="1"/><text x="92.9040%" y="479.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.05%)</title><rect x="92.6540%" y="453" width="0.0474%" height="15" fill="rgb(226,82,3)" fg:x="1955" fg:w="1"/><text x="92.9040%" y="463.50"></text></g><g><title>core::str::validations::contains_nonascii (1 samples, 0.05%)</title><rect x="92.6540%" y="437" width="0.0474%" height="15" fill="rgb(240,164,32)" fg:x="1955" fg:w="1"/><text x="92.9040%" y="447.50"></text></g><g><title>askama_derive::generator::Generator::impl_display (1 samples, 0.05%)</title><rect x="92.7014%" y="533" width="0.0474%" height="15" fill="rgb(232,46,7)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="543.50"></text></g><g><title>askama_derive::generator::Generator::write_header (1 samples, 0.05%)</title><rect x="92.7014%" y="517" width="0.0474%" height="15" fill="rgb(229,129,53)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="527.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.05%)</title><rect x="92.7014%" y="501" width="0.0474%" height="15" fill="rgb(234,188,29)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.05%)</title><rect x="92.7014%" y="485" width="0.0474%" height="15" fill="rgb(246,141,4)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="495.50"></text></g><g><title>alloc::fmt::format::{{closure}} (1 samples, 0.05%)</title><rect x="92.7014%" y="469" width="0.0474%" height="15" fill="rgb(229,23,39)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.05%)</title><rect x="92.7014%" y="453" width="0.0474%" height="15" fill="rgb(206,12,3)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.05%)</title><rect x="92.7014%" y="437" width="0.0474%" height="15" fill="rgb(252,226,20)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.05%)</title><rect x="92.7014%" y="421" width="0.0474%" height="15" fill="rgb(216,123,35)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="431.50"></text></g><g><title>&lt;proc_macro2::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.7014%" y="405" width="0.0474%" height="15" fill="rgb(212,68,40)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="415.50"></text></g><g><title>&lt;proc_macro2::imp::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.7014%" y="389" width="0.0474%" height="15" fill="rgb(254,125,32)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="399.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.7014%" y="373" width="0.0474%" height="15" fill="rgb(253,97,22)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="383.50"></text></g><g><title>&lt;proc_macro2::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.7014%" y="357" width="0.0474%" height="15" fill="rgb(241,101,14)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="367.50"></text></g><g><title>&lt;proc_macro2::imp::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.7014%" y="341" width="0.0474%" height="15" fill="rgb(238,103,29)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="351.50"></text></g><g><title>&lt;proc_macro2::fallback::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.7014%" y="325" width="0.0474%" height="15" fill="rgb(233,195,47)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="92.7014%" y="309" width="0.0474%" height="15" fill="rgb(246,218,30)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="92.7014%" y="293" width="0.0474%" height="15" fill="rgb(219,145,47)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="92.7014%" y="277" width="0.0474%" height="15" fill="rgb(243,12,26)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.05%)</title><rect x="92.7014%" y="261" width="0.0474%" height="15" fill="rgb(214,87,16)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="92.7014%" y="245" width="0.0474%" height="15" fill="rgb(208,99,42)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="92.7014%" y="229" width="0.0474%" height="15" fill="rgb(253,99,2)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.05%)</title><rect x="92.7014%" y="213" width="0.0474%" height="15" fill="rgb(220,168,23)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="92.7014%" y="197" width="0.0474%" height="15" fill="rgb(242,38,24)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="92.7014%" y="181" width="0.0474%" height="15" fill="rgb(225,182,9)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="92.7014%" y="165" width="0.0474%" height="15" fill="rgb(243,178,37)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.05%)</title><rect x="92.7014%" y="149" width="0.0474%" height="15" fill="rgb(232,139,19)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="92.7014%" y="133" width="0.0474%" height="15" fill="rgb(225,201,24)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="143.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="92.7014%" y="117" width="0.0474%" height="15" fill="rgb(221,47,46)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="92.7014%" y="101" width="0.0474%" height="15" fill="rgb(249,23,13)" fg:x="1956" fg:w="1"/><text x="92.9514%" y="111.50"></text></g><g><title>askama_derive::generator::Generator::build (2 samples, 0.09%)</title><rect x="92.7014%" y="549" width="0.0948%" height="15" fill="rgb(219,9,5)" fg:x="1956" fg:w="2"/><text x="92.9514%" y="559.50"></text></g><g><title>askama_derive::generator::Generator::impl_template (1 samples, 0.05%)</title><rect x="92.7488%" y="533" width="0.0474%" height="15" fill="rgb(254,171,16)" fg:x="1957" fg:w="1"/><text x="92.9988%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::TokenStream&gt; (1 samples, 0.05%)</title><rect x="92.7488%" y="517" width="0.0474%" height="15" fill="rgb(230,171,20)" fg:x="1957" fg:w="1"/><text x="92.9988%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::imp::TokenStream&gt; (1 samples, 0.05%)</title><rect x="92.7488%" y="501" width="0.0474%" height="15" fill="rgb(210,71,41)" fg:x="1957" fg:w="1"/><text x="92.9988%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::fallback::TokenStream&gt; (1 samples, 0.05%)</title><rect x="92.7488%" y="485" width="0.0474%" height="15" fill="rgb(206,173,20)" fg:x="1957" fg:w="1"/><text x="92.9988%" y="495.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="92.7488%" y="469" width="0.0474%" height="15" fill="rgb(233,88,34)" fg:x="1957" fg:w="1"/><text x="92.9988%" y="479.50"></text></g><g><title>proc_macro2::fallback::TokenStream::take_inner (1 samples, 0.05%)</title><rect x="92.7488%" y="453" width="0.0474%" height="15" fill="rgb(223,209,46)" fg:x="1957" fg:w="1"/><text x="92.9988%" y="463.50"></text></g><g><title>core::ptr::read (1 samples, 0.05%)</title><rect x="92.7488%" y="437" width="0.0474%" height="15" fill="rgb(250,43,18)" fg:x="1957" fg:w="1"/><text x="92.9988%" y="447.50"></text></g><g><title>askama_derive::generator::TemplateArgs::new (1 samples, 0.05%)</title><rect x="92.7962%" y="549" width="0.0474%" height="15" fill="rgb(208,13,10)" fg:x="1958" fg:w="1"/><text x="93.0462%" y="559.50"></text></g><g><title>syn::attr::Attribute::parse_args_with (1 samples, 0.05%)</title><rect x="92.7962%" y="533" width="0.0474%" height="15" fill="rgb(212,200,36)" fg:x="1958" fg:w="1"/><text x="93.0462%" y="543.50"></text></g><g><title>syn::attr::MetaList::parse_args_with (1 samples, 0.05%)</title><rect x="92.7962%" y="517" width="0.0474%" height="15" fill="rgb(225,90,30)" fg:x="1958" fg:w="1"/><text x="93.0462%" y="527.50"></text></g><g><title>syn::parse::parse_scoped (1 samples, 0.05%)</title><rect x="92.7962%" y="501" width="0.0474%" height="15" fill="rgb(236,182,39)" fg:x="1958" fg:w="1"/><text x="93.0462%" y="511.50"></text></g><g><title>&lt;F as syn::parse::Parser&gt;::__parse_scoped (1 samples, 0.05%)</title><rect x="92.7962%" y="485" width="0.0474%" height="15" fill="rgb(212,144,35)" fg:x="1958" fg:w="1"/><text x="93.0462%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.05%)</title><rect x="92.7962%" y="469" width="0.0474%" height="15" fill="rgb(228,63,44)" fg:x="1958" fg:w="1"/><text x="93.0462%" y="479.50"></text></g><g><title>syn::punctuated::Punctuated&lt;T,P&gt;::parse_terminated (1 samples, 0.05%)</title><rect x="92.7962%" y="453" width="0.0474%" height="15" fill="rgb(228,109,6)" fg:x="1958" fg:w="1"/><text x="93.0462%" y="463.50"></text></g><g><title>syn::punctuated::Punctuated&lt;T,P&gt;::parse_terminated_with (1 samples, 0.05%)</title><rect x="92.7962%" y="437" width="0.0474%" height="15" fill="rgb(238,117,24)" fg:x="1958" fg:w="1"/><text x="93.0462%" y="447.50"></text></g><g><title>syn::punctuated::Punctuated&lt;T,P&gt;::new (1 samples, 0.05%)</title><rect x="92.7962%" y="421" width="0.0474%" height="15" fill="rgb(242,26,26)" fg:x="1958" fg:w="1"/><text x="93.0462%" y="431.50"></text></g><g><title>askama_derive::generator::_parsed::Parsed::new (1 samples, 0.05%)</title><rect x="92.8436%" y="533" width="0.0474%" height="15" fill="rgb(221,92,48)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="543.50"></text></g><g><title>askama_derive::parser::parse (1 samples, 0.05%)</title><rect x="92.8436%" y="517" width="0.0474%" height="15" fill="rgb(209,209,32)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="527.50"></text></g><g><title>askama_derive::parser::node::Node::parse (1 samples, 0.05%)</title><rect x="92.8436%" y="501" width="0.0474%" height="15" fill="rgb(221,70,22)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="511.50"></text></g><g><title>askama_derive::parser::node::parse_template (1 samples, 0.05%)</title><rect x="92.8436%" y="485" width="0.0474%" height="15" fill="rgb(248,145,5)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="495.50"></text></g><g><title>nom::multi::many0::{{closure}} (1 samples, 0.05%)</title><rect x="92.8436%" y="469" width="0.0474%" height="15" fill="rgb(226,116,26)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.8436%" y="453" width="0.0474%" height="15" fill="rgb(244,5,17)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="463.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.05%)</title><rect x="92.8436%" y="437" width="0.0474%" height="15" fill="rgb(252,159,33)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="447.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.05%)</title><rect x="92.8436%" y="421" width="0.0474%" height="15" fill="rgb(206,71,0)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.8436%" y="405" width="0.0474%" height="15" fill="rgb(233,118,54)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="415.50"></text></g><g><title>nom::combinator::complete::{{closure}} (1 samples, 0.05%)</title><rect x="92.8436%" y="389" width="0.0474%" height="15" fill="rgb(234,83,48)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="399.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.05%)</title><rect x="92.8436%" y="373" width="0.0474%" height="15" fill="rgb(228,3,54)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="383.50"></text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (1 samples, 0.05%)</title><rect x="92.8436%" y="357" width="0.0474%" height="15" fill="rgb(226,155,13)" fg:x="1959" fg:w="1"/><text x="93.0936%" y="367.50"></text></g><g><title>askama_derive::generator::find_used_templates (2 samples, 0.09%)</title><rect x="92.8436%" y="549" width="0.0948%" height="15" fill="rgb(241,28,37)" fg:x="1959" fg:w="2"/><text x="93.0936%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.05%)</title><rect x="92.8910%" y="533" width="0.0474%" height="15" fill="rgb(233,93,10)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="92.8910%" y="517" width="0.0474%" height="15" fill="rgb(225,113,19)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.05%)</title><rect x="92.8910%" y="501" width="0.0474%" height="15" fill="rgb(241,2,18)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="92.8910%" y="485" width="0.0474%" height="15" fill="rgb(228,207,21)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.05%)</title><rect x="92.8910%" y="469" width="0.0474%" height="15" fill="rgb(213,211,35)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.05%)</title><rect x="92.8910%" y="453" width="0.0474%" height="15" fill="rgb(209,83,10)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.05%)</title><rect x="92.8910%" y="437" width="0.0474%" height="15" fill="rgb(209,164,1)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.05%)</title><rect x="92.8910%" y="421" width="0.0474%" height="15" fill="rgb(213,184,43)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.05%)</title><rect x="92.8910%" y="405" width="0.0474%" height="15" fill="rgb(231,61,34)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.05%)</title><rect x="92.8910%" y="389" width="0.0474%" height="15" fill="rgb(235,75,3)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="399.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.05%)</title><rect x="92.8910%" y="373" width="0.0474%" height="15" fill="rgb(220,106,47)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.05%)</title><rect x="92.8910%" y="357" width="0.0474%" height="15" fill="rgb(210,196,33)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.05%)</title><rect x="92.8910%" y="341" width="0.0474%" height="15" fill="rgb(229,154,42)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.05%)</title><rect x="92.8910%" y="325" width="0.0474%" height="15" fill="rgb(228,114,26)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="335.50"></text></g><g><title>__rust_alloc (1 samples, 0.05%)</title><rect x="92.8910%" y="309" width="0.0474%" height="15" fill="rgb(208,144,1)" fg:x="1960" fg:w="1"/><text x="93.1410%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;askama_derive::config::Config&gt; (1 samples, 0.05%)</title><rect x="92.9384%" y="549" width="0.0474%" height="15" fill="rgb(239,112,37)" fg:x="1961" fg:w="1"/><text x="93.1884%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,askama_derive::config::Syntax&gt;&gt; (1 samples, 0.05%)</title><rect x="92.9384%" y="533" width="0.0474%" height="15" fill="rgb(210,96,50)" fg:x="1961" fg:w="1"/><text x="93.1884%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="92.9384%" y="517" width="0.0474%" height="15" fill="rgb(222,178,2)" fg:x="1961" fg:w="1"/><text x="93.1884%" y="527.50"></text></g><g><title>core::mem::drop (1 samples, 0.05%)</title><rect x="92.9384%" y="501" width="0.0474%" height="15" fill="rgb(226,74,18)" fg:x="1961" fg:w="1"/><text x="93.1884%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,askama_derive::config::Syntax&gt;&gt; (1 samples, 0.05%)</title><rect x="92.9384%" y="485" width="0.0474%" height="15" fill="rgb(225,67,54)" fg:x="1961" fg:w="1"/><text x="93.1884%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="92.9384%" y="469" width="0.0474%" height="15" fill="rgb(251,92,32)" fg:x="1961" fg:w="1"/><text x="93.1884%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (1 samples, 0.05%)</title><rect x="92.9384%" y="453" width="0.0474%" height="15" fill="rgb(228,149,22)" fg:x="1961" fg:w="1"/><text x="93.1884%" y="463.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1 samples, 0.05%)</title><rect x="92.9384%" y="437" width="0.0474%" height="15" fill="rgb(243,54,13)" fg:x="1961" fg:w="1"/><text x="93.1884%" y="447.50"></text></g><g><title>askama_derive::generator::build_template (11 samples, 0.52%)</title><rect x="92.5118%" y="565" width="0.5213%" height="15" fill="rgb(243,180,28)" fg:x="1952" fg:w="11"/><text x="92.7618%" y="575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.05%)</title><rect x="92.9858%" y="549" width="0.0474%" height="15" fill="rgb(208,167,24)" fg:x="1962" fg:w="1"/><text x="93.2358%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="92.9858%" y="533" width="0.0474%" height="15" fill="rgb(245,73,45)" fg:x="1962" fg:w="1"/><text x="93.2358%" y="543.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.05%)</title><rect x="92.9858%" y="517" width="0.0474%" height="15" fill="rgb(237,203,48)" fg:x="1962" fg:w="1"/><text x="93.2358%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="92.9858%" y="501" width="0.0474%" height="15" fill="rgb(211,197,16)" fg:x="1962" fg:w="1"/><text x="93.2358%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.05%)</title><rect x="92.9858%" y="485" width="0.0474%" height="15" fill="rgb(243,99,51)" fg:x="1962" fg:w="1"/><text x="93.2358%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.05%)</title><rect x="92.9858%" y="469" width="0.0474%" height="15" fill="rgb(215,123,29)" fg:x="1962" fg:w="1"/><text x="93.2358%" y="479.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (1 samples, 0.05%)</title><rect x="92.9858%" y="453" width="0.0474%" height="15" fill="rgb(239,186,37)" fg:x="1962" fg:w="1"/><text x="93.2358%" y="463.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.05%)</title><rect x="92.9858%" y="437" width="0.0474%" height="15" fill="rgb(252,136,39)" fg:x="1962" fg:w="1"/><text x="93.2358%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.05%)</title><rect x="92.9858%" y="421" width="0.0474%" height="15" fill="rgb(223,213,32)" fg:x="1962" fg:w="1"/><text x="93.2358%" y="431.50"></text></g><g><title>proc_macro2::TokenTree::set_span (1 samples, 0.05%)</title><rect x="93.0332%" y="453" width="0.0474%" height="15" fill="rgb(233,115,5)" fg:x="1963" fg:w="1"/><text x="93.2832%" y="463.50"></text></g><g><title>proc_macro2::Ident::set_span (1 samples, 0.05%)</title><rect x="93.0332%" y="437" width="0.0474%" height="15" fill="rgb(207,226,44)" fg:x="1963" fg:w="1"/><text x="93.2832%" y="447.50"></text></g><g><title>proc_macro2::fallback::TokenStreamBuilder::push_token_from_parser (1 samples, 0.05%)</title><rect x="93.0806%" y="453" width="0.0474%" height="15" fill="rgb(208,126,0)" fg:x="1964" fg:w="1"/><text x="93.3306%" y="463.50"></text></g><g><title>proc_macro2::rcvec::RcVecBuilder&lt;T&gt;::push (1 samples, 0.05%)</title><rect x="93.0806%" y="437" width="0.0474%" height="15" fill="rgb(244,66,21)" fg:x="1964" fg:w="1"/><text x="93.3306%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.05%)</title><rect x="93.0806%" y="421" width="0.0474%" height="15" fill="rgb(222,97,12)" fg:x="1964" fg:w="1"/><text x="93.3306%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.05%)</title><rect x="93.0806%" y="405" width="0.0474%" height="15" fill="rgb(219,213,19)" fg:x="1964" fg:w="1"/><text x="93.3306%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.05%)</title><rect x="93.0806%" y="389" width="0.0474%" height="15" fill="rgb(252,169,30)" fg:x="1964" fg:w="1"/><text x="93.3306%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="93.0806%" y="373" width="0.0474%" height="15" fill="rgb(206,32,51)" fg:x="1964" fg:w="1"/><text x="93.3306%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.05%)</title><rect x="93.0806%" y="357" width="0.0474%" height="15" fill="rgb(250,172,42)" fg:x="1964" fg:w="1"/><text x="93.3306%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.05%)</title><rect x="93.0806%" y="341" width="0.0474%" height="15" fill="rgb(209,34,43)" fg:x="1964" fg:w="1"/><text x="93.3306%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.05%)</title><rect x="93.0806%" y="325" width="0.0474%" height="15" fill="rgb(223,11,35)" fg:x="1964" fg:w="1"/><text x="93.3306%" y="335.50"></text></g><g><title>proc_macro2::parse::doc_comment (1 samples, 0.05%)</title><rect x="93.1280%" y="453" width="0.0474%" height="15" fill="rgb(251,219,26)" fg:x="1965" fg:w="1"/><text x="93.3780%" y="463.50"></text></g><g><title>proc_macro2::parse::doc_comment_contents (1 samples, 0.05%)</title><rect x="93.1280%" y="437" width="0.0474%" height="15" fill="rgb(231,119,3)" fg:x="1965" fg:w="1"/><text x="93.3780%" y="447.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (1 samples, 0.05%)</title><rect x="93.1280%" y="421" width="0.0474%" height="15" fill="rgb(216,97,11)" fg:x="1965" fg:w="1"/><text x="93.3780%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (1 samples, 0.05%)</title><rect x="93.1280%" y="405" width="0.0474%" height="15" fill="rgb(223,59,9)" fg:x="1965" fg:w="1"/><text x="93.3780%" y="415.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (1 samples, 0.05%)</title><rect x="93.1280%" y="389" width="0.0474%" height="15" fill="rgb(233,93,31)" fg:x="1965" fg:w="1"/><text x="93.3780%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (1 samples, 0.05%)</title><rect x="93.1280%" y="373" width="0.0474%" height="15" fill="rgb(239,81,33)" fg:x="1965" fg:w="1"/><text x="93.3780%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.05%)</title><rect x="93.1280%" y="357" width="0.0474%" height="15" fill="rgb(213,120,34)" fg:x="1965" fg:w="1"/><text x="93.3780%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.05%)</title><rect x="93.1280%" y="341" width="0.0474%" height="15" fill="rgb(243,49,53)" fg:x="1965" fg:w="1"/><text x="93.3780%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.05%)</title><rect x="93.1280%" y="325" width="0.0474%" height="15" fill="rgb(247,216,33)" fg:x="1965" fg:w="1"/><text x="93.3780%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="93.1280%" y="309" width="0.0474%" height="15" fill="rgb(226,26,14)" fg:x="1965" fg:w="1"/><text x="93.3780%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="93.2227%" y="405" width="0.0474%" height="15" fill="rgb(215,49,53)" fg:x="1967" fg:w="1"/><text x="93.4727%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.05%)</title><rect x="93.2701%" y="325" width="0.0474%" height="15" fill="rgb(245,162,40)" fg:x="1968" fg:w="1"/><text x="93.5201%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.05%)</title><rect x="93.2701%" y="309" width="0.0474%" height="15" fill="rgb(229,68,17)" fg:x="1968" fg:w="1"/><text x="93.5201%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.05%)</title><rect x="93.2701%" y="293" width="0.0474%" height="15" fill="rgb(213,182,10)" fg:x="1968" fg:w="1"/><text x="93.5201%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (6 samples, 0.28%)</title><rect x="93.1754%" y="421" width="0.2844%" height="15" fill="rgb(245,125,30)" fg:x="1966" fg:w="6"/><text x="93.4254%" y="431.50"></text></g><g><title>proc_macro2::parse::ident::{{closure}} (4 samples, 0.19%)</title><rect x="93.2701%" y="405" width="0.1896%" height="15" fill="rgb(232,202,2)" fg:x="1968" fg:w="4"/><text x="93.5201%" y="415.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (4 samples, 0.19%)</title><rect x="93.2701%" y="389" width="0.1896%" height="15" fill="rgb(237,140,51)" fg:x="1968" fg:w="4"/><text x="93.5201%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (4 samples, 0.19%)</title><rect x="93.2701%" y="373" width="0.1896%" height="15" fill="rgb(236,157,25)" fg:x="1968" fg:w="4"/><text x="93.5201%" y="383.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (4 samples, 0.19%)</title><rect x="93.2701%" y="357" width="0.1896%" height="15" fill="rgb(219,209,0)" fg:x="1968" fg:w="4"/><text x="93.5201%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (4 samples, 0.19%)</title><rect x="93.2701%" y="341" width="0.1896%" height="15" fill="rgb(240,116,54)" fg:x="1968" fg:w="4"/><text x="93.5201%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.14%)</title><rect x="93.3175%" y="325" width="0.1422%" height="15" fill="rgb(216,10,36)" fg:x="1969" fg:w="3"/><text x="93.5675%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.14%)</title><rect x="93.3175%" y="309" width="0.1422%" height="15" fill="rgb(222,72,44)" fg:x="1969" fg:w="3"/><text x="93.5675%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.05%)</title><rect x="93.4597%" y="197" width="0.0474%" height="15" fill="rgb(232,159,9)" fg:x="1972" fg:w="1"/><text x="93.7097%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.05%)</title><rect x="93.4597%" y="181" width="0.0474%" height="15" fill="rgb(210,39,32)" fg:x="1972" fg:w="1"/><text x="93.7097%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.05%)</title><rect x="93.4597%" y="165" width="0.0474%" height="15" fill="rgb(216,194,45)" fg:x="1972" fg:w="1"/><text x="93.7097%" y="175.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="93.4597%" y="149" width="0.0474%" height="15" fill="rgb(218,18,35)" fg:x="1972" fg:w="1"/><text x="93.7097%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="93.4597%" y="133" width="0.0474%" height="15" fill="rgb(207,83,51)" fg:x="1972" fg:w="1"/><text x="93.7097%" y="143.50"></text></g><g><title>proc_macro2::Ident::new (2 samples, 0.09%)</title><rect x="93.4597%" y="405" width="0.0948%" height="15" fill="rgb(225,63,43)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="415.50"></text></g><g><title>proc_macro2::imp::Ident::new (2 samples, 0.09%)</title><rect x="93.4597%" y="389" width="0.0948%" height="15" fill="rgb(207,57,36)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="399.50"></text></g><g><title>proc_macro2::fallback::Ident::new (2 samples, 0.09%)</title><rect x="93.4597%" y="373" width="0.0948%" height="15" fill="rgb(216,99,33)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="383.50"></text></g><g><title>proc_macro2::fallback::Ident::_new (2 samples, 0.09%)</title><rect x="93.4597%" y="357" width="0.0948%" height="15" fill="rgb(225,42,16)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.09%)</title><rect x="93.4597%" y="341" width="0.0948%" height="15" fill="rgb(220,201,45)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.09%)</title><rect x="93.4597%" y="325" width="0.0948%" height="15" fill="rgb(225,33,4)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.09%)</title><rect x="93.4597%" y="309" width="0.0948%" height="15" fill="rgb(224,33,50)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.09%)</title><rect x="93.4597%" y="293" width="0.0948%" height="15" fill="rgb(246,198,51)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.09%)</title><rect x="93.4597%" y="277" width="0.0948%" height="15" fill="rgb(205,22,4)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.09%)</title><rect x="93.4597%" y="261" width="0.0948%" height="15" fill="rgb(206,3,8)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="93.4597%" y="245" width="0.0948%" height="15" fill="rgb(251,23,15)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="93.4597%" y="229" width="0.0948%" height="15" fill="rgb(252,88,28)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.09%)</title><rect x="93.4597%" y="213" width="0.0948%" height="15" fill="rgb(212,127,14)" fg:x="1972" fg:w="2"/><text x="93.7097%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.05%)</title><rect x="93.5071%" y="197" width="0.0474%" height="15" fill="rgb(247,145,37)" fg:x="1973" fg:w="1"/><text x="93.7571%" y="207.50"></text></g><g><title>proc_macro2::parse::ident (9 samples, 0.43%)</title><rect x="93.1754%" y="437" width="0.4265%" height="15" fill="rgb(209,117,53)" fg:x="1966" fg:w="9"/><text x="93.4254%" y="447.50"></text></g><g><title>proc_macro2::parse::ident_any (3 samples, 0.14%)</title><rect x="93.4597%" y="421" width="0.1422%" height="15" fill="rgb(212,90,42)" fg:x="1972" fg:w="3"/><text x="93.7097%" y="431.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (1 samples, 0.05%)</title><rect x="93.5545%" y="405" width="0.0474%" height="15" fill="rgb(218,164,37)" fg:x="1974" fg:w="1"/><text x="93.8045%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (1 samples, 0.05%)</title><rect x="93.5545%" y="389" width="0.0474%" height="15" fill="rgb(246,65,34)" fg:x="1974" fg:w="1"/><text x="93.8045%" y="399.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (1 samples, 0.05%)</title><rect x="93.5545%" y="373" width="0.0474%" height="15" fill="rgb(231,100,33)" fg:x="1974" fg:w="1"/><text x="93.8045%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (1 samples, 0.05%)</title><rect x="93.5545%" y="357" width="0.0474%" height="15" fill="rgb(228,126,14)" fg:x="1974" fg:w="1"/><text x="93.8045%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.05%)</title><rect x="93.5545%" y="341" width="0.0474%" height="15" fill="rgb(215,173,21)" fg:x="1974" fg:w="1"/><text x="93.8045%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.05%)</title><rect x="93.5545%" y="325" width="0.0474%" height="15" fill="rgb(210,6,40)" fg:x="1974" fg:w="1"/><text x="93.8045%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.05%)</title><rect x="93.5545%" y="309" width="0.0474%" height="15" fill="rgb(212,48,18)" fg:x="1974" fg:w="1"/><text x="93.8045%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="93.5545%" y="293" width="0.0474%" height="15" fill="rgb(230,214,11)" fg:x="1974" fg:w="1"/><text x="93.8045%" y="303.50"></text></g><g><title>proc_macro2::parse::byte_string (3 samples, 0.14%)</title><rect x="93.6967%" y="405" width="0.1422%" height="15" fill="rgb(254,105,39)" fg:x="1977" fg:w="3"/><text x="93.9467%" y="415.50"></text></g><g><title>proc_macro2::parse::Cursor::parse (3 samples, 0.14%)</title><rect x="93.6967%" y="389" width="0.1422%" height="15" fill="rgb(245,158,5)" fg:x="1977" fg:w="3"/><text x="93.9467%" y="399.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (3 samples, 0.14%)</title><rect x="93.6967%" y="373" width="0.1422%" height="15" fill="rgb(249,208,11)" fg:x="1977" fg:w="3"/><text x="93.9467%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (3 samples, 0.14%)</title><rect x="93.6967%" y="357" width="0.1422%" height="15" fill="rgb(210,39,28)" fg:x="1977" fg:w="3"/><text x="93.9467%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (3 samples, 0.14%)</title><rect x="93.6967%" y="341" width="0.1422%" height="15" fill="rgb(211,56,53)" fg:x="1977" fg:w="3"/><text x="93.9467%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (3 samples, 0.14%)</title><rect x="93.6967%" y="325" width="0.1422%" height="15" fill="rgb(226,201,30)" fg:x="1977" fg:w="3"/><text x="93.9467%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.09%)</title><rect x="93.7441%" y="309" width="0.0948%" height="15" fill="rgb(239,101,34)" fg:x="1978" fg:w="2"/><text x="93.9941%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.05%)</title><rect x="93.7915%" y="293" width="0.0474%" height="15" fill="rgb(226,209,5)" fg:x="1979" fg:w="1"/><text x="94.0415%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.05%)</title><rect x="93.7915%" y="277" width="0.0474%" height="15" fill="rgb(250,105,47)" fg:x="1979" fg:w="1"/><text x="94.0415%" y="287.50"></text></g><g><title>proc_macro2::parse::int (2 samples, 0.09%)</title><rect x="93.8389%" y="405" width="0.0948%" height="15" fill="rgb(230,72,3)" fg:x="1980" fg:w="2"/><text x="94.0889%" y="415.50"></text></g><g><title>proc_macro2::parse::digits (2 samples, 0.09%)</title><rect x="93.8389%" y="389" width="0.0948%" height="15" fill="rgb(232,218,39)" fg:x="1980" fg:w="2"/><text x="94.0889%" y="399.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (2 samples, 0.09%)</title><rect x="93.8389%" y="373" width="0.0948%" height="15" fill="rgb(248,166,6)" fg:x="1980" fg:w="2"/><text x="94.0889%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (2 samples, 0.09%)</title><rect x="93.8389%" y="357" width="0.0948%" height="15" fill="rgb(247,89,20)" fg:x="1980" fg:w="2"/><text x="94.0889%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (1 samples, 0.05%)</title><rect x="93.8863%" y="341" width="0.0474%" height="15" fill="rgb(248,130,54)" fg:x="1981" fg:w="1"/><text x="94.1363%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (1 samples, 0.05%)</title><rect x="93.8863%" y="325" width="0.0474%" height="15" fill="rgb(234,196,4)" fg:x="1981" fg:w="1"/><text x="94.1363%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.05%)</title><rect x="93.8863%" y="309" width="0.0474%" height="15" fill="rgb(250,143,31)" fg:x="1981" fg:w="1"/><text x="94.1363%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.05%)</title><rect x="93.8863%" y="293" width="0.0474%" height="15" fill="rgb(211,110,34)" fg:x="1981" fg:w="1"/><text x="94.1363%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.05%)</title><rect x="93.8863%" y="277" width="0.0474%" height="15" fill="rgb(215,124,48)" fg:x="1981" fg:w="1"/><text x="94.1363%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (13 samples, 0.62%)</title><rect x="95.3555%" y="341" width="0.6161%" height="15" fill="rgb(216,46,13)" fg:x="2012" fg:w="13"/><text x="95.6055%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (7 samples, 0.33%)</title><rect x="95.6398%" y="325" width="0.3318%" height="15" fill="rgb(205,184,25)" fg:x="2018" fg:w="7"/><text x="95.8898%" y="335.50"></text></g><g><title>core::mem::size_of (1 samples, 0.05%)</title><rect x="95.9242%" y="309" width="0.0474%" height="15" fill="rgb(228,1,10)" fg:x="2024" fg:w="1"/><text x="96.1742%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (17 samples, 0.81%)</title><rect x="96.0190%" y="325" width="0.8057%" height="15" fill="rgb(213,116,27)" fg:x="2026" fg:w="17"/><text x="96.2690%" y="335.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (7 samples, 0.33%)</title><rect x="96.4929%" y="309" width="0.3318%" height="15" fill="rgb(241,95,50)" fg:x="2036" fg:w="7"/><text x="96.7429%" y="319.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::from_u32_unchecked (3 samples, 0.14%)</title><rect x="96.6825%" y="293" width="0.1422%" height="15" fill="rgb(238,48,32)" fg:x="2040" fg:w="3"/><text x="96.9325%" y="303.50"></text></g><g><title>core::char::convert::from_u32_unchecked (3 samples, 0.14%)</title><rect x="96.6825%" y="277" width="0.1422%" height="15" fill="rgb(235,113,49)" fg:x="2040" fg:w="3"/><text x="96.9325%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="97.3934%" y="309" width="0.0948%" height="15" fill="rgb(205,127,43)" fg:x="2055" fg:w="2"/><text x="97.6434%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (5 samples, 0.24%)</title><rect x="97.6777%" y="293" width="0.2370%" height="15" fill="rgb(250,162,2)" fg:x="2061" fg:w="5"/><text x="97.9277%" y="303.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 3.41%)</title><rect x="94.6919%" y="357" width="3.4123%" height="15" fill="rgb(220,13,41)" fg:x="1998" fg:w="72"/><text x="94.9419%" y="367.50">&lt;co..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 2.13%)</title><rect x="95.9716%" y="341" width="2.1327%" height="15" fill="rgb(249,221,25)" fg:x="2025" fg:w="45"/><text x="96.2216%" y="351.50">&lt;..</text></g><g><title>core::str::validations::next_code_point (27 samples, 1.28%)</title><rect x="96.8246%" y="325" width="1.2796%" height="15" fill="rgb(215,208,19)" fg:x="2043" fg:w="27"/><text x="97.0746%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.62%)</title><rect x="97.4882%" y="309" width="0.6161%" height="15" fill="rgb(236,175,2)" fg:x="2057" fg:w="13"/><text x="97.7382%" y="319.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4 samples, 0.19%)</title><rect x="97.9147%" y="293" width="0.1896%" height="15" fill="rgb(241,52,2)" fg:x="2066" fg:w="4"/><text x="98.1647%" y="303.50"></text></g><g><title>proc_macro2::parse::literal (124 samples, 5.88%)</title><rect x="93.6019%" y="437" width="5.8768%" height="15" fill="rgb(248,140,14)" fg:x="1975" fg:w="124"/><text x="93.8519%" y="447.50">proc_ma..</text></g><g><title>proc_macro2::parse::literal_nocapture (122 samples, 5.78%)</title><rect x="93.6967%" y="421" width="5.7820%" height="15" fill="rgb(253,22,42)" fg:x="1977" fg:w="122"/><text x="93.9467%" y="431.50">proc_ma..</text></g><g><title>proc_macro2::parse::string (117 samples, 5.55%)</title><rect x="93.9336%" y="405" width="5.5450%" height="15" fill="rgb(234,61,47)" fg:x="1982" fg:w="117"/><text x="94.1836%" y="415.50">proc_ma..</text></g><g><title>proc_macro2::parse::cooked_string (117 samples, 5.55%)</title><rect x="93.9336%" y="389" width="5.5450%" height="15" fill="rgb(208,226,15)" fg:x="1982" fg:w="117"/><text x="94.1836%" y="399.50">proc_ma..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 5.17%)</title><rect x="94.3128%" y="373" width="5.1659%" height="15" fill="rgb(217,221,4)" fg:x="1990" fg:w="109"/><text x="94.5628%" y="383.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::take (29 samples, 1.37%)</title><rect x="98.1043%" y="357" width="1.3744%" height="15" fill="rgb(212,174,34)" fg:x="2070" fg:w="29"/><text x="98.3543%" y="367.50"></text></g><g><title>core::mem::replace (29 samples, 1.37%)</title><rect x="98.1043%" y="341" width="1.3744%" height="15" fill="rgb(253,83,4)" fg:x="2070" fg:w="29"/><text x="98.3543%" y="351.50"></text></g><g><title>core::ptr::write (27 samples, 1.28%)</title><rect x="98.1991%" y="325" width="1.2796%" height="15" fill="rgb(250,195,49)" fg:x="2072" fg:w="27"/><text x="98.4491%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (1 samples, 0.05%)</title><rect x="99.4787%" y="405" width="0.0474%" height="15" fill="rgb(241,192,25)" fg:x="2099" fg:w="1"/><text x="99.7287%" y="415.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.05%)</title><rect x="99.4787%" y="389" width="0.0474%" height="15" fill="rgb(208,124,10)" fg:x="2099" fg:w="1"/><text x="99.7287%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.05%)</title><rect x="99.6209%" y="341" width="0.0474%" height="15" fill="rgb(222,33,0)" fg:x="2102" fg:w="1"/><text x="99.8709%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.05%)</title><rect x="99.6209%" y="325" width="0.0474%" height="15" fill="rgb(234,209,28)" fg:x="2102" fg:w="1"/><text x="99.8709%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.05%)</title><rect x="99.6209%" y="309" width="0.0474%" height="15" fill="rgb(224,11,23)" fg:x="2102" fg:w="1"/><text x="99.8709%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (142 samples, 6.73%)</title><rect x="93.0332%" y="565" width="6.7299%" height="15" fill="rgb(232,99,1)" fg:x="1963" fg:w="142"/><text x="93.2832%" y="575.50">core::str..</text></g><g><title>&lt;proc_macro2::TokenStream as core::str::traits::FromStr&gt;::from_str (142 samples, 6.73%)</title><rect x="93.0332%" y="549" width="6.7299%" height="15" fill="rgb(237,95,45)" fg:x="1963" fg:w="142"/><text x="93.2832%" y="559.50">&lt;proc_mac..</text></g><g><title>core::str::&lt;impl str&gt;::parse (142 samples, 6.73%)</title><rect x="93.0332%" y="533" width="6.7299%" height="15" fill="rgb(208,109,11)" fg:x="1963" fg:w="142"/><text x="93.2832%" y="543.50">core::str..</text></g><g><title>&lt;proc_macro2::imp::TokenStream as core::str::traits::FromStr&gt;::from_str (142 samples, 6.73%)</title><rect x="93.0332%" y="517" width="6.7299%" height="15" fill="rgb(216,190,48)" fg:x="1963" fg:w="142"/><text x="93.2832%" y="527.50">&lt;proc_mac..</text></g><g><title>core::str::&lt;impl str&gt;::parse (142 samples, 6.73%)</title><rect x="93.0332%" y="501" width="6.7299%" height="15" fill="rgb(251,171,36)" fg:x="1963" fg:w="142"/><text x="93.2832%" y="511.50">core::str..</text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::str::traits::FromStr&gt;::from_str (142 samples, 6.73%)</title><rect x="93.0332%" y="485" width="6.7299%" height="15" fill="rgb(230,62,22)" fg:x="1963" fg:w="142"/><text x="93.2832%" y="495.50">&lt;proc_mac..</text></g><g><title>proc_macro2::parse::token_stream (142 samples, 6.73%)</title><rect x="93.0332%" y="469" width="6.7299%" height="15" fill="rgb(225,114,35)" fg:x="1963" fg:w="142"/><text x="93.2832%" y="479.50">proc_macr..</text></g><g><title>proc_macro2::parse::leaf_token (139 samples, 6.59%)</title><rect x="93.1754%" y="453" width="6.5877%" height="15" fill="rgb(215,118,42)" fg:x="1966" fg:w="139"/><text x="93.4254%" y="463.50">proc_macr..</text></g><g><title>proc_macro2::parse::punct (6 samples, 0.28%)</title><rect x="99.4787%" y="437" width="0.2844%" height="15" fill="rgb(243,119,21)" fg:x="2099" fg:w="6"/><text x="99.7287%" y="447.50"></text></g><g><title>proc_macro2::parse::punct_char (6 samples, 0.28%)</title><rect x="99.4787%" y="421" width="0.2844%" height="15" fill="rgb(252,177,53)" fg:x="2099" fg:w="6"/><text x="99.7287%" y="431.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (5 samples, 0.24%)</title><rect x="99.5261%" y="405" width="0.2370%" height="15" fill="rgb(237,209,29)" fg:x="2100" fg:w="5"/><text x="99.7761%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (5 samples, 0.24%)</title><rect x="99.5261%" y="389" width="0.2370%" height="15" fill="rgb(212,65,23)" fg:x="2100" fg:w="5"/><text x="99.7761%" y="399.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (4 samples, 0.19%)</title><rect x="99.5735%" y="373" width="0.1896%" height="15" fill="rgb(230,222,46)" fg:x="2101" fg:w="4"/><text x="99.8235%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (4 samples, 0.19%)</title><rect x="99.5735%" y="357" width="0.1896%" height="15" fill="rgb(215,135,32)" fg:x="2101" fg:w="4"/><text x="99.8235%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.09%)</title><rect x="99.6682%" y="341" width="0.0948%" height="15" fill="rgb(246,101,22)" fg:x="2103" fg:w="2"/><text x="99.9182%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.09%)</title><rect x="99.6682%" y="325" width="0.0948%" height="15" fill="rgb(206,107,13)" fg:x="2103" fg:w="2"/><text x="99.9182%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.05%)</title><rect x="99.7156%" y="309" width="0.0474%" height="15" fill="rgb(250,100,44)" fg:x="2104" fg:w="1"/><text x="99.9656%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.05%)</title><rect x="99.7156%" y="293" width="0.0474%" height="15" fill="rgb(231,147,38)" fg:x="2104" fg:w="1"/><text x="99.9656%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.05%)</title><rect x="99.7630%" y="437" width="0.0474%" height="15" fill="rgb(229,8,40)" fg:x="2105" fg:w="1"/><text x="100.0130%" y="447.50"></text></g><g><title>syn::parse::ParseBuffer::call (2 samples, 0.09%)</title><rect x="99.7630%" y="469" width="0.0948%" height="15" fill="rgb(221,135,30)" fg:x="2105" fg:w="2"/><text x="100.0130%" y="479.50"></text></g><g><title>syn::attr::parsing::single_parse_outer (2 samples, 0.09%)</title><rect x="99.7630%" y="453" width="0.0948%" height="15" fill="rgb(249,193,18)" fg:x="2105" fg:w="2"/><text x="100.0130%" y="463.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.05%)</title><rect x="99.8104%" y="437" width="0.0474%" height="15" fill="rgb(209,133,39)" fg:x="2106" fg:w="1"/><text x="100.0604%" y="447.50"></text></g><g><title>syn::attr::parsing::&lt;impl syn::parse::Parse for syn::attr::Meta&gt;::parse (1 samples, 0.05%)</title><rect x="99.8104%" y="421" width="0.0474%" height="15" fill="rgb(232,100,14)" fg:x="2106" fg:w="1"/><text x="100.0604%" y="431.50"></text></g><g><title>syn::parse::ParseBuffer::call (1 samples, 0.05%)</title><rect x="99.8104%" y="405" width="0.0474%" height="15" fill="rgb(224,185,1)" fg:x="2106" fg:w="1"/><text x="100.0604%" y="415.50"></text></g><g><title>syn::path::parsing::&lt;impl syn::path::Path&gt;::parse_mod_style (1 samples, 0.05%)</title><rect x="99.8104%" y="389" width="0.0474%" height="15" fill="rgb(223,139,8)" fg:x="2106" fg:w="1"/><text x="100.0604%" y="399.50"></text></g><g><title>syn::parse::ParseBuffer::peek (1 samples, 0.05%)</title><rect x="99.8104%" y="373" width="0.0474%" height="15" fill="rgb(232,213,38)" fg:x="2106" fg:w="1"/><text x="100.0604%" y="383.50"></text></g><g><title>syn::ident::parsing::&lt;impl syn::token::Token for proc_macro2::Ident&gt;::peek (1 samples, 0.05%)</title><rect x="99.8104%" y="357" width="0.0474%" height="15" fill="rgb(207,94,22)" fg:x="2106" fg:w="1"/><text x="100.0604%" y="367.50"></text></g><g><title>syn::ident::parsing::accept_as_ident (1 samples, 0.05%)</title><rect x="99.8104%" y="341" width="0.0474%" height="15" fill="rgb(219,183,54)" fg:x="2106" fg:w="1"/><text x="100.0604%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.05%)</title><rect x="99.8104%" y="325" width="0.0474%" height="15" fill="rgb(216,185,54)" fg:x="2106" fg:w="1"/><text x="100.0604%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.05%)</title><rect x="99.8104%" y="309" width="0.0474%" height="15" fill="rgb(254,217,39)" fg:x="2106" fg:w="1"/><text x="100.0604%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.05%)</title><rect x="99.8104%" y="293" width="0.0474%" height="15" fill="rgb(240,178,23)" fg:x="2106" fg:w="1"/><text x="100.0604%" y="303.50"></text></g><g><title>askama_derive::derive_template (156 samples, 7.39%)</title><rect x="92.5118%" y="597" width="7.3934%" height="15" fill="rgb(218,11,47)" fg:x="1952" fg:w="156"/><text x="92.7618%" y="607.50">askama_der..</text></g><g><title>askama_derive::generator::derive_template (156 samples, 7.39%)</title><rect x="92.5118%" y="581" width="7.3934%" height="15" fill="rgb(218,51,51)" fg:x="1952" fg:w="156"/><text x="92.7618%" y="591.50">askama_der..</text></g><g><title>syn::parse2 (3 samples, 0.14%)</title><rect x="99.7630%" y="565" width="0.1422%" height="15" fill="rgb(238,126,27)" fg:x="2105" fg:w="3"/><text x="100.0130%" y="575.50"></text></g><g><title>&lt;F as syn::parse::Parser&gt;::parse2 (3 samples, 0.14%)</title><rect x="99.7630%" y="549" width="0.1422%" height="15" fill="rgb(249,202,22)" fg:x="2105" fg:w="3"/><text x="100.0130%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.14%)</title><rect x="99.7630%" y="533" width="0.1422%" height="15" fill="rgb(254,195,49)" fg:x="2105" fg:w="3"/><text x="100.0130%" y="543.50"></text></g><g><title>syn::derive::parsing::&lt;impl syn::parse::Parse for syn::derive::DeriveInput&gt;::parse (3 samples, 0.14%)</title><rect x="99.7630%" y="517" width="0.1422%" height="15" fill="rgb(208,123,14)" fg:x="2105" fg:w="3"/><text x="100.0130%" y="527.50"></text></g><g><title>syn::parse::ParseBuffer::call (3 samples, 0.14%)</title><rect x="99.7630%" y="501" width="0.1422%" height="15" fill="rgb(224,200,8)" fg:x="2105" fg:w="3"/><text x="100.0130%" y="511.50"></text></g><g><title>syn::attr::Attribute::parse_outer (3 samples, 0.14%)</title><rect x="99.7630%" y="485" width="0.1422%" height="15" fill="rgb(217,61,36)" fg:x="2105" fg:w="3"/><text x="100.0130%" y="495.50"></text></g><g><title>syn::parse::ParseBuffer::peek (1 samples, 0.05%)</title><rect x="99.8578%" y="469" width="0.0474%" height="15" fill="rgb(206,35,45)" fg:x="2107" fg:w="1"/><text x="100.1078%" y="479.50"></text></g><g><title>&lt;syn::token::Pound as syn::token::Token&gt;::peek (1 samples, 0.05%)</title><rect x="99.8578%" y="453" width="0.0474%" height="15" fill="rgb(217,65,33)" fg:x="2107" fg:w="1"/><text x="100.1078%" y="463.50"></text></g><g><title>syn::token::parsing::peek_punct (1 samples, 0.05%)</title><rect x="99.8578%" y="437" width="0.0474%" height="15" fill="rgb(222,158,48)" fg:x="2107" fg:w="1"/><text x="100.1078%" y="447.50"></text></g><g><title>syn::buffer::Cursor::punct (1 samples, 0.05%)</title><rect x="99.8578%" y="421" width="0.0474%" height="15" fill="rgb(254,2,54)" fg:x="2107" fg:w="1"/><text x="100.1078%" y="431.50"></text></g><g><title>syn::buffer::Cursor::ignore_none (1 samples, 0.05%)</title><rect x="99.8578%" y="405" width="0.0474%" height="15" fill="rgb(250,143,38)" fg:x="2107" fg:w="1"/><text x="100.1078%" y="415.50"></text></g><g><title>syn::buffer::Cursor::entry (1 samples, 0.05%)</title><rect x="99.8578%" y="389" width="0.0474%" height="15" fill="rgb(248,25,0)" fg:x="2107" fg:w="1"/><text x="100.1078%" y="399.50"></text></g><g><title>proc_macro2::rcvec::RcVecMut&lt;T&gt;::extend (1 samples, 0.05%)</title><rect x="99.9052%" y="533" width="0.0474%" height="15" fill="rgb(206,152,27)" fg:x="2108" fg:w="1"/><text x="100.1552%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.05%)</title><rect x="99.9052%" y="517" width="0.0474%" height="15" fill="rgb(240,77,30)" fg:x="2108" fg:w="1"/><text x="100.1552%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="99.9052%" y="501" width="0.0474%" height="15" fill="rgb(231,5,3)" fg:x="2108" fg:w="1"/><text x="100.1552%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.05%)</title><rect x="99.9052%" y="485" width="0.0474%" height="15" fill="rgb(207,226,32)" fg:x="2108" fg:w="1"/><text x="100.1552%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="99.9052%" y="469" width="0.0474%" height="15" fill="rgb(222,207,47)" fg:x="2108" fg:w="1"/><text x="100.1552%" y="479.50"></text></g><g><title>all (2,110 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(229,115,45)" fg:x="0" fg:w="2110"/><text x="0.2500%" y="927.50"></text></g><g><title>askama_bench (2,110 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(224,191,6)" fg:x="0" fg:w="2110"/><text x="0.2500%" y="911.50">askama_bench</text></g><g><title>_start (162 samples, 7.68%)</title><rect x="92.3223%" y="885" width="7.6777%" height="15" fill="rgb(230,227,24)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="895.50">_start</text></g><g><title>__libc_start_main (162 samples, 7.68%)</title><rect x="92.3223%" y="869" width="7.6777%" height="15" fill="rgb(228,80,19)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="879.50">__libc_star..</text></g><g><title>[libc.so.6] (162 samples, 7.68%)</title><rect x="92.3223%" y="853" width="7.6777%" height="15" fill="rgb(247,229,0)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="863.50">[libc.so.6]</text></g><g><title>main (162 samples, 7.68%)</title><rect x="92.3223%" y="837" width="7.6777%" height="15" fill="rgb(237,194,15)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="847.50">main</text></g><g><title>std::rt::lang_start (162 samples, 7.68%)</title><rect x="92.3223%" y="821" width="7.6777%" height="15" fill="rgb(219,203,20)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="831.50">std::rt::la..</text></g><g><title>std::rt::lang_start_internal (162 samples, 7.68%)</title><rect x="92.3223%" y="805" width="7.6777%" height="15" fill="rgb(234,128,8)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="815.50">std::rt::la..</text></g><g><title>std::panic::catch_unwind (162 samples, 7.68%)</title><rect x="92.3223%" y="789" width="7.6777%" height="15" fill="rgb(248,202,8)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="799.50">std::panic:..</text></g><g><title>std::panicking::try (162 samples, 7.68%)</title><rect x="92.3223%" y="773" width="7.6777%" height="15" fill="rgb(206,104,37)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="783.50">std::panick..</text></g><g><title>std::panicking::try::do_call (162 samples, 7.68%)</title><rect x="92.3223%" y="757" width="7.6777%" height="15" fill="rgb(223,8,27)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="767.50">std::panick..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (162 samples, 7.68%)</title><rect x="92.3223%" y="741" width="7.6777%" height="15" fill="rgb(216,217,28)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="751.50">std::rt::la..</text></g><g><title>std::panic::catch_unwind (162 samples, 7.68%)</title><rect x="92.3223%" y="725" width="7.6777%" height="15" fill="rgb(249,199,1)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="735.50">std::panic:..</text></g><g><title>std::panicking::try (162 samples, 7.68%)</title><rect x="92.3223%" y="709" width="7.6777%" height="15" fill="rgb(240,85,17)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="719.50">std::panick..</text></g><g><title>std::panicking::try::do_call (162 samples, 7.68%)</title><rect x="92.3223%" y="693" width="7.6777%" height="15" fill="rgb(206,108,45)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="703.50">std::panick..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (162 samples, 7.68%)</title><rect x="92.3223%" y="677" width="7.6777%" height="15" fill="rgb(245,210,41)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="687.50">core::ops::..</text></g><g><title>std::rt::lang_start::{{closure}} (162 samples, 7.68%)</title><rect x="92.3223%" y="661" width="7.6777%" height="15" fill="rgb(206,13,37)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="671.50">std::rt::la..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (162 samples, 7.68%)</title><rect x="92.3223%" y="645" width="7.6777%" height="15" fill="rgb(250,61,18)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="655.50">std::sys_co..</text></g><g><title>core::ops::function::FnOnce::call_once (162 samples, 7.68%)</title><rect x="92.3223%" y="629" width="7.6777%" height="15" fill="rgb(235,172,48)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="639.50">core::ops::..</text></g><g><title>askama_bench::main (162 samples, 7.68%)</title><rect x="92.3223%" y="613" width="7.6777%" height="15" fill="rgb(249,201,17)" fg:x="1948" fg:w="162"/><text x="92.5723%" y="623.50">askama_benc..</text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::TokenStream&gt; (2 samples, 0.09%)</title><rect x="99.9052%" y="597" width="0.0948%" height="15" fill="rgb(219,208,6)" fg:x="2108" fg:w="2"/><text x="100.1552%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::imp::TokenStream&gt; (2 samples, 0.09%)</title><rect x="99.9052%" y="581" width="0.0948%" height="15" fill="rgb(248,31,23)" fg:x="2108" fg:w="2"/><text x="100.1552%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::fallback::TokenStream&gt; (2 samples, 0.09%)</title><rect x="99.9052%" y="565" width="0.0948%" height="15" fill="rgb(245,15,42)" fg:x="2108" fg:w="2"/><text x="100.1552%" y="575.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="99.9052%" y="549" width="0.0948%" height="15" fill="rgb(222,217,39)" fg:x="2108" fg:w="2"/><text x="100.1552%" y="559.50"></text></g><g><title>proc_macro2::rcvec::RcVecMut&lt;T&gt;::pop (1 samples, 0.05%)</title><rect x="99.9526%" y="533" width="0.0474%" height="15" fill="rgb(210,219,27)" fg:x="2109" fg:w="1"/><text x="100.2026%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.05%)</title><rect x="99.9526%" y="517" width="0.0474%" height="15" fill="rgb(252,166,36)" fg:x="2109" fg:w="1"/><text x="100.2026%" y="527.50"></text></g><g><title>core::ptr::read (1 samples, 0.05%)</title><rect x="99.9526%" y="501" width="0.0474%" height="15" fill="rgb(245,132,34)" fg:x="2109" fg:w="1"/><text x="100.2026%" y="511.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="99.9526%" y="485" width="0.0474%" height="15" fill="rgb(236,54,3)" fg:x="2109" fg:w="1"/><text x="100.2026%" y="495.50"></text></g></svg></svg>