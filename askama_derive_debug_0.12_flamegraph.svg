<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="4000"><g><title>[askama_bench] (4 samples, 0.10%)</title><rect x="0.0000%" y="869" width="0.1000%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="879.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2000%" y="837" width="0.0250%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="1"/><text x="0.4500%" y="847.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2000%" y="821" width="0.0250%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="1"/><text x="0.4500%" y="831.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2000%" y="805" width="0.0250%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="1"/><text x="0.4500%" y="815.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="0.2000%" y="789" width="0.0250%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="1"/><text x="0.4500%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2000%" y="773" width="0.0250%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="1"/><text x="0.4500%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2000%" y="757" width="0.0250%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="0.4500%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2000%" y="741" width="0.0250%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="1"/><text x="0.4500%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.05%)</title><rect x="0.2000%" y="853" width="0.0500%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="2"/><text x="0.4500%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.2250%" y="837" width="0.0250%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="1"/><text x="0.4750%" y="847.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.17%)</title><rect x="0.1000%" y="869" width="0.1750%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="7"/><text x="0.3500%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.2500%" y="853" width="0.0250%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="1"/><text x="0.5000%" y="863.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="0.2750%" y="853" width="0.0250%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="1"/><text x="0.5250%" y="863.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="837" width="0.0250%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="1"/><text x="0.5250%" y="847.50"></text></g><g><title>nom::combinator::complete::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="821" width="0.0250%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="1"/><text x="0.5250%" y="831.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="805" width="0.0250%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="1"/><text x="0.5250%" y="815.50"></text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="789" width="0.0250%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="1"/><text x="0.5250%" y="799.50"></text></g><g><title>askama_derive::parser::node::expr_node (1 samples, 0.03%)</title><rect x="0.2750%" y="773" width="0.0250%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="1"/><text x="0.5250%" y="783.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="757" width="0.0250%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="1"/><text x="0.5250%" y="767.50"></text></g><g><title>&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="741" width="0.0250%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="1"/><text x="0.5250%" y="751.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="725" width="0.0250%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="1"/><text x="0.5250%" y="735.50"></text></g><g><title>nom::combinator::cut::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="709" width="0.0250%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="1"/><text x="0.5250%" y="719.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="693" width="0.0250%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="0.5250%" y="703.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="677" width="0.0250%" height="15" fill="rgb(247,18,42)" fg:x="11" fg:w="1"/><text x="0.5250%" y="687.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="661" width="0.0250%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="1"/><text x="0.5250%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="645" width="0.0250%" height="15" fill="rgb(249,31,29)" fg:x="11" fg:w="1"/><text x="0.5250%" y="655.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="629" width="0.0250%" height="15" fill="rgb(225,111,53)" fg:x="11" fg:w="1"/><text x="0.5250%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="613" width="0.0250%" height="15" fill="rgb(238,160,17)" fg:x="11" fg:w="1"/><text x="0.5250%" y="623.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="0.2750%" y="597" width="0.0250%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="1"/><text x="0.5250%" y="607.50"></text></g><g><title>askama_derive::parser::expr::Expr::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="581" width="0.0250%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="0.5250%" y="591.50"></text></g><g><title>askama_derive::parser::expr::expr_any (1 samples, 0.03%)</title><rect x="0.2750%" y="565" width="0.0250%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="1"/><text x="0.5250%" y="575.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="549" width="0.0250%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="1"/><text x="0.5250%" y="559.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="0.2750%" y="533" width="0.0250%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="1"/><text x="0.5250%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="517" width="0.0250%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="1"/><text x="0.5250%" y="527.50"></text></g><g><title>nom::combinator::map::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="501" width="0.0250%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="1"/><text x="0.5250%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="485" width="0.0250%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="1"/><text x="0.5250%" y="495.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="469" width="0.0250%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="1"/><text x="0.5250%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="453" width="0.0250%" height="15" fill="rgb(245,192,40)" fg:x="11" fg:w="1"/><text x="0.5250%" y="463.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="0.2750%" y="437" width="0.0250%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="1"/><text x="0.5250%" y="447.50"></text></g><g><title>askama_derive::parser::expr::expr_or (1 samples, 0.03%)</title><rect x="0.2750%" y="421" width="0.0250%" height="15" fill="rgb(232,182,51)" fg:x="11" fg:w="1"/><text x="0.5250%" y="431.50"></text></g><g><title>askama_derive::parser::expr::expr_and (1 samples, 0.03%)</title><rect x="0.2750%" y="405" width="0.0250%" height="15" fill="rgb(231,60,39)" fg:x="11" fg:w="1"/><text x="0.5250%" y="415.50"></text></g><g><title>askama_derive::parser::expr::expr_compare (1 samples, 0.03%)</title><rect x="0.2750%" y="389" width="0.0250%" height="15" fill="rgb(208,69,12)" fg:x="11" fg:w="1"/><text x="0.5250%" y="399.50"></text></g><g><title>askama_derive::parser::expr::expr_bor (1 samples, 0.03%)</title><rect x="0.2750%" y="373" width="0.0250%" height="15" fill="rgb(235,93,37)" fg:x="11" fg:w="1"/><text x="0.5250%" y="383.50"></text></g><g><title>nom::multi::many0::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="357" width="0.0250%" height="15" fill="rgb(213,116,39)" fg:x="11" fg:w="1"/><text x="0.5250%" y="367.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="341" width="0.0250%" height="15" fill="rgb(222,207,29)" fg:x="11" fg:w="1"/><text x="0.5250%" y="351.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="325" width="0.0250%" height="15" fill="rgb(206,96,30)" fg:x="11" fg:w="1"/><text x="0.5250%" y="335.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="309" width="0.0250%" height="15" fill="rgb(218,138,4)" fg:x="11" fg:w="1"/><text x="0.5250%" y="319.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="293" width="0.0250%" height="15" fill="rgb(250,191,14)" fg:x="11" fg:w="1"/><text x="0.5250%" y="303.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="0.2750%" y="277" width="0.0250%" height="15" fill="rgb(239,60,40)" fg:x="11" fg:w="1"/><text x="0.5250%" y="287.50"></text></g><g><title>nom::bytes::complete::take_till::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="261" width="0.0250%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="1"/><text x="0.5250%" y="271.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position_complete (1 samples, 0.03%)</title><rect x="0.2750%" y="245" width="0.0250%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="1"/><text x="0.5250%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.03%)</title><rect x="0.2750%" y="229" width="0.0250%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="0.5250%" y="239.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.03%)</title><rect x="0.2750%" y="213" width="0.0250%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="0.5250%" y="223.50"></text></g><g><title>core::str::pattern::Searcher::next_match (1 samples, 0.03%)</title><rect x="0.2750%" y="197" width="0.0250%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="1"/><text x="0.5250%" y="207.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.03%)</title><rect x="0.2750%" y="181" width="0.0250%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="1"/><text x="0.5250%" y="191.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (1 samples, 0.03%)</title><rect x="0.2750%" y="165" width="0.0250%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="1"/><text x="0.5250%" y="175.50"></text></g><g><title>nom::bytes::complete::take_till::{{closure}}::{{closure}} (1 samples, 0.03%)</title><rect x="0.2750%" y="149" width="0.0250%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="1"/><text x="0.5250%" y="159.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.03%)</title><rect x="0.2750%" y="133" width="0.0250%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="1"/><text x="0.5250%" y="143.50"></text></g><g><title>askama_derive::parser::not_ws (1 samples, 0.03%)</title><rect x="0.2750%" y="117" width="0.0250%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="1"/><text x="0.5250%" y="127.50"></text></g><g><title>[libc.so.6] (4 samples, 0.10%)</title><rect x="0.3000%" y="853" width="0.1000%" height="15" fill="rgb(227,1,9)" fg:x="12" fg:w="4"/><text x="0.5500%" y="863.50"></text></g><g><title>main (4 samples, 0.10%)</title><rect x="0.3000%" y="837" width="0.1000%" height="15" fill="rgb(248,47,43)" fg:x="12" fg:w="4"/><text x="0.5500%" y="847.50"></text></g><g><title>std::rt::lang_start (4 samples, 0.10%)</title><rect x="0.3000%" y="821" width="0.1000%" height="15" fill="rgb(221,10,30)" fg:x="12" fg:w="4"/><text x="0.5500%" y="831.50"></text></g><g><title>std::rt::lang_start_internal (4 samples, 0.10%)</title><rect x="0.3000%" y="805" width="0.1000%" height="15" fill="rgb(210,229,1)" fg:x="12" fg:w="4"/><text x="0.5500%" y="815.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.10%)</title><rect x="0.3000%" y="789" width="0.1000%" height="15" fill="rgb(222,148,37)" fg:x="12" fg:w="4"/><text x="0.5500%" y="799.50"></text></g><g><title>std::panicking::try (4 samples, 0.10%)</title><rect x="0.3000%" y="773" width="0.1000%" height="15" fill="rgb(234,67,33)" fg:x="12" fg:w="4"/><text x="0.5500%" y="783.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.10%)</title><rect x="0.3000%" y="757" width="0.1000%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="4"/><text x="0.5500%" y="767.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (4 samples, 0.10%)</title><rect x="0.3000%" y="741" width="0.1000%" height="15" fill="rgb(247,138,52)" fg:x="12" fg:w="4"/><text x="0.5500%" y="751.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.10%)</title><rect x="0.3000%" y="725" width="0.1000%" height="15" fill="rgb(213,79,30)" fg:x="12" fg:w="4"/><text x="0.5500%" y="735.50"></text></g><g><title>std::panicking::try (4 samples, 0.10%)</title><rect x="0.3000%" y="709" width="0.1000%" height="15" fill="rgb(246,177,23)" fg:x="12" fg:w="4"/><text x="0.5500%" y="719.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.10%)</title><rect x="0.3000%" y="693" width="0.1000%" height="15" fill="rgb(230,62,27)" fg:x="12" fg:w="4"/><text x="0.5500%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4 samples, 0.10%)</title><rect x="0.3000%" y="677" width="0.1000%" height="15" fill="rgb(216,154,8)" fg:x="12" fg:w="4"/><text x="0.5500%" y="687.50"></text></g><g><title>std::rt::lang_start::{{closure}} (4 samples, 0.10%)</title><rect x="0.3000%" y="661" width="0.1000%" height="15" fill="rgb(244,35,45)" fg:x="12" fg:w="4"/><text x="0.5500%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 0.10%)</title><rect x="0.3000%" y="645" width="0.1000%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="4"/><text x="0.5500%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 0.10%)</title><rect x="0.3000%" y="629" width="0.1000%" height="15" fill="rgb(240,54,50)" fg:x="12" fg:w="4"/><text x="0.5500%" y="639.50"></text></g><g><title>askama_bench::main (4 samples, 0.10%)</title><rect x="0.3000%" y="613" width="0.1000%" height="15" fill="rgb(233,84,52)" fg:x="12" fg:w="4"/><text x="0.5500%" y="623.50"></text></g><g><title>askama_derive::derive_template (4 samples, 0.10%)</title><rect x="0.3000%" y="597" width="0.1000%" height="15" fill="rgb(207,117,47)" fg:x="12" fg:w="4"/><text x="0.5500%" y="607.50"></text></g><g><title>askama_derive::generator::derive_template (4 samples, 0.10%)</title><rect x="0.3000%" y="581" width="0.1000%" height="15" fill="rgb(249,43,39)" fg:x="12" fg:w="4"/><text x="0.5500%" y="591.50"></text></g><g><title>askama_derive::generator::build_template (4 samples, 0.10%)</title><rect x="0.3000%" y="565" width="0.1000%" height="15" fill="rgb(209,38,44)" fg:x="12" fg:w="4"/><text x="0.5500%" y="575.50"></text></g><g><title>askama_derive::parser::parse (4 samples, 0.10%)</title><rect x="0.3000%" y="549" width="0.1000%" height="15" fill="rgb(236,212,23)" fg:x="12" fg:w="4"/><text x="0.5500%" y="559.50"></text></g><g><title>askama_derive::parser::node::Node::parse (4 samples, 0.10%)</title><rect x="0.3000%" y="533" width="0.1000%" height="15" fill="rgb(242,79,21)" fg:x="12" fg:w="4"/><text x="0.5500%" y="543.50"></text></g><g><title>askama_derive::parser::node::parse_template (4 samples, 0.10%)</title><rect x="0.3000%" y="517" width="0.1000%" height="15" fill="rgb(211,96,35)" fg:x="12" fg:w="4"/><text x="0.5500%" y="527.50"></text></g><g><title>nom::multi::many0::{{closure}} (4 samples, 0.10%)</title><rect x="0.3000%" y="501" width="0.1000%" height="15" fill="rgb(253,215,40)" fg:x="12" fg:w="4"/><text x="0.5500%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4 samples, 0.10%)</title><rect x="0.3000%" y="485" width="0.1000%" height="15" fill="rgb(211,81,21)" fg:x="12" fg:w="4"/><text x="0.5500%" y="495.50"></text></g><g><title>nom::branch::alt::{{closure}} (4 samples, 0.10%)</title><rect x="0.3000%" y="469" width="0.1000%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="4"/><text x="0.5500%" y="479.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (4 samples, 0.10%)</title><rect x="0.3000%" y="453" width="0.1000%" height="15" fill="rgb(235,213,38)" fg:x="12" fg:w="4"/><text x="0.5500%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4 samples, 0.10%)</title><rect x="0.3000%" y="437" width="0.1000%" height="15" fill="rgb(237,122,38)" fg:x="12" fg:w="4"/><text x="0.5500%" y="447.50"></text></g><g><title>nom::combinator::complete::{{closure}} (4 samples, 0.10%)</title><rect x="0.3000%" y="421" width="0.1000%" height="15" fill="rgb(244,218,35)" fg:x="12" fg:w="4"/><text x="0.5500%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4 samples, 0.10%)</title><rect x="0.3000%" y="405" width="0.1000%" height="15" fill="rgb(240,68,47)" fg:x="12" fg:w="4"/><text x="0.5500%" y="415.50"></text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (4 samples, 0.10%)</title><rect x="0.3000%" y="389" width="0.1000%" height="15" fill="rgb(210,16,53)" fg:x="12" fg:w="4"/><text x="0.5500%" y="399.50"></text></g><g><title>askama_derive::parser::take_content (4 samples, 0.10%)</title><rect x="0.3000%" y="373" width="0.1000%" height="15" fill="rgb(235,124,12)" fg:x="12" fg:w="4"/><text x="0.5500%" y="383.50"></text></g><g><title>nom::combinator::opt::{{closure}} (4 samples, 0.10%)</title><rect x="0.3000%" y="357" width="0.1000%" height="15" fill="rgb(224,169,11)" fg:x="12" fg:w="4"/><text x="0.5500%" y="367.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4 samples, 0.10%)</title><rect x="0.3000%" y="341" width="0.1000%" height="15" fill="rgb(250,166,2)" fg:x="12" fg:w="4"/><text x="0.5500%" y="351.50"></text></g><g><title>nom::combinator::recognize::{{closure}} (4 samples, 0.10%)</title><rect x="0.3000%" y="325" width="0.1000%" height="15" fill="rgb(242,216,29)" fg:x="12" fg:w="4"/><text x="0.5500%" y="335.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4 samples, 0.10%)</title><rect x="0.3000%" y="309" width="0.1000%" height="15" fill="rgb(230,116,27)" fg:x="12" fg:w="4"/><text x="0.5500%" y="319.50"></text></g><g><title>askama_derive::parser::skip_till::{{closure}} (4 samples, 0.10%)</title><rect x="0.3000%" y="293" width="0.1000%" height="15" fill="rgb(228,99,48)" fg:x="12" fg:w="4"/><text x="0.5500%" y="303.50"></text></g><g><title>nom::branch::alt::{{closure}} (4 samples, 0.10%)</title><rect x="0.3000%" y="277" width="0.1000%" height="15" fill="rgb(253,11,6)" fg:x="12" fg:w="4"/><text x="0.5500%" y="287.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (4 samples, 0.10%)</title><rect x="0.3000%" y="261" width="0.1000%" height="15" fill="rgb(247,143,39)" fg:x="12" fg:w="4"/><text x="0.5500%" y="271.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4 samples, 0.10%)</title><rect x="0.3000%" y="245" width="0.1000%" height="15" fill="rgb(236,97,10)" fg:x="12" fg:w="4"/><text x="0.5500%" y="255.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.05%)</title><rect x="1.5500%" y="229" width="0.0500%" height="15" fill="rgb(233,208,19)" fg:x="62" fg:w="2"/><text x="1.8000%" y="239.50"></text></g><g><title>[libc.so.6] (32 samples, 0.80%)</title><rect x="1.6000%" y="229" width="0.8000%" height="15" fill="rgb(216,164,2)" fg:x="64" fg:w="32"/><text x="1.8500%" y="239.50"></text></g><g><title>__libc_start_main (84 samples, 2.10%)</title><rect x="0.4000%" y="853" width="2.1000%" height="15" fill="rgb(220,129,5)" fg:x="16" fg:w="84"/><text x="0.6500%" y="863.50">_..</text></g><g><title>[libc.so.6] (84 samples, 2.10%)</title><rect x="0.4000%" y="837" width="2.1000%" height="15" fill="rgb(242,17,10)" fg:x="16" fg:w="84"/><text x="0.6500%" y="847.50">[..</text></g><g><title>main (84 samples, 2.10%)</title><rect x="0.4000%" y="821" width="2.1000%" height="15" fill="rgb(242,107,0)" fg:x="16" fg:w="84"/><text x="0.6500%" y="831.50">m..</text></g><g><title>std::rt::lang_start (84 samples, 2.10%)</title><rect x="0.4000%" y="805" width="2.1000%" height="15" fill="rgb(251,28,31)" fg:x="16" fg:w="84"/><text x="0.6500%" y="815.50">s..</text></g><g><title>std::rt::lang_start_internal (84 samples, 2.10%)</title><rect x="0.4000%" y="789" width="2.1000%" height="15" fill="rgb(233,223,10)" fg:x="16" fg:w="84"/><text x="0.6500%" y="799.50">s..</text></g><g><title>std::panic::catch_unwind (84 samples, 2.10%)</title><rect x="0.4000%" y="773" width="2.1000%" height="15" fill="rgb(215,21,27)" fg:x="16" fg:w="84"/><text x="0.6500%" y="783.50">s..</text></g><g><title>std::panicking::try (84 samples, 2.10%)</title><rect x="0.4000%" y="757" width="2.1000%" height="15" fill="rgb(232,23,21)" fg:x="16" fg:w="84"/><text x="0.6500%" y="767.50">s..</text></g><g><title>std::panicking::try::do_call (84 samples, 2.10%)</title><rect x="0.4000%" y="741" width="2.1000%" height="15" fill="rgb(244,5,23)" fg:x="16" fg:w="84"/><text x="0.6500%" y="751.50">s..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (84 samples, 2.10%)</title><rect x="0.4000%" y="725" width="2.1000%" height="15" fill="rgb(226,81,46)" fg:x="16" fg:w="84"/><text x="0.6500%" y="735.50">s..</text></g><g><title>std::panic::catch_unwind (84 samples, 2.10%)</title><rect x="0.4000%" y="709" width="2.1000%" height="15" fill="rgb(247,70,30)" fg:x="16" fg:w="84"/><text x="0.6500%" y="719.50">s..</text></g><g><title>std::panicking::try (84 samples, 2.10%)</title><rect x="0.4000%" y="693" width="2.1000%" height="15" fill="rgb(212,68,19)" fg:x="16" fg:w="84"/><text x="0.6500%" y="703.50">s..</text></g><g><title>std::panicking::try::do_call (84 samples, 2.10%)</title><rect x="0.4000%" y="677" width="2.1000%" height="15" fill="rgb(240,187,13)" fg:x="16" fg:w="84"/><text x="0.6500%" y="687.50">s..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (84 samples, 2.10%)</title><rect x="0.4000%" y="661" width="2.1000%" height="15" fill="rgb(223,113,26)" fg:x="16" fg:w="84"/><text x="0.6500%" y="671.50">c..</text></g><g><title>std::rt::lang_start::{{closure}} (84 samples, 2.10%)</title><rect x="0.4000%" y="645" width="2.1000%" height="15" fill="rgb(206,192,2)" fg:x="16" fg:w="84"/><text x="0.6500%" y="655.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (84 samples, 2.10%)</title><rect x="0.4000%" y="629" width="2.1000%" height="15" fill="rgb(241,108,4)" fg:x="16" fg:w="84"/><text x="0.6500%" y="639.50">s..</text></g><g><title>core::ops::function::FnOnce::call_once (84 samples, 2.10%)</title><rect x="0.4000%" y="613" width="2.1000%" height="15" fill="rgb(247,173,49)" fg:x="16" fg:w="84"/><text x="0.6500%" y="623.50">c..</text></g><g><title>askama_bench::main (84 samples, 2.10%)</title><rect x="0.4000%" y="597" width="2.1000%" height="15" fill="rgb(224,114,35)" fg:x="16" fg:w="84"/><text x="0.6500%" y="607.50">a..</text></g><g><title>askama_derive::derive_template (84 samples, 2.10%)</title><rect x="0.4000%" y="581" width="2.1000%" height="15" fill="rgb(245,159,27)" fg:x="16" fg:w="84"/><text x="0.6500%" y="591.50">a..</text></g><g><title>askama_derive::generator::derive_template (84 samples, 2.10%)</title><rect x="0.4000%" y="565" width="2.1000%" height="15" fill="rgb(245,172,44)" fg:x="16" fg:w="84"/><text x="0.6500%" y="575.50">a..</text></g><g><title>askama_derive::generator::build_template (84 samples, 2.10%)</title><rect x="0.4000%" y="549" width="2.1000%" height="15" fill="rgb(236,23,11)" fg:x="16" fg:w="84"/><text x="0.6500%" y="559.50">a..</text></g><g><title>askama_derive::parser::parse (84 samples, 2.10%)</title><rect x="0.4000%" y="533" width="2.1000%" height="15" fill="rgb(205,117,38)" fg:x="16" fg:w="84"/><text x="0.6500%" y="543.50">a..</text></g><g><title>askama_derive::parser::node::Node::parse (84 samples, 2.10%)</title><rect x="0.4000%" y="517" width="2.1000%" height="15" fill="rgb(237,72,25)" fg:x="16" fg:w="84"/><text x="0.6500%" y="527.50">a..</text></g><g><title>askama_derive::parser::node::parse_template (84 samples, 2.10%)</title><rect x="0.4000%" y="501" width="2.1000%" height="15" fill="rgb(244,70,9)" fg:x="16" fg:w="84"/><text x="0.6500%" y="511.50">a..</text></g><g><title>nom::multi::many0::{{closure}} (84 samples, 2.10%)</title><rect x="0.4000%" y="485" width="2.1000%" height="15" fill="rgb(217,125,39)" fg:x="16" fg:w="84"/><text x="0.6500%" y="495.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (84 samples, 2.10%)</title><rect x="0.4000%" y="469" width="2.1000%" height="15" fill="rgb(235,36,10)" fg:x="16" fg:w="84"/><text x="0.6500%" y="479.50">&lt;..</text></g><g><title>nom::branch::alt::{{closure}} (84 samples, 2.10%)</title><rect x="0.4000%" y="453" width="2.1000%" height="15" fill="rgb(251,123,47)" fg:x="16" fg:w="84"/><text x="0.6500%" y="463.50">n..</text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (84 samples, 2.10%)</title><rect x="0.4000%" y="437" width="2.1000%" height="15" fill="rgb(221,13,13)" fg:x="16" fg:w="84"/><text x="0.6500%" y="447.50">&lt;..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (84 samples, 2.10%)</title><rect x="0.4000%" y="421" width="2.1000%" height="15" fill="rgb(238,131,9)" fg:x="16" fg:w="84"/><text x="0.6500%" y="431.50">&lt;..</text></g><g><title>nom::combinator::complete::{{closure}} (84 samples, 2.10%)</title><rect x="0.4000%" y="405" width="2.1000%" height="15" fill="rgb(211,50,8)" fg:x="16" fg:w="84"/><text x="0.6500%" y="415.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (84 samples, 2.10%)</title><rect x="0.4000%" y="389" width="2.1000%" height="15" fill="rgb(245,182,24)" fg:x="16" fg:w="84"/><text x="0.6500%" y="399.50">&lt;..</text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (84 samples, 2.10%)</title><rect x="0.4000%" y="373" width="2.1000%" height="15" fill="rgb(242,14,37)" fg:x="16" fg:w="84"/><text x="0.6500%" y="383.50">a..</text></g><g><title>askama_derive::parser::take_content (84 samples, 2.10%)</title><rect x="0.4000%" y="357" width="2.1000%" height="15" fill="rgb(246,228,12)" fg:x="16" fg:w="84"/><text x="0.6500%" y="367.50">a..</text></g><g><title>nom::combinator::opt::{{closure}} (84 samples, 2.10%)</title><rect x="0.4000%" y="341" width="2.1000%" height="15" fill="rgb(213,55,15)" fg:x="16" fg:w="84"/><text x="0.6500%" y="351.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (84 samples, 2.10%)</title><rect x="0.4000%" y="325" width="2.1000%" height="15" fill="rgb(209,9,3)" fg:x="16" fg:w="84"/><text x="0.6500%" y="335.50">&lt;..</text></g><g><title>nom::combinator::recognize::{{closure}} (84 samples, 2.10%)</title><rect x="0.4000%" y="309" width="2.1000%" height="15" fill="rgb(230,59,30)" fg:x="16" fg:w="84"/><text x="0.6500%" y="319.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (84 samples, 2.10%)</title><rect x="0.4000%" y="293" width="2.1000%" height="15" fill="rgb(209,121,21)" fg:x="16" fg:w="84"/><text x="0.6500%" y="303.50">&lt;..</text></g><g><title>askama_derive::parser::skip_till::{{closure}} (84 samples, 2.10%)</title><rect x="0.4000%" y="277" width="2.1000%" height="15" fill="rgb(220,109,13)" fg:x="16" fg:w="84"/><text x="0.6500%" y="287.50">a..</text></g><g><title>nom::branch::alt::{{closure}} (84 samples, 2.10%)</title><rect x="0.4000%" y="261" width="2.1000%" height="15" fill="rgb(232,18,1)" fg:x="16" fg:w="84"/><text x="0.6500%" y="271.50">n..</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (84 samples, 2.10%)</title><rect x="0.4000%" y="245" width="2.1000%" height="15" fill="rgb(215,41,42)" fg:x="16" fg:w="84"/><text x="0.6500%" y="255.50">&lt;..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (4 samples, 0.10%)</title><rect x="2.4000%" y="229" width="0.1000%" height="15" fill="rgb(224,123,36)" fg:x="96" fg:w="4"/><text x="2.6500%" y="239.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (2 samples, 0.05%)</title><rect x="2.5250%" y="565" width="0.0500%" height="15" fill="rgb(240,125,3)" fg:x="101" fg:w="2"/><text x="2.7750%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (2 samples, 0.05%)</title><rect x="2.5250%" y="549" width="0.0500%" height="15" fill="rgb(205,98,50)" fg:x="101" fg:w="2"/><text x="2.7750%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (2 samples, 0.05%)</title><rect x="2.5250%" y="533" width="0.0500%" height="15" fill="rgb(205,185,37)" fg:x="101" fg:w="2"/><text x="2.7750%" y="543.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.05%)</title><rect x="2.5250%" y="517" width="0.0500%" height="15" fill="rgb(238,207,15)" fg:x="101" fg:w="2"/><text x="2.7750%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="2.5500%" y="501" width="0.0250%" height="15" fill="rgb(213,199,42)" fg:x="102" fg:w="1"/><text x="2.8000%" y="511.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="2.5750%" y="565" width="0.0500%" height="15" fill="rgb(235,201,11)" fg:x="103" fg:w="2"/><text x="2.8250%" y="575.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="2.5750%" y="549" width="0.0500%" height="15" fill="rgb(207,46,11)" fg:x="103" fg:w="2"/><text x="2.8250%" y="559.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 0.05%)</title><rect x="2.5750%" y="533" width="0.0500%" height="15" fill="rgb(241,35,35)" fg:x="103" fg:w="2"/><text x="2.8250%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="3.1000%" y="501" width="0.0250%" height="15" fill="rgb(243,32,47)" fg:x="124" fg:w="1"/><text x="3.3500%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="3.1000%" y="485" width="0.0250%" height="15" fill="rgb(247,202,23)" fg:x="124" fg:w="1"/><text x="3.3500%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="3.1000%" y="469" width="0.0250%" height="15" fill="rgb(219,102,11)" fg:x="124" fg:w="1"/><text x="3.3500%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.03%)</title><rect x="3.1250%" y="501" width="0.0250%" height="15" fill="rgb(243,110,44)" fg:x="125" fg:w="1"/><text x="3.3750%" y="511.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (30 samples, 0.75%)</title><rect x="2.9000%" y="549" width="0.7500%" height="15" fill="rgb(222,74,54)" fg:x="116" fg:w="30"/><text x="3.1500%" y="559.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (30 samples, 0.75%)</title><rect x="2.9000%" y="533" width="0.7500%" height="15" fill="rgb(216,99,12)" fg:x="116" fg:w="30"/><text x="3.1500%" y="543.50"></text></g><g><title>core::unicode::unicode_data::skip_search (29 samples, 0.72%)</title><rect x="2.9250%" y="517" width="0.7250%" height="15" fill="rgb(226,22,26)" fg:x="117" fg:w="29"/><text x="3.1750%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (20 samples, 0.50%)</title><rect x="3.1500%" y="501" width="0.5000%" height="15" fill="rgb(217,163,10)" fg:x="126" fg:w="20"/><text x="3.4000%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (20 samples, 0.50%)</title><rect x="3.1500%" y="485" width="0.5000%" height="15" fill="rgb(213,25,53)" fg:x="126" fg:w="20"/><text x="3.4000%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (12 samples, 0.30%)</title><rect x="3.3500%" y="469" width="0.3000%" height="15" fill="rgb(252,105,26)" fg:x="134" fg:w="12"/><text x="3.6000%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (12 samples, 0.30%)</title><rect x="3.3500%" y="453" width="0.3000%" height="15" fill="rgb(220,39,43)" fg:x="134" fg:w="12"/><text x="3.6000%" y="463.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (42 samples, 1.05%)</title><rect x="2.6250%" y="565" width="1.0500%" height="15" fill="rgb(229,68,48)" fg:x="105" fg:w="42"/><text x="2.8750%" y="575.50"></text></g><g><title>core::unicode::printable::is_printable (1 samples, 0.03%)</title><rect x="3.6500%" y="549" width="0.0250%" height="15" fill="rgb(252,8,32)" fg:x="146" fg:w="1"/><text x="3.9000%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (3 samples, 0.07%)</title><rect x="3.6750%" y="565" width="0.0750%" height="15" fill="rgb(223,20,43)" fg:x="147" fg:w="3"/><text x="3.9250%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.07%)</title><rect x="3.6750%" y="549" width="0.0750%" height="15" fill="rgb(229,81,49)" fg:x="147" fg:w="3"/><text x="3.9250%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.07%)</title><rect x="3.6750%" y="533" width="0.0750%" height="15" fill="rgb(236,28,36)" fg:x="147" fg:w="3"/><text x="3.9250%" y="543.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.07%)</title><rect x="3.6750%" y="517" width="0.0750%" height="15" fill="rgb(249,185,26)" fg:x="147" fg:w="3"/><text x="3.9250%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.07%)</title><rect x="3.6750%" y="501" width="0.0750%" height="15" fill="rgb(249,174,33)" fg:x="147" fg:w="3"/><text x="3.9250%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.07%)</title><rect x="3.6750%" y="485" width="0.0750%" height="15" fill="rgb(233,201,37)" fg:x="147" fg:w="3"/><text x="3.9250%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.07%)</title><rect x="3.6750%" y="469" width="0.0750%" height="15" fill="rgb(221,78,26)" fg:x="147" fg:w="3"/><text x="3.9250%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.07%)</title><rect x="3.6750%" y="453" width="0.0750%" height="15" fill="rgb(250,127,30)" fg:x="147" fg:w="3"/><text x="3.9250%" y="463.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="3.6750%" y="437" width="0.0750%" height="15" fill="rgb(230,49,44)" fg:x="147" fg:w="3"/><text x="3.9250%" y="447.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (2 samples, 0.05%)</title><rect x="3.7500%" y="565" width="0.0500%" height="15" fill="rgb(229,67,23)" fg:x="150" fg:w="2"/><text x="4.0000%" y="575.50"></text></g><g><title>&lt;core::char::EscapeDebug as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.05%)</title><rect x="3.7500%" y="549" width="0.0500%" height="15" fill="rgb(249,83,47)" fg:x="150" fg:w="2"/><text x="4.0000%" y="559.50"></text></g><g><title>&lt;core::char::EscapeDefault as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.05%)</title><rect x="3.7500%" y="533" width="0.0500%" height="15" fill="rgb(215,43,3)" fg:x="150" fg:w="2"/><text x="4.0000%" y="543.50"></text></g><g><title>&lt;core::char::EscapeDefault as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (2 samples, 0.05%)</title><rect x="3.7500%" y="517" width="0.0500%" height="15" fill="rgb(238,154,13)" fg:x="150" fg:w="2"/><text x="4.0000%" y="527.50"></text></g><g><title>alloc::fmt::format (53 samples, 1.32%)</title><rect x="2.5000%" y="725" width="1.3250%" height="15" fill="rgb(219,56,2)" fg:x="100" fg:w="53"/><text x="2.7500%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (53 samples, 1.32%)</title><rect x="2.5000%" y="709" width="1.3250%" height="15" fill="rgb(233,0,4)" fg:x="100" fg:w="53"/><text x="2.7500%" y="719.50"></text></g><g><title>alloc::fmt::format::{{closure}} (53 samples, 1.32%)</title><rect x="2.5000%" y="693" width="1.3250%" height="15" fill="rgb(235,30,7)" fg:x="100" fg:w="53"/><text x="2.7500%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (53 samples, 1.32%)</title><rect x="2.5000%" y="677" width="1.3250%" height="15" fill="rgb(250,79,13)" fg:x="100" fg:w="53"/><text x="2.7500%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (53 samples, 1.32%)</title><rect x="2.5000%" y="661" width="1.3250%" height="15" fill="rgb(211,146,34)" fg:x="100" fg:w="53"/><text x="2.7500%" y="671.50"></text></g><g><title>core::fmt::write (53 samples, 1.32%)</title><rect x="2.5000%" y="645" width="1.3250%" height="15" fill="rgb(228,22,38)" fg:x="100" fg:w="53"/><text x="2.7500%" y="655.50"></text></g><g><title>core::fmt::run (53 samples, 1.32%)</title><rect x="2.5000%" y="629" width="1.3250%" height="15" fill="rgb(235,168,5)" fg:x="100" fg:w="53"/><text x="2.7500%" y="639.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (53 samples, 1.32%)</title><rect x="2.5000%" y="613" width="1.3250%" height="15" fill="rgb(221,155,16)" fg:x="100" fg:w="53"/><text x="2.7500%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Debug&gt;::fmt (53 samples, 1.32%)</title><rect x="2.5000%" y="597" width="1.3250%" height="15" fill="rgb(215,215,53)" fg:x="100" fg:w="53"/><text x="2.7500%" y="607.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (53 samples, 1.32%)</title><rect x="2.5000%" y="581" width="1.3250%" height="15" fill="rgb(223,4,10)" fg:x="100" fg:w="53"/><text x="2.7500%" y="591.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.03%)</title><rect x="3.8000%" y="565" width="0.0250%" height="15" fill="rgb(234,103,6)" fg:x="152" fg:w="1"/><text x="4.0500%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (1 samples, 0.03%)</title><rect x="3.8000%" y="549" width="0.0250%" height="15" fill="rgb(227,97,0)" fg:x="152" fg:w="1"/><text x="4.0500%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.03%)</title><rect x="3.8000%" y="533" width="0.0250%" height="15" fill="rgb(234,150,53)" fg:x="152" fg:w="1"/><text x="4.0500%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.03%)</title><rect x="3.8000%" y="517" width="0.0250%" height="15" fill="rgb(228,201,54)" fg:x="152" fg:w="1"/><text x="4.0500%" y="527.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (1 samples, 0.03%)</title><rect x="3.8000%" y="501" width="0.0250%" height="15" fill="rgb(222,22,37)" fg:x="152" fg:w="1"/><text x="4.0500%" y="511.50"></text></g><g><title>askama_derive::generator::Generator::build (54 samples, 1.35%)</title><rect x="2.5000%" y="789" width="1.3500%" height="15" fill="rgb(237,53,32)" fg:x="100" fg:w="54"/><text x="2.7500%" y="799.50"></text></g><g><title>askama_derive::generator::Generator::impl_template (54 samples, 1.35%)</title><rect x="2.5000%" y="773" width="1.3500%" height="15" fill="rgb(233,25,53)" fg:x="100" fg:w="54"/><text x="2.7500%" y="783.50"></text></g><g><title>askama_derive::generator::Generator::handle (54 samples, 1.35%)</title><rect x="2.5000%" y="757" width="1.3500%" height="15" fill="rgb(210,40,34)" fg:x="100" fg:w="54"/><text x="2.7500%" y="767.50"></text></g><g><title>askama_derive::generator::Generator::write_buf_writable (54 samples, 1.35%)</title><rect x="2.5000%" y="741" width="1.3500%" height="15" fill="rgb(241,220,44)" fg:x="100" fg:w="54"/><text x="2.7500%" y="751.50"></text></g><g><title>askama_derive::generator::Buffer::writeln (1 samples, 0.03%)</title><rect x="3.8250%" y="725" width="0.0250%" height="15" fill="rgb(235,28,35)" fg:x="153" fg:w="1"/><text x="4.0750%" y="735.50"></text></g><g><title>askama_derive::generator::Buffer::write (1 samples, 0.03%)</title><rect x="3.8250%" y="709" width="0.0250%" height="15" fill="rgb(210,56,17)" fg:x="153" fg:w="1"/><text x="4.0750%" y="719.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.03%)</title><rect x="3.8250%" y="693" width="0.0250%" height="15" fill="rgb(224,130,29)" fg:x="153" fg:w="1"/><text x="4.0750%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="3.8250%" y="677" width="0.0250%" height="15" fill="rgb(235,212,8)" fg:x="153" fg:w="1"/><text x="4.0750%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="3.8250%" y="661" width="0.0250%" height="15" fill="rgb(223,33,50)" fg:x="153" fg:w="1"/><text x="4.0750%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="3.8250%" y="645" width="0.0250%" height="15" fill="rgb(219,149,13)" fg:x="153" fg:w="1"/><text x="4.0750%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="3.8250%" y="629" width="0.0250%" height="15" fill="rgb(250,156,29)" fg:x="153" fg:w="1"/><text x="4.0750%" y="639.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="3.8250%" y="613" width="0.0250%" height="15" fill="rgb(216,193,19)" fg:x="153" fg:w="1"/><text x="4.0750%" y="623.50"></text></g><g><title>askama_derive::generator::TemplateArgs::new (1 samples, 0.03%)</title><rect x="3.8500%" y="789" width="0.0250%" height="15" fill="rgb(216,135,14)" fg:x="154" fg:w="1"/><text x="4.1000%" y="799.50"></text></g><g><title>syn::attr::Attribute::parse_args_with (1 samples, 0.03%)</title><rect x="3.8500%" y="773" width="0.0250%" height="15" fill="rgb(241,47,5)" fg:x="154" fg:w="1"/><text x="4.1000%" y="783.50"></text></g><g><title>syn::attr::MetaList::parse_args_with (1 samples, 0.03%)</title><rect x="3.8500%" y="757" width="0.0250%" height="15" fill="rgb(233,42,35)" fg:x="154" fg:w="1"/><text x="4.1000%" y="767.50"></text></g><g><title>syn::parse::parse_scoped (1 samples, 0.03%)</title><rect x="3.8500%" y="741" width="0.0250%" height="15" fill="rgb(231,13,6)" fg:x="154" fg:w="1"/><text x="4.1000%" y="751.50"></text></g><g><title>&lt;F as syn::parse::Parser&gt;::__parse_scoped (1 samples, 0.03%)</title><rect x="3.8500%" y="725" width="0.0250%" height="15" fill="rgb(207,181,40)" fg:x="154" fg:w="1"/><text x="4.1000%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="3.8500%" y="709" width="0.0250%" height="15" fill="rgb(254,173,49)" fg:x="154" fg:w="1"/><text x="4.1000%" y="719.50"></text></g><g><title>syn::punctuated::Punctuated&lt;T,P&gt;::parse_terminated (1 samples, 0.03%)</title><rect x="3.8500%" y="693" width="0.0250%" height="15" fill="rgb(221,1,38)" fg:x="154" fg:w="1"/><text x="4.1000%" y="703.50"></text></g><g><title>syn::punctuated::Punctuated&lt;T,P&gt;::parse_terminated_with (1 samples, 0.03%)</title><rect x="3.8500%" y="677" width="0.0250%" height="15" fill="rgb(206,124,46)" fg:x="154" fg:w="1"/><text x="4.1000%" y="687.50"></text></g><g><title>syn::attr::parsing::&lt;impl syn::parse::Parse for syn::attr::Meta&gt;::parse (1 samples, 0.03%)</title><rect x="3.8500%" y="661" width="0.0250%" height="15" fill="rgb(249,21,11)" fg:x="154" fg:w="1"/><text x="4.1000%" y="671.50"></text></g><g><title>syn::attr::parsing::parse_meta_after_path (1 samples, 0.03%)</title><rect x="3.8500%" y="645" width="0.0250%" height="15" fill="rgb(222,201,40)" fg:x="154" fg:w="1"/><text x="4.1000%" y="655.50"></text></g><g><title>syn::attr::parsing::parse_meta_name_value_after_path (1 samples, 0.03%)</title><rect x="3.8500%" y="629" width="0.0250%" height="15" fill="rgb(235,61,29)" fg:x="154" fg:w="1"/><text x="4.1000%" y="639.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.03%)</title><rect x="3.8500%" y="613" width="0.0250%" height="15" fill="rgb(219,207,3)" fg:x="154" fg:w="1"/><text x="4.1000%" y="623.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as syn::parse::Parse&gt;::parse (1 samples, 0.03%)</title><rect x="3.8500%" y="597" width="0.0250%" height="15" fill="rgb(222,56,46)" fg:x="154" fg:w="1"/><text x="4.1000%" y="607.50"></text></g><g><title>&lt;syn::lit::Lit as syn::token::Token&gt;::peek (1 samples, 0.03%)</title><rect x="3.8500%" y="581" width="0.0250%" height="15" fill="rgb(239,76,54)" fg:x="154" fg:w="1"/><text x="4.1000%" y="591.50"></text></g><g><title>syn::token::peek_impl (1 samples, 0.03%)</title><rect x="3.8500%" y="565" width="0.0250%" height="15" fill="rgb(231,124,27)" fg:x="154" fg:w="1"/><text x="4.1000%" y="575.50"></text></g><g><title>&lt;syn::lit::Lit as syn::token::Token&gt;::peek::peek (1 samples, 0.03%)</title><rect x="3.8500%" y="549" width="0.0250%" height="15" fill="rgb(249,195,6)" fg:x="154" fg:w="1"/><text x="4.1000%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (11 samples, 0.28%)</title><rect x="5.8750%" y="357" width="0.2750%" height="15" fill="rgb(237,174,47)" fg:x="235" fg:w="11"/><text x="6.1250%" y="367.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (10 samples, 0.25%)</title><rect x="5.9000%" y="341" width="0.2500%" height="15" fill="rgb(206,201,31)" fg:x="236" fg:w="10"/><text x="6.1500%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (3 samples, 0.07%)</title><rect x="6.0750%" y="325" width="0.0750%" height="15" fill="rgb(231,57,52)" fg:x="243" fg:w="3"/><text x="6.3250%" y="335.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::iter_indices (24 samples, 0.60%)</title><rect x="5.5750%" y="405" width="0.6000%" height="15" fill="rgb(248,177,22)" fg:x="223" fg:w="24"/><text x="5.8250%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (24 samples, 0.60%)</title><rect x="5.5750%" y="389" width="0.6000%" height="15" fill="rgb(215,211,37)" fg:x="223" fg:w="24"/><text x="5.8250%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (12 samples, 0.30%)</title><rect x="5.8750%" y="373" width="0.3000%" height="15" fill="rgb(241,128,51)" fg:x="235" fg:w="12"/><text x="6.1250%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (1 samples, 0.03%)</title><rect x="6.1500%" y="357" width="0.0250%" height="15" fill="rgb(227,165,31)" fg:x="246" fg:w="1"/><text x="6.4000%" y="367.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (4 samples, 0.10%)</title><rect x="7.2500%" y="325" width="0.1000%" height="15" fill="rgb(228,167,24)" fg:x="290" fg:w="4"/><text x="7.5000%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.07%)</title><rect x="7.3500%" y="325" width="0.0750%" height="15" fill="rgb(228,143,12)" fg:x="294" fg:w="3"/><text x="7.6000%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.07%)</title><rect x="7.3500%" y="309" width="0.0750%" height="15" fill="rgb(249,149,8)" fg:x="294" fg:w="3"/><text x="7.6000%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.05%)</title><rect x="7.3750%" y="293" width="0.0500%" height="15" fill="rgb(243,35,44)" fg:x="295" fg:w="2"/><text x="7.6250%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.05%)</title><rect x="7.3750%" y="277" width="0.0500%" height="15" fill="rgb(246,89,9)" fg:x="295" fg:w="2"/><text x="7.6250%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.03%)</title><rect x="7.4000%" y="261" width="0.0250%" height="15" fill="rgb(233,213,13)" fg:x="296" fg:w="1"/><text x="7.6500%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (26 samples, 0.65%)</title><rect x="6.8000%" y="341" width="0.6500%" height="15" fill="rgb(233,141,41)" fg:x="272" fg:w="26"/><text x="7.0500%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (1 samples, 0.03%)</title><rect x="7.4250%" y="325" width="0.0250%" height="15" fill="rgb(239,167,4)" fg:x="297" fg:w="1"/><text x="7.6750%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (1 samples, 0.03%)</title><rect x="7.5000%" y="325" width="0.0250%" height="15" fill="rgb(209,217,16)" fg:x="300" fg:w="1"/><text x="7.7500%" y="335.50"></text></g><g><title>core::ptr::metadata::metadata (1 samples, 0.03%)</title><rect x="7.5000%" y="309" width="0.0250%" height="15" fill="rgb(219,88,35)" fg:x="300" fg:w="1"/><text x="7.7500%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.07%)</title><rect x="7.6500%" y="309" width="0.0750%" height="15" fill="rgb(220,193,23)" fg:x="306" fg:w="3"/><text x="7.9000%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.05%)</title><rect x="7.6750%" y="293" width="0.0500%" height="15" fill="rgb(230,90,52)" fg:x="307" fg:w="2"/><text x="7.9250%" y="303.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (64 samples, 1.60%)</title><rect x="6.1750%" y="405" width="1.6000%" height="15" fill="rgb(252,106,19)" fg:x="247" fg:w="64"/><text x="6.4250%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (59 samples, 1.48%)</title><rect x="6.3000%" y="389" width="1.4750%" height="15" fill="rgb(206,74,20)" fg:x="252" fg:w="59"/><text x="6.5500%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (58 samples, 1.45%)</title><rect x="6.3250%" y="373" width="1.4500%" height="15" fill="rgb(230,138,44)" fg:x="253" fg:w="58"/><text x="6.5750%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (49 samples, 1.23%)</title><rect x="6.5500%" y="357" width="1.2250%" height="15" fill="rgb(235,182,43)" fg:x="262" fg:w="49"/><text x="6.8000%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (13 samples, 0.33%)</title><rect x="7.4500%" y="341" width="0.3250%" height="15" fill="rgb(242,16,51)" fg:x="298" fg:w="13"/><text x="7.7000%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (10 samples, 0.25%)</title><rect x="7.5250%" y="325" width="0.2500%" height="15" fill="rgb(248,9,4)" fg:x="301" fg:w="10"/><text x="7.7750%" y="335.50"></text></g><g><title>core::ptr::slice_from_raw_parts (2 samples, 0.05%)</title><rect x="7.7250%" y="309" width="0.0500%" height="15" fill="rgb(210,31,22)" fg:x="309" fg:w="2"/><text x="7.9750%" y="319.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (2 samples, 0.05%)</title><rect x="7.7250%" y="293" width="0.0500%" height="15" fill="rgb(239,54,39)" fg:x="309" fg:w="2"/><text x="7.9750%" y="303.50"></text></g><g><title>&lt;char as nom::traits::AsChar&gt;::as_char (2 samples, 0.05%)</title><rect x="7.7750%" y="405" width="0.0500%" height="15" fill="rgb(230,99,41)" fg:x="311" fg:w="2"/><text x="8.0250%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (31 samples, 0.78%)</title><rect x="8.4500%" y="389" width="0.7750%" height="15" fill="rgb(253,106,12)" fg:x="338" fg:w="31"/><text x="8.7000%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (22 samples, 0.55%)</title><rect x="8.6750%" y="373" width="0.5500%" height="15" fill="rgb(213,46,41)" fg:x="347" fg:w="22"/><text x="8.9250%" y="383.50"></text></g><g><title>core::mem::size_of (2 samples, 0.05%)</title><rect x="9.1750%" y="357" width="0.0500%" height="15" fill="rgb(215,133,35)" fg:x="367" fg:w="2"/><text x="9.4250%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (22 samples, 0.55%)</title><rect x="9.3750%" y="373" width="0.5500%" height="15" fill="rgb(213,28,5)" fg:x="375" fg:w="22"/><text x="9.6250%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (2 samples, 0.05%)</title><rect x="9.8750%" y="357" width="0.0500%" height="15" fill="rgb(215,77,49)" fg:x="395" fg:w="2"/><text x="10.1250%" y="367.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::from_u32_unchecked (1 samples, 0.03%)</title><rect x="9.9000%" y="341" width="0.0250%" height="15" fill="rgb(248,100,22)" fg:x="396" fg:w="1"/><text x="10.1500%" y="351.50"></text></g><g><title>core::char::convert::from_u32_unchecked (1 samples, 0.03%)</title><rect x="9.9000%" y="325" width="0.0250%" height="15" fill="rgb(208,67,9)" fg:x="396" fg:w="1"/><text x="10.1500%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.17%)</title><rect x="10.8000%" y="357" width="0.1750%" height="15" fill="rgb(219,133,21)" fg:x="432" fg:w="7"/><text x="11.0500%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (8 samples, 0.20%)</title><rect x="11.4750%" y="341" width="0.2000%" height="15" fill="rgb(246,46,29)" fg:x="459" fg:w="8"/><text x="11.7250%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (6 samples, 0.15%)</title><rect x="11.6750%" y="341" width="0.1500%" height="15" fill="rgb(246,185,52)" fg:x="467" fg:w="6"/><text x="11.9250%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.12%)</title><rect x="12.1000%" y="325" width="0.1250%" height="15" fill="rgb(252,136,11)" fg:x="484" fg:w="5"/><text x="12.3500%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.05%)</title><rect x="12.1750%" y="309" width="0.0500%" height="15" fill="rgb(219,138,53)" fg:x="487" fg:w="2"/><text x="12.4250%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (3 samples, 0.07%)</title><rect x="12.2250%" y="325" width="0.0750%" height="15" fill="rgb(211,51,23)" fg:x="489" fg:w="3"/><text x="12.4750%" y="335.50"></text></g><g><title>core::ops::function::FnMut::call_mut (340 samples, 8.50%)</title><rect x="3.8750%" y="437" width="8.5000%" height="15" fill="rgb(247,221,28)" fg:x="155" fg:w="340"/><text x="4.1250%" y="447.50">core::ops::f..</text></g><g><title>nom::character::complete::anychar (340 samples, 8.50%)</title><rect x="3.8750%" y="421" width="8.5000%" height="15" fill="rgb(251,222,45)" fg:x="155" fg:w="340"/><text x="4.1250%" y="431.50">nom::charact..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (182 samples, 4.55%)</title><rect x="7.8250%" y="405" width="4.5500%" height="15" fill="rgb(217,162,53)" fg:x="313" fg:w="182"/><text x="8.0750%" y="415.50">&lt;core..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 3.15%)</title><rect x="9.2250%" y="389" width="3.1500%" height="15" fill="rgb(229,93,14)" fg:x="369" fg:w="126"/><text x="9.4750%" y="399.50">&lt;co..</text></g><g><title>core::str::validations::next_code_point (98 samples, 2.45%)</title><rect x="9.9250%" y="373" width="2.4500%" height="15" fill="rgb(209,67,49)" fg:x="397" fg:w="98"/><text x="10.1750%" y="383.50">co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 1.40%)</title><rect x="10.9750%" y="357" width="1.4000%" height="15" fill="rgb(213,87,29)" fg:x="439" fg:w="56"/><text x="11.2250%" y="367.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (22 samples, 0.55%)</title><rect x="11.8250%" y="341" width="0.5500%" height="15" fill="rgb(205,151,52)" fg:x="473" fg:w="22"/><text x="12.0750%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (3 samples, 0.07%)</title><rect x="12.3000%" y="325" width="0.0750%" height="15" fill="rgb(253,215,39)" fg:x="492" fg:w="3"/><text x="12.5500%" y="335.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (24 samples, 0.60%)</title><rect x="15.4250%" y="405" width="0.6000%" height="15" fill="rgb(221,220,41)" fg:x="617" fg:w="24"/><text x="15.6750%" y="415.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (3 samples, 0.07%)</title><rect x="15.9500%" y="389" width="0.0750%" height="15" fill="rgb(218,133,21)" fg:x="638" fg:w="3"/><text x="16.2000%" y="399.50"></text></g><g><title>&lt;nom::error::Error&lt;I&gt; as nom::error::ParseError&lt;I&gt;&gt;::append (1 samples, 0.03%)</title><rect x="16.0250%" y="405" width="0.0250%" height="15" fill="rgb(221,193,43)" fg:x="641" fg:w="1"/><text x="16.2750%" y="415.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (10 samples, 0.25%)</title><rect x="16.0500%" y="405" width="0.2500%" height="15" fill="rgb(240,128,52)" fg:x="642" fg:w="10"/><text x="16.3000%" y="415.50"></text></g><g><title>askama_bench::main (560 samples, 14.00%)</title><rect x="2.5000%" y="853" width="14.0000%" height="15" fill="rgb(253,114,12)" fg:x="100" fg:w="560"/><text x="2.7500%" y="863.50">askama_bench::main</text></g><g><title>askama_derive::derive_template (560 samples, 14.00%)</title><rect x="2.5000%" y="837" width="14.0000%" height="15" fill="rgb(215,223,47)" fg:x="100" fg:w="560"/><text x="2.7500%" y="847.50">askama_derive::derive..</text></g><g><title>askama_derive::generator::derive_template (560 samples, 14.00%)</title><rect x="2.5000%" y="821" width="14.0000%" height="15" fill="rgb(248,225,23)" fg:x="100" fg:w="560"/><text x="2.7500%" y="831.50">askama_derive::genera..</text></g><g><title>askama_derive::generator::build_template (560 samples, 14.00%)</title><rect x="2.5000%" y="805" width="14.0000%" height="15" fill="rgb(250,108,0)" fg:x="100" fg:w="560"/><text x="2.7500%" y="815.50">askama_derive::genera..</text></g><g><title>askama_derive::parser::parse (505 samples, 12.62%)</title><rect x="3.8750%" y="789" width="12.6250%" height="15" fill="rgb(228,208,7)" fg:x="155" fg:w="505"/><text x="4.1250%" y="799.50">askama_derive::pars..</text></g><g><title>askama_derive::parser::node::Node::parse (505 samples, 12.62%)</title><rect x="3.8750%" y="773" width="12.6250%" height="15" fill="rgb(244,45,10)" fg:x="155" fg:w="505"/><text x="4.1250%" y="783.50">askama_derive::pars..</text></g><g><title>askama_derive::parser::node::parse_template (505 samples, 12.62%)</title><rect x="3.8750%" y="757" width="12.6250%" height="15" fill="rgb(207,125,25)" fg:x="155" fg:w="505"/><text x="4.1250%" y="767.50">askama_derive::pars..</text></g><g><title>nom::multi::many0::{{closure}} (505 samples, 12.62%)</title><rect x="3.8750%" y="741" width="12.6250%" height="15" fill="rgb(210,195,18)" fg:x="155" fg:w="505"/><text x="4.1250%" y="751.50">nom::multi::many0::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (505 samples, 12.62%)</title><rect x="3.8750%" y="725" width="12.6250%" height="15" fill="rgb(249,80,12)" fg:x="155" fg:w="505"/><text x="4.1250%" y="735.50">&lt;F as nom::internal..</text></g><g><title>nom::branch::alt::{{closure}} (505 samples, 12.62%)</title><rect x="3.8750%" y="709" width="12.6250%" height="15" fill="rgb(221,65,9)" fg:x="155" fg:w="505"/><text x="4.1250%" y="719.50">nom::branch::alt::{..</text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (505 samples, 12.62%)</title><rect x="3.8750%" y="693" width="12.6250%" height="15" fill="rgb(235,49,36)" fg:x="155" fg:w="505"/><text x="4.1250%" y="703.50">&lt;(A,B,C,D) as nom::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (505 samples, 12.62%)</title><rect x="3.8750%" y="677" width="12.6250%" height="15" fill="rgb(225,32,20)" fg:x="155" fg:w="505"/><text x="4.1250%" y="687.50">&lt;F as nom::internal..</text></g><g><title>nom::combinator::complete::{{closure}} (505 samples, 12.62%)</title><rect x="3.8750%" y="661" width="12.6250%" height="15" fill="rgb(215,141,46)" fg:x="155" fg:w="505"/><text x="4.1250%" y="671.50">nom::combinator::co..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (505 samples, 12.62%)</title><rect x="3.8750%" y="645" width="12.6250%" height="15" fill="rgb(250,160,47)" fg:x="155" fg:w="505"/><text x="4.1250%" y="655.50">&lt;F as nom::internal..</text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (505 samples, 12.62%)</title><rect x="3.8750%" y="629" width="12.6250%" height="15" fill="rgb(216,222,40)" fg:x="155" fg:w="505"/><text x="4.1250%" y="639.50">askama_derive::pars..</text></g><g><title>askama_derive::parser::take_content (505 samples, 12.62%)</title><rect x="3.8750%" y="613" width="12.6250%" height="15" fill="rgb(234,217,39)" fg:x="155" fg:w="505"/><text x="4.1250%" y="623.50">askama_derive::pars..</text></g><g><title>nom::combinator::opt::{{closure}} (505 samples, 12.62%)</title><rect x="3.8750%" y="597" width="12.6250%" height="15" fill="rgb(207,178,40)" fg:x="155" fg:w="505"/><text x="4.1250%" y="607.50">nom::combinator::op..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (505 samples, 12.62%)</title><rect x="3.8750%" y="581" width="12.6250%" height="15" fill="rgb(221,136,13)" fg:x="155" fg:w="505"/><text x="4.1250%" y="591.50">&lt;F as nom::internal..</text></g><g><title>nom::combinator::recognize::{{closure}} (505 samples, 12.62%)</title><rect x="3.8750%" y="565" width="12.6250%" height="15" fill="rgb(249,199,10)" fg:x="155" fg:w="505"/><text x="4.1250%" y="575.50">nom::combinator::re..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (505 samples, 12.62%)</title><rect x="3.8750%" y="549" width="12.6250%" height="15" fill="rgb(249,222,13)" fg:x="155" fg:w="505"/><text x="4.1250%" y="559.50">&lt;F as nom::internal..</text></g><g><title>askama_derive::parser::skip_till::{{closure}} (505 samples, 12.62%)</title><rect x="3.8750%" y="533" width="12.6250%" height="15" fill="rgb(244,185,38)" fg:x="155" fg:w="505"/><text x="4.1250%" y="543.50">askama_derive::pars..</text></g><g><title>nom::branch::alt::{{closure}} (505 samples, 12.62%)</title><rect x="3.8750%" y="517" width="12.6250%" height="15" fill="rgb(236,202,9)" fg:x="155" fg:w="505"/><text x="4.1250%" y="527.50">nom::branch::alt::{..</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (505 samples, 12.62%)</title><rect x="3.8750%" y="501" width="12.6250%" height="15" fill="rgb(250,229,37)" fg:x="155" fg:w="505"/><text x="4.1250%" y="511.50">&lt;(A,B) as nom::bran..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (505 samples, 12.62%)</title><rect x="3.8750%" y="485" width="12.6250%" height="15" fill="rgb(206,174,23)" fg:x="155" fg:w="505"/><text x="4.1250%" y="495.50">&lt;F as nom::internal..</text></g><g><title>nom::combinator::map::{{closure}} (505 samples, 12.62%)</title><rect x="3.8750%" y="469" width="12.6250%" height="15" fill="rgb(211,33,43)" fg:x="155" fg:w="505"/><text x="4.1250%" y="479.50">nom::combinator::ma..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (505 samples, 12.62%)</title><rect x="3.8750%" y="453" width="12.6250%" height="15" fill="rgb(245,58,50)" fg:x="155" fg:w="505"/><text x="4.1250%" y="463.50">&lt;F as nom::internal..</text></g><g><title>nom::branch::alt::{{closure}} (165 samples, 4.12%)</title><rect x="12.3750%" y="437" width="4.1250%" height="15" fill="rgb(244,68,36)" fg:x="495" fg:w="165"/><text x="12.6250%" y="447.50">nom:..</text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (165 samples, 4.12%)</title><rect x="12.3750%" y="421" width="4.1250%" height="15" fill="rgb(232,229,15)" fg:x="495" fg:w="165"/><text x="12.6250%" y="431.50">&lt;(A,..</text></g><g><title>nom::error::ParseError::or (8 samples, 0.20%)</title><rect x="16.3000%" y="405" width="0.2000%" height="15" fill="rgb(254,30,23)" fg:x="652" fg:w="8"/><text x="16.5500%" y="415.50"></text></g><g><title>askama_derive::parser::node::expr_node (1 samples, 0.03%)</title><rect x="16.5000%" y="645" width="0.0250%" height="15" fill="rgb(235,160,14)" fg:x="660" fg:w="1"/><text x="16.7500%" y="655.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.03%)</title><rect x="16.5000%" y="629" width="0.0250%" height="15" fill="rgb(212,155,44)" fg:x="660" fg:w="1"/><text x="16.7500%" y="639.50"></text></g><g><title>&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="16.5000%" y="613" width="0.0250%" height="15" fill="rgb(226,2,50)" fg:x="660" fg:w="1"/><text x="16.7500%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="16.5000%" y="597" width="0.0250%" height="15" fill="rgb(234,177,6)" fg:x="660" fg:w="1"/><text x="16.7500%" y="607.50"></text></g><g><title>nom::combinator::cut::{{closure}} (1 samples, 0.03%)</title><rect x="16.5000%" y="581" width="0.0250%" height="15" fill="rgb(217,24,9)" fg:x="660" fg:w="1"/><text x="16.7500%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="16.5000%" y="565" width="0.0250%" height="15" fill="rgb(220,13,46)" fg:x="660" fg:w="1"/><text x="16.7500%" y="575.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.03%)</title><rect x="16.5000%" y="549" width="0.0250%" height="15" fill="rgb(239,221,27)" fg:x="660" fg:w="1"/><text x="16.7500%" y="559.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="16.5000%" y="533" width="0.0250%" height="15" fill="rgb(222,198,25)" fg:x="660" fg:w="1"/><text x="16.7500%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="16.5000%" y="517" width="0.0250%" height="15" fill="rgb(211,99,13)" fg:x="660" fg:w="1"/><text x="16.7500%" y="527.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1 samples, 0.03%)</title><rect x="16.5000%" y="501" width="0.0250%" height="15" fill="rgb(232,111,31)" fg:x="660" fg:w="1"/><text x="16.7500%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="16.5000%" y="485" width="0.0250%" height="15" fill="rgb(245,82,37)" fg:x="660" fg:w="1"/><text x="16.7500%" y="495.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="16.5000%" y="469" width="0.0250%" height="15" fill="rgb(227,149,46)" fg:x="660" fg:w="1"/><text x="16.7500%" y="479.50"></text></g><g><title>askama_derive::parser::expr::Expr::parse (1 samples, 0.03%)</title><rect x="16.5000%" y="453" width="0.0250%" height="15" fill="rgb(218,36,50)" fg:x="660" fg:w="1"/><text x="16.7500%" y="463.50"></text></g><g><title>askama_derive::parser::expr::expr_any (1 samples, 0.03%)</title><rect x="16.5000%" y="437" width="0.0250%" height="15" fill="rgb(226,80,48)" fg:x="660" fg:w="1"/><text x="16.7500%" y="447.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.03%)</title><rect x="16.5000%" y="421" width="0.0250%" height="15" fill="rgb(238,224,15)" fg:x="660" fg:w="1"/><text x="16.7500%" y="431.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="16.5000%" y="405" width="0.0250%" height="15" fill="rgb(241,136,10)" fg:x="660" fg:w="1"/><text x="16.7500%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.30%)</title><rect x="16.9000%" y="549" width="0.3000%" height="15" fill="rgb(208,32,45)" fg:x="676" fg:w="12"/><text x="17.1500%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (3 samples, 0.07%)</title><rect x="23.6250%" y="357" width="0.0750%" height="15" fill="rgb(207,135,9)" fg:x="945" fg:w="3"/><text x="23.8750%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (22 samples, 0.55%)</title><rect x="23.1750%" y="389" width="0.5500%" height="15" fill="rgb(206,86,44)" fg:x="927" fg:w="22"/><text x="23.4250%" y="399.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (22 samples, 0.55%)</title><rect x="23.1750%" y="373" width="0.5500%" height="15" fill="rgb(245,177,15)" fg:x="927" fg:w="22"/><text x="23.4250%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (1 samples, 0.03%)</title><rect x="23.7000%" y="357" width="0.0250%" height="15" fill="rgb(206,64,50)" fg:x="948" fg:w="1"/><text x="23.9500%" y="367.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputIter&gt;::iter_indices (39 samples, 0.97%)</title><rect x="22.8250%" y="437" width="0.9750%" height="15" fill="rgb(234,36,40)" fg:x="913" fg:w="39"/><text x="23.0750%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (34 samples, 0.85%)</title><rect x="22.9500%" y="421" width="0.8500%" height="15" fill="rgb(213,64,8)" fg:x="918" fg:w="34"/><text x="23.2000%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (25 samples, 0.62%)</title><rect x="23.1750%" y="405" width="0.6250%" height="15" fill="rgb(210,75,36)" fg:x="927" fg:w="25"/><text x="23.4250%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (3 samples, 0.07%)</title><rect x="23.7250%" y="389" width="0.0750%" height="15" fill="rgb(229,88,21)" fg:x="949" fg:w="3"/><text x="23.9750%" y="399.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (5 samples, 0.12%)</title><rect x="25.2500%" y="357" width="0.1250%" height="15" fill="rgb(252,204,47)" fg:x="1010" fg:w="5"/><text x="25.5000%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4 samples, 0.10%)</title><rect x="25.3750%" y="357" width="0.1000%" height="15" fill="rgb(208,77,27)" fg:x="1015" fg:w="4"/><text x="25.6250%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4 samples, 0.10%)</title><rect x="25.3750%" y="341" width="0.1000%" height="15" fill="rgb(221,76,26)" fg:x="1015" fg:w="4"/><text x="25.6250%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="25.4500%" y="325" width="0.0250%" height="15" fill="rgb(225,139,18)" fg:x="1018" fg:w="1"/><text x="25.7000%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::as_ptr (1 samples, 0.03%)</title><rect x="25.4500%" y="309" width="0.0250%" height="15" fill="rgb(230,137,11)" fg:x="1018" fg:w="1"/><text x="25.7000%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (37 samples, 0.93%)</title><rect x="24.6000%" y="373" width="0.9250%" height="15" fill="rgb(212,28,1)" fg:x="984" fg:w="37"/><text x="24.8500%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (2 samples, 0.05%)</title><rect x="25.4750%" y="357" width="0.0500%" height="15" fill="rgb(248,164,17)" fg:x="1019" fg:w="2"/><text x="25.7250%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::len (1 samples, 0.03%)</title><rect x="25.6250%" y="357" width="0.0250%" height="15" fill="rgb(222,171,42)" fg:x="1025" fg:w="1"/><text x="25.8750%" y="367.50"></text></g><g><title>core::ptr::metadata::metadata (1 samples, 0.03%)</title><rect x="25.6250%" y="341" width="0.0250%" height="15" fill="rgb(243,84,45)" fg:x="1025" fg:w="1"/><text x="25.8750%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.05%)</title><rect x="25.7000%" y="341" width="0.0500%" height="15" fill="rgb(252,49,23)" fg:x="1028" fg:w="2"/><text x="25.9500%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (81 samples, 2.02%)</title><rect x="23.8000%" y="437" width="2.0250%" height="15" fill="rgb(215,19,7)" fg:x="952" fg:w="81"/><text x="24.0500%" y="447.50">&lt;..</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (77 samples, 1.93%)</title><rect x="23.9000%" y="421" width="1.9250%" height="15" fill="rgb(238,81,41)" fg:x="956" fg:w="77"/><text x="24.1500%" y="431.50">c..</text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (74 samples, 1.85%)</title><rect x="23.9750%" y="405" width="1.8500%" height="15" fill="rgb(210,199,37)" fg:x="959" fg:w="74"/><text x="24.2250%" y="415.50">c..</text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (64 samples, 1.60%)</title><rect x="24.2250%" y="389" width="1.6000%" height="15" fill="rgb(244,192,49)" fg:x="969" fg:w="64"/><text x="24.4750%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (12 samples, 0.30%)</title><rect x="25.5250%" y="373" width="0.3000%" height="15" fill="rgb(226,211,11)" fg:x="1021" fg:w="12"/><text x="25.7750%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (7 samples, 0.17%)</title><rect x="25.6500%" y="357" width="0.1750%" height="15" fill="rgb(236,162,54)" fg:x="1026" fg:w="7"/><text x="25.9000%" y="367.50"></text></g><g><title>core::ptr::slice_from_raw_parts (3 samples, 0.07%)</title><rect x="25.7500%" y="341" width="0.0750%" height="15" fill="rgb(220,229,9)" fg:x="1030" fg:w="3"/><text x="26.0000%" y="351.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (3 samples, 0.07%)</title><rect x="25.7500%" y="325" width="0.0750%" height="15" fill="rgb(250,87,22)" fg:x="1030" fg:w="3"/><text x="26.0000%" y="335.50"></text></g><g><title>&lt;char as nom::traits::AsChar&gt;::as_char (1 samples, 0.03%)</title><rect x="25.8250%" y="437" width="0.0250%" height="15" fill="rgb(239,43,17)" fg:x="1033" fg:w="1"/><text x="26.0750%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (24 samples, 0.60%)</title><rect x="26.6750%" y="421" width="0.6000%" height="15" fill="rgb(231,177,25)" fg:x="1067" fg:w="24"/><text x="26.9250%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (20 samples, 0.50%)</title><rect x="26.7750%" y="405" width="0.5000%" height="15" fill="rgb(219,179,1)" fg:x="1071" fg:w="20"/><text x="27.0250%" y="415.50"></text></g><g><title>core::mem::size_of (1 samples, 0.03%)</title><rect x="27.2500%" y="389" width="0.0250%" height="15" fill="rgb(238,219,53)" fg:x="1090" fg:w="1"/><text x="27.5000%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (29 samples, 0.72%)</title><rect x="27.3000%" y="405" width="0.7250%" height="15" fill="rgb(232,167,36)" fg:x="1092" fg:w="29"/><text x="27.5500%" y="415.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (10 samples, 0.25%)</title><rect x="27.7750%" y="389" width="0.2500%" height="15" fill="rgb(244,19,51)" fg:x="1111" fg:w="10"/><text x="28.0250%" y="399.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::from_u32_unchecked (4 samples, 0.10%)</title><rect x="27.9250%" y="373" width="0.1000%" height="15" fill="rgb(224,6,22)" fg:x="1117" fg:w="4"/><text x="28.1750%" y="383.50"></text></g><g><title>core::char::convert::from_u32_unchecked (4 samples, 0.10%)</title><rect x="27.9250%" y="357" width="0.1000%" height="15" fill="rgb(224,145,5)" fg:x="1117" fg:w="4"/><text x="28.1750%" y="367.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.20%)</title><rect x="28.9750%" y="389" width="0.2000%" height="15" fill="rgb(234,130,49)" fg:x="1159" fg:w="8"/><text x="29.2250%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (7 samples, 0.17%)</title><rect x="29.7500%" y="373" width="0.1750%" height="15" fill="rgb(254,6,2)" fg:x="1190" fg:w="7"/><text x="30.0000%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (3 samples, 0.07%)</title><rect x="29.9250%" y="373" width="0.0750%" height="15" fill="rgb(208,96,46)" fg:x="1197" fg:w="3"/><text x="30.1750%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.10%)</title><rect x="30.1000%" y="357" width="0.1000%" height="15" fill="rgb(239,3,39)" fg:x="1204" fg:w="4"/><text x="30.3500%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.05%)</title><rect x="30.1500%" y="341" width="0.0500%" height="15" fill="rgb(233,210,1)" fg:x="1206" fg:w="2"/><text x="30.4000%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (364 samples, 9.10%)</title><rect x="21.1250%" y="469" width="9.1000%" height="15" fill="rgb(244,137,37)" fg:x="845" fg:w="364"/><text x="21.3750%" y="479.50">core::ops::fu..</text></g><g><title>nom::character::complete::anychar (361 samples, 9.03%)</title><rect x="21.2000%" y="453" width="9.0250%" height="15" fill="rgb(240,136,2)" fg:x="848" fg:w="361"/><text x="21.4500%" y="463.50">nom::characte..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 4.38%)</title><rect x="25.8500%" y="437" width="4.3750%" height="15" fill="rgb(239,18,37)" fg:x="1034" fg:w="175"/><text x="26.1000%" y="447.50">&lt;core..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 2.95%)</title><rect x="27.2750%" y="421" width="2.9500%" height="15" fill="rgb(218,185,22)" fg:x="1091" fg:w="118"/><text x="27.5250%" y="431.50">&lt;c..</text></g><g><title>core::str::validations::next_code_point (88 samples, 2.20%)</title><rect x="28.0250%" y="405" width="2.2000%" height="15" fill="rgb(225,218,4)" fg:x="1121" fg:w="88"/><text x="28.2750%" y="415.50">c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 1.05%)</title><rect x="29.1750%" y="389" width="1.0500%" height="15" fill="rgb(230,182,32)" fg:x="1167" fg:w="42"/><text x="29.4250%" y="399.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (9 samples, 0.23%)</title><rect x="30.0000%" y="373" width="0.2250%" height="15" fill="rgb(242,56,43)" fg:x="1200" fg:w="9"/><text x="30.2500%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="30.2000%" y="357" width="0.0250%" height="15" fill="rgb(233,99,24)" fg:x="1208" fg:w="1"/><text x="30.4500%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.15%)</title><rect x="43.0500%" y="293" width="0.1500%" height="15" fill="rgb(234,209,42)" fg:x="1722" fg:w="6"/><text x="43.3000%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.15%)</title><rect x="43.0500%" y="277" width="0.1500%" height="15" fill="rgb(227,7,12)" fg:x="1722" fg:w="6"/><text x="43.3000%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 1.93%)</title><rect x="41.4750%" y="341" width="1.9250%" height="15" fill="rgb(245,203,43)" fg:x="1659" fg:w="77"/><text x="41.7250%" y="351.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (70 samples, 1.75%)</title><rect x="41.6500%" y="325" width="1.7500%" height="15" fill="rgb(238,205,33)" fg:x="1666" fg:w="70"/><text x="41.9000%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (20 samples, 0.50%)</title><rect x="42.9000%" y="309" width="0.5000%" height="15" fill="rgb(231,56,7)" fg:x="1716" fg:w="20"/><text x="43.1500%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (8 samples, 0.20%)</title><rect x="43.2000%" y="293" width="0.2000%" height="15" fill="rgb(244,186,29)" fg:x="1728" fg:w="8"/><text x="43.4500%" y="303.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (13 samples, 0.33%)</title><rect x="43.4000%" y="341" width="0.3250%" height="15" fill="rgb(234,111,31)" fg:x="1736" fg:w="13"/><text x="43.6500%" y="351.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.38%)</title><rect x="43.7250%" y="341" width="0.3750%" height="15" fill="rgb(241,149,10)" fg:x="1749" fg:w="15"/><text x="43.9750%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (312 samples, 7.80%)</title><rect x="38.8250%" y="357" width="7.8000%" height="15" fill="rgb(249,206,44)" fg:x="1553" fg:w="312"/><text x="39.0750%" y="367.50">core::iter:..</text></g><g><title>core::iter::traits::iterator::Iterator::position::check::{{closure}} (101 samples, 2.52%)</title><rect x="44.1000%" y="341" width="2.5250%" height="15" fill="rgb(251,153,30)" fg:x="1764" fg:w="101"/><text x="44.3500%" y="351.50">co..</text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare::{{closure}} (69 samples, 1.73%)</title><rect x="44.9000%" y="325" width="1.7250%" height="15" fill="rgb(239,152,38)" fg:x="1796" fg:w="69"/><text x="45.1500%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (47 samples, 1.18%)</title><rect x="45.4500%" y="309" width="1.1750%" height="15" fill="rgb(249,139,47)" fg:x="1818" fg:w="47"/><text x="45.7000%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::ne (37 samples, 0.93%)</title><rect x="45.7000%" y="293" width="0.9250%" height="15" fill="rgb(244,64,35)" fg:x="1828" fg:w="37"/><text x="45.9500%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (345 samples, 8.62%)</title><rect x="38.3750%" y="373" width="8.6250%" height="15" fill="rgb(216,46,15)" fg:x="1535" fg:w="345"/><text x="38.6250%" y="383.50">core::iter::..</text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (15 samples, 0.38%)</title><rect x="46.6250%" y="357" width="0.3750%" height="15" fill="rgb(250,74,19)" fg:x="1865" fg:w="15"/><text x="46.8750%" y="367.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (7 samples, 0.17%)</title><rect x="47.9750%" y="357" width="0.1750%" height="15" fill="rgb(249,42,33)" fg:x="1919" fg:w="7"/><text x="48.2250%" y="367.50"></text></g><g><title>core::cmp::min (90 samples, 2.25%)</title><rect x="50.2250%" y="325" width="2.2500%" height="15" fill="rgb(242,149,17)" fg:x="2009" fg:w="90"/><text x="50.4750%" y="335.50">c..</text></g><g><title>core::cmp::Ord::min (90 samples, 2.25%)</title><rect x="50.2250%" y="309" width="2.2500%" height="15" fill="rgb(244,29,21)" fg:x="2009" fg:w="90"/><text x="50.4750%" y="319.50">c..</text></g><g><title>core::cmp::min_by (80 samples, 2.00%)</title><rect x="50.4750%" y="293" width="2.0000%" height="15" fill="rgb(220,130,37)" fg:x="2019" fg:w="80"/><text x="50.7250%" y="303.50">c..</text></g><g><title>core::ops::function::FnOnce::call_once (44 samples, 1.10%)</title><rect x="51.3750%" y="277" width="1.1000%" height="15" fill="rgb(211,67,2)" fg:x="2055" fg:w="44"/><text x="51.6250%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (29 samples, 0.72%)</title><rect x="51.7500%" y="261" width="0.7250%" height="15" fill="rgb(235,68,52)" fg:x="2070" fg:w="29"/><text x="52.0000%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (351 samples, 8.78%)</title><rect x="47.0000%" y="373" width="8.7750%" height="15" fill="rgb(246,142,3)" fg:x="1880" fg:w="351"/><text x="47.2500%" y="383.50">core::iter::..</text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (305 samples, 7.62%)</title><rect x="48.1500%" y="357" width="7.6250%" height="15" fill="rgb(241,25,7)" fg:x="1926" fg:w="305"/><text x="48.4000%" y="367.50">core::iter..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (281 samples, 7.03%)</title><rect x="48.7500%" y="341" width="7.0250%" height="15" fill="rgb(242,119,39)" fg:x="1950" fg:w="281"/><text x="49.0000%" y="351.50">&lt;core::it..</text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (132 samples, 3.30%)</title><rect x="52.4750%" y="325" width="3.3000%" height="15" fill="rgb(241,98,45)" fg:x="2099" fg:w="132"/><text x="52.7250%" y="335.50">cor..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (111 samples, 2.77%)</title><rect x="53.0000%" y="309" width="2.7750%" height="15" fill="rgb(254,28,30)" fg:x="2120" fg:w="111"/><text x="53.2500%" y="319.50">&lt;c..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (21 samples, 0.53%)</title><rect x="55.2500%" y="293" width="0.5250%" height="15" fill="rgb(241,142,54)" fg:x="2210" fg:w="21"/><text x="55.5000%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.05%)</title><rect x="58.2750%" y="341" width="0.0500%" height="15" fill="rgb(222,85,15)" fg:x="2331" fg:w="2"/><text x="58.5250%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.05%)</title><rect x="58.2750%" y="325" width="0.0500%" height="15" fill="rgb(210,85,47)" fg:x="2331" fg:w="2"/><text x="58.5250%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (11 samples, 0.28%)</title><rect x="58.3250%" y="341" width="0.2750%" height="15" fill="rgb(224,206,25)" fg:x="2333" fg:w="11"/><text x="58.5750%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.03%)</title><rect x="58.6000%" y="341" width="0.0250%" height="15" fill="rgb(243,201,19)" fg:x="2344" fg:w="1"/><text x="58.8500%" y="351.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (877 samples, 21.93%)</title><rect x="36.7500%" y="389" width="21.9250%" height="15" fill="rgb(236,59,4)" fg:x="1470" fg:w="877"/><text x="37.0000%" y="399.50">&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (116 samples, 2.90%)</title><rect x="55.7750%" y="373" width="2.9000%" height="15" fill="rgb(254,179,45)" fg:x="2231" fg:w="116"/><text x="56.0250%" y="383.50">co..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (100 samples, 2.50%)</title><rect x="56.1750%" y="357" width="2.5000%" height="15" fill="rgb(226,14,10)" fg:x="2247" fg:w="100"/><text x="56.4250%" y="367.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (2 samples, 0.05%)</title><rect x="58.6250%" y="341" width="0.0500%" height="15" fill="rgb(244,27,41)" fg:x="2345" fg:w="2"/><text x="58.8750%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (893 samples, 22.32%)</title><rect x="36.4250%" y="405" width="22.3250%" height="15" fill="rgb(235,35,32)" fg:x="1457" fg:w="893"/><text x="36.6750%" y="415.50">&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;..</text></g><g><title>&lt;&amp;str as nom::traits::AsBytes&gt;::as_bytes (3 samples, 0.07%)</title><rect x="58.6750%" y="389" width="0.0750%" height="15" fill="rgb(218,68,31)" fg:x="2347" fg:w="3"/><text x="58.9250%" y="399.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputLength&gt;::input_len (4 samples, 0.10%)</title><rect x="58.7500%" y="405" width="0.1000%" height="15" fill="rgb(207,120,37)" fg:x="2350" fg:w="4"/><text x="59.0000%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::len (2 samples, 0.05%)</title><rect x="58.8000%" y="389" width="0.0500%" height="15" fill="rgb(227,98,0)" fg:x="2352" fg:w="2"/><text x="59.0500%" y="399.50"></text></g><g><title>&lt;nom::error::Error&lt;I&gt; as nom::error::ParseError&lt;I&gt;&gt;::from_error_kind (7 samples, 0.17%)</title><rect x="58.8500%" y="405" width="0.1750%" height="15" fill="rgb(207,7,3)" fg:x="2354" fg:w="7"/><text x="59.1000%" y="415.50"></text></g><g><title>[libc.so.6] (64 samples, 1.60%)</title><rect x="59.0250%" y="405" width="1.6000%" height="15" fill="rgb(206,98,19)" fg:x="2361" fg:w="64"/><text x="59.2750%" y="415.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,108 samples, 27.70%)</title><rect x="33.0750%" y="437" width="27.7000%" height="15" fill="rgb(217,5,26)" fg:x="1323" fg:w="1108"/><text x="33.3250%" y="447.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::bytes::complete::tag::{{closure}} (1,095 samples, 27.38%)</title><rect x="33.4000%" y="421" width="27.3750%" height="15" fill="rgb(235,190,38)" fg:x="1336" fg:w="1095"/><text x="33.6500%" y="431.50">nom::bytes::complete::tag::{{closure}}</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (6 samples, 0.15%)</title><rect x="60.6250%" y="405" width="0.1500%" height="15" fill="rgb(247,86,24)" fg:x="2425" fg:w="6"/><text x="60.8750%" y="415.50"></text></g><g><title>&lt;nom::error::Error&lt;I&gt; as nom::error::ParseError&lt;I&gt;&gt;::append (10 samples, 0.25%)</title><rect x="60.7750%" y="437" width="0.2500%" height="15" fill="rgb(205,101,16)" fg:x="2431" fg:w="10"/><text x="61.0250%" y="447.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (9 samples, 0.23%)</title><rect x="61.0250%" y="437" width="0.2250%" height="15" fill="rgb(246,168,33)" fg:x="2441" fg:w="9"/><text x="61.2750%" y="447.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,626 samples, 40.65%)</title><rect x="20.7500%" y="485" width="40.6500%" height="15" fill="rgb(231,114,1)" fg:x="830" fg:w="1626"/><text x="21.0000%" y="495.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::branch::alt::{{closure}} (1,247 samples, 31.18%)</title><rect x="30.2250%" y="469" width="31.1750%" height="15" fill="rgb(207,184,53)" fg:x="1209" fg:w="1247"/><text x="30.4750%" y="479.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1,244 samples, 31.10%)</title><rect x="30.3000%" y="453" width="31.1000%" height="15" fill="rgb(224,95,51)" fg:x="1212" fg:w="1244"/><text x="30.5500%" y="463.50">&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;:..</text></g><g><title>nom::error::ParseError::or (6 samples, 0.15%)</title><rect x="61.2500%" y="437" width="0.1500%" height="15" fill="rgb(212,188,45)" fg:x="2450" fg:w="6"/><text x="61.5000%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (29 samples, 0.72%)</title><rect x="61.4000%" y="485" width="0.7250%" height="15" fill="rgb(223,154,38)" fg:x="2456" fg:w="29"/><text x="61.6500%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (9 samples, 0.23%)</title><rect x="62.1250%" y="485" width="0.2250%" height="15" fill="rgb(251,22,52)" fg:x="2485" fg:w="9"/><text x="62.3750%" y="495.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (4 samples, 0.10%)</title><rect x="62.2500%" y="469" width="0.1000%" height="15" fill="rgb(229,209,22)" fg:x="2490" fg:w="4"/><text x="62.5000%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,759 samples, 43.98%)</title><rect x="18.4750%" y="517" width="43.9750%" height="15" fill="rgb(234,138,34)" fg:x="739" fg:w="1759"/><text x="18.7250%" y="527.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::map::{{closure}} (1,749 samples, 43.73%)</title><rect x="18.7250%" y="501" width="43.7250%" height="15" fill="rgb(212,95,11)" fg:x="749" fg:w="1749"/><text x="18.9750%" y="511.50">nom::combinator::map::{{closure}}</text></g><g><title>core::ops::function::FnMut::call_mut (4 samples, 0.10%)</title><rect x="62.3500%" y="485" width="0.1000%" height="15" fill="rgb(240,179,47)" fg:x="2494" fg:w="4"/><text x="62.6000%" y="495.50"></text></g><g><title>askama_derive::parser::skip_till::Next::NotEnd (1 samples, 0.03%)</title><rect x="62.4250%" y="469" width="0.0250%" height="15" fill="rgb(240,163,11)" fg:x="2497" fg:w="1"/><text x="62.6750%" y="479.50"></text></g><g><title>[libc.so.6] (37 samples, 0.93%)</title><rect x="62.4500%" y="517" width="0.9250%" height="15" fill="rgb(236,37,12)" fg:x="2498" fg:w="37"/><text x="62.7000%" y="527.50"></text></g><g><title>askama_derive::generator::find_used_templates (1,878 samples, 46.95%)</title><rect x="16.5000%" y="837" width="46.9500%" height="15" fill="rgb(232,164,16)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="847.50">askama_derive::generator::find_used_templates</text></g><g><title>askama_derive::parser::parse (1,878 samples, 46.95%)</title><rect x="16.5000%" y="821" width="46.9500%" height="15" fill="rgb(244,205,15)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="831.50">askama_derive::parser::parse</text></g><g><title>askama_derive::parser::node::Node::parse (1,878 samples, 46.95%)</title><rect x="16.5000%" y="805" width="46.9500%" height="15" fill="rgb(223,117,47)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="815.50">askama_derive::parser::node::Node::parse</text></g><g><title>askama_derive::parser::node::parse_template (1,878 samples, 46.95%)</title><rect x="16.5000%" y="789" width="46.9500%" height="15" fill="rgb(244,107,35)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="799.50">askama_derive::parser::node::parse_template</text></g><g><title>nom::multi::many0::{{closure}} (1,878 samples, 46.95%)</title><rect x="16.5000%" y="773" width="46.9500%" height="15" fill="rgb(205,140,8)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="783.50">nom::multi::many0::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,878 samples, 46.95%)</title><rect x="16.5000%" y="757" width="46.9500%" height="15" fill="rgb(228,84,46)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="767.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::branch::alt::{{closure}} (1,878 samples, 46.95%)</title><rect x="16.5000%" y="741" width="46.9500%" height="15" fill="rgb(254,188,9)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="751.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1,878 samples, 46.95%)</title><rect x="16.5000%" y="725" width="46.9500%" height="15" fill="rgb(206,112,54)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="735.50">&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,878 samples, 46.95%)</title><rect x="16.5000%" y="709" width="46.9500%" height="15" fill="rgb(216,84,49)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="719.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::complete::{{closure}} (1,878 samples, 46.95%)</title><rect x="16.5000%" y="693" width="46.9500%" height="15" fill="rgb(214,194,35)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="703.50">nom::combinator::complete::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,878 samples, 46.95%)</title><rect x="16.5000%" y="677" width="46.9500%" height="15" fill="rgb(249,28,3)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="687.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (1,878 samples, 46.95%)</title><rect x="16.5000%" y="661" width="46.9500%" height="15" fill="rgb(222,56,52)" fg:x="660" fg:w="1878"/><text x="16.7500%" y="671.50">askama_derive::parser::node::parse_template::{{closure}}</text></g><g><title>askama_derive::parser::take_content (1,877 samples, 46.92%)</title><rect x="16.5250%" y="645" width="46.9250%" height="15" fill="rgb(245,217,50)" fg:x="661" fg:w="1877"/><text x="16.7750%" y="655.50">askama_derive::parser::take_content</text></g><g><title>nom::combinator::opt::{{closure}} (1,877 samples, 46.92%)</title><rect x="16.5250%" y="629" width="46.9250%" height="15" fill="rgb(213,201,24)" fg:x="661" fg:w="1877"/><text x="16.7750%" y="639.50">nom::combinator::opt::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,877 samples, 46.92%)</title><rect x="16.5250%" y="613" width="46.9250%" height="15" fill="rgb(248,116,28)" fg:x="661" fg:w="1877"/><text x="16.7750%" y="623.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::recognize::{{closure}} (1,877 samples, 46.92%)</title><rect x="16.5250%" y="597" width="46.9250%" height="15" fill="rgb(219,72,43)" fg:x="661" fg:w="1877"/><text x="16.7750%" y="607.50">nom::combinator::recognize::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,877 samples, 46.92%)</title><rect x="16.5250%" y="581" width="46.9250%" height="15" fill="rgb(209,138,14)" fg:x="661" fg:w="1877"/><text x="16.7750%" y="591.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>askama_derive::parser::skip_till::{{closure}} (1,877 samples, 46.92%)</title><rect x="16.5250%" y="565" width="46.9250%" height="15" fill="rgb(222,18,33)" fg:x="661" fg:w="1877"/><text x="16.7750%" y="575.50">askama_derive::parser::skip_till::{{closure}}</text></g><g><title>nom::branch::alt::{{closure}} (1,850 samples, 46.25%)</title><rect x="17.2000%" y="549" width="46.2500%" height="15" fill="rgb(213,199,7)" fg:x="688" fg:w="1850"/><text x="17.4500%" y="559.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1,846 samples, 46.15%)</title><rect x="17.3000%" y="533" width="46.1500%" height="15" fill="rgb(250,110,10)" fg:x="692" fg:w="1846"/><text x="17.5500%" y="543.50">&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (3 samples, 0.07%)</title><rect x="63.3750%" y="517" width="0.0750%" height="15" fill="rgb(248,123,6)" fg:x="2535" fg:w="3"/><text x="63.6250%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (45 samples, 1.12%)</title><rect x="63.4500%" y="389" width="1.1250%" height="15" fill="rgb(206,91,31)" fg:x="2538" fg:w="45"/><text x="63.7000%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (45 samples, 1.12%)</title><rect x="63.4500%" y="373" width="1.1250%" height="15" fill="rgb(211,154,13)" fg:x="2538" fg:w="45"/><text x="63.7000%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position::check::{{closure}} (45 samples, 1.12%)</title><rect x="63.4500%" y="357" width="1.1250%" height="15" fill="rgb(225,148,7)" fg:x="2538" fg:w="45"/><text x="63.7000%" y="367.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare::{{closure}} (45 samples, 1.12%)</title><rect x="63.4500%" y="341" width="1.1250%" height="15" fill="rgb(220,160,43)" fg:x="2538" fg:w="45"/><text x="63.7000%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (45 samples, 1.12%)</title><rect x="63.4500%" y="325" width="1.1250%" height="15" fill="rgb(213,52,39)" fg:x="2538" fg:w="45"/><text x="63.7000%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::ne (34 samples, 0.85%)</title><rect x="63.7250%" y="309" width="0.8500%" height="15" fill="rgb(243,137,7)" fg:x="2549" fg:w="34"/><text x="63.9750%" y="319.50"></text></g><g><title>askama_derive::generator::build_template (2,053 samples, 51.33%)</title><rect x="16.5000%" y="853" width="51.3250%" height="15" fill="rgb(230,79,13)" fg:x="660" fg:w="2053"/><text x="16.7500%" y="863.50">askama_derive::generator::build_template</text></g><g><title>askama_derive::parser::parse (175 samples, 4.38%)</title><rect x="63.4500%" y="837" width="4.3750%" height="15" fill="rgb(247,105,23)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="847.50">askam..</text></g><g><title>askama_derive::parser::node::Node::parse (175 samples, 4.38%)</title><rect x="63.4500%" y="821" width="4.3750%" height="15" fill="rgb(223,179,41)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="831.50">askam..</text></g><g><title>askama_derive::parser::node::parse_template (175 samples, 4.38%)</title><rect x="63.4500%" y="805" width="4.3750%" height="15" fill="rgb(218,9,34)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="815.50">askam..</text></g><g><title>nom::multi::many0::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="789" width="4.3750%" height="15" fill="rgb(222,106,8)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="799.50">nom::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (175 samples, 4.38%)</title><rect x="63.4500%" y="773" width="4.3750%" height="15" fill="rgb(211,220,0)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="783.50">&lt;F as..</text></g><g><title>nom::branch::alt::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="757" width="4.3750%" height="15" fill="rgb(229,52,16)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="767.50">nom::..</text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (175 samples, 4.38%)</title><rect x="63.4500%" y="741" width="4.3750%" height="15" fill="rgb(212,155,18)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="751.50">&lt;(A,B..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (175 samples, 4.38%)</title><rect x="63.4500%" y="725" width="4.3750%" height="15" fill="rgb(242,21,14)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="735.50">&lt;F as..</text></g><g><title>nom::combinator::complete::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="709" width="4.3750%" height="15" fill="rgb(222,19,48)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="719.50">nom::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (175 samples, 4.38%)</title><rect x="63.4500%" y="693" width="4.3750%" height="15" fill="rgb(232,45,27)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="703.50">&lt;F as..</text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="677" width="4.3750%" height="15" fill="rgb(249,103,42)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="687.50">askam..</text></g><g><title>askama_derive::parser::take_content (175 samples, 4.38%)</title><rect x="63.4500%" y="661" width="4.3750%" height="15" fill="rgb(246,81,33)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="671.50">askam..</text></g><g><title>nom::combinator::opt::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="645" width="4.3750%" height="15" fill="rgb(252,33,42)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="655.50">nom::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (175 samples, 4.38%)</title><rect x="63.4500%" y="629" width="4.3750%" height="15" fill="rgb(209,212,41)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="639.50">&lt;F as..</text></g><g><title>nom::combinator::recognize::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="613" width="4.3750%" height="15" fill="rgb(207,154,6)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="623.50">nom::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (175 samples, 4.38%)</title><rect x="63.4500%" y="597" width="4.3750%" height="15" fill="rgb(223,64,47)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="607.50">&lt;F as..</text></g><g><title>askama_derive::parser::skip_till::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="581" width="4.3750%" height="15" fill="rgb(211,161,38)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="591.50">askam..</text></g><g><title>nom::branch::alt::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="565" width="4.3750%" height="15" fill="rgb(219,138,40)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="575.50">nom::..</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (175 samples, 4.38%)</title><rect x="63.4500%" y="549" width="4.3750%" height="15" fill="rgb(241,228,46)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="559.50">&lt;(A,B..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (175 samples, 4.38%)</title><rect x="63.4500%" y="533" width="4.3750%" height="15" fill="rgb(223,209,38)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="543.50">&lt;F as..</text></g><g><title>nom::combinator::map::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="517" width="4.3750%" height="15" fill="rgb(236,164,45)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="527.50">nom::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (175 samples, 4.38%)</title><rect x="63.4500%" y="501" width="4.3750%" height="15" fill="rgb(231,15,5)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="511.50">&lt;F as..</text></g><g><title>nom::branch::alt::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="485" width="4.3750%" height="15" fill="rgb(252,35,15)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="495.50">nom::..</text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (175 samples, 4.38%)</title><rect x="63.4500%" y="469" width="4.3750%" height="15" fill="rgb(248,181,18)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="479.50">&lt;(A,B..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (175 samples, 4.38%)</title><rect x="63.4500%" y="453" width="4.3750%" height="15" fill="rgb(233,39,42)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="463.50">&lt;F as..</text></g><g><title>nom::bytes::complete::tag::{{closure}} (175 samples, 4.38%)</title><rect x="63.4500%" y="437" width="4.3750%" height="15" fill="rgb(238,110,33)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="447.50">nom::..</text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (175 samples, 4.38%)</title><rect x="63.4500%" y="421" width="4.3750%" height="15" fill="rgb(233,195,10)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="431.50">&lt;&amp;str..</text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (175 samples, 4.38%)</title><rect x="63.4500%" y="405" width="4.3750%" height="15" fill="rgb(254,105,3)" fg:x="2538" fg:w="175"/><text x="63.7000%" y="415.50">&lt;&amp;[u8..</text></g><g><title>core::iter::traits::iterator::Iterator::zip (130 samples, 3.25%)</title><rect x="64.5750%" y="389" width="3.2500%" height="15" fill="rgb(221,225,9)" fg:x="2583" fg:w="130"/><text x="64.8250%" y="399.50">cor..</text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (130 samples, 3.25%)</title><rect x="64.5750%" y="373" width="3.2500%" height="15" fill="rgb(224,227,45)" fg:x="2583" fg:w="130"/><text x="64.8250%" y="383.50">cor..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (130 samples, 3.25%)</title><rect x="64.5750%" y="357" width="3.2500%" height="15" fill="rgb(229,198,43)" fg:x="2583" fg:w="130"/><text x="64.8250%" y="367.50">&lt;co..</text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (130 samples, 3.25%)</title><rect x="64.5750%" y="341" width="3.2500%" height="15" fill="rgb(206,209,35)" fg:x="2583" fg:w="130"/><text x="64.8250%" y="351.50">cor..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (130 samples, 3.25%)</title><rect x="64.5750%" y="325" width="3.2500%" height="15" fill="rgb(245,195,53)" fg:x="2583" fg:w="130"/><text x="64.8250%" y="335.50">&lt;co..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (22 samples, 0.55%)</title><rect x="67.2750%" y="309" width="0.5500%" height="15" fill="rgb(240,92,26)" fg:x="2691" fg:w="22"/><text x="67.5250%" y="319.50"></text></g><g><title>askama_derive::generator::find_used_templates (1 samples, 0.03%)</title><rect x="67.8250%" y="821" width="0.0250%" height="15" fill="rgb(207,40,23)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="831.50"></text></g><g><title>askama_derive::parser::parse (1 samples, 0.03%)</title><rect x="67.8250%" y="805" width="0.0250%" height="15" fill="rgb(223,111,35)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="815.50"></text></g><g><title>askama_derive::parser::node::Node::parse (1 samples, 0.03%)</title><rect x="67.8250%" y="789" width="0.0250%" height="15" fill="rgb(229,147,28)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="799.50"></text></g><g><title>askama_derive::parser::node::parse_template (1 samples, 0.03%)</title><rect x="67.8250%" y="773" width="0.0250%" height="15" fill="rgb(211,29,28)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="783.50"></text></g><g><title>nom::multi::many0::{{closure}} (1 samples, 0.03%)</title><rect x="67.8250%" y="757" width="0.0250%" height="15" fill="rgb(228,72,33)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="767.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="67.8250%" y="741" width="0.0250%" height="15" fill="rgb(205,214,31)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="751.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.03%)</title><rect x="67.8250%" y="725" width="0.0250%" height="15" fill="rgb(224,111,15)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="735.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="67.8250%" y="709" width="0.0250%" height="15" fill="rgb(253,21,26)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="719.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="67.8250%" y="693" width="0.0250%" height="15" fill="rgb(245,139,43)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="703.50"></text></g><g><title>nom::combinator::complete::{{closure}} (1 samples, 0.03%)</title><rect x="67.8250%" y="677" width="0.0250%" height="15" fill="rgb(252,170,7)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="687.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="67.8250%" y="661" width="0.0250%" height="15" fill="rgb(231,118,14)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="671.50"></text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (1 samples, 0.03%)</title><rect x="67.8250%" y="645" width="0.0250%" height="15" fill="rgb(238,83,0)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="655.50"></text></g><g><title>askama_derive::parser::take_content (1 samples, 0.03%)</title><rect x="67.8250%" y="629" width="0.0250%" height="15" fill="rgb(221,39,39)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="639.50"></text></g><g><title>askama_derive::parser::split_ws_parts (1 samples, 0.03%)</title><rect x="67.8250%" y="613" width="0.0250%" height="15" fill="rgb(222,119,46)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_end_matches (1 samples, 0.03%)</title><rect x="67.8250%" y="597" width="0.0250%" height="15" fill="rgb(222,165,49)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="607.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::ReverseSearcher&gt;::next_reject_back (1 samples, 0.03%)</title><rect x="67.8250%" y="581" width="0.0250%" height="15" fill="rgb(219,113,52)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="591.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_reject_back (1 samples, 0.03%)</title><rect x="67.8250%" y="565" width="0.0250%" height="15" fill="rgb(214,7,15)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="575.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (1 samples, 0.03%)</title><rect x="67.8250%" y="549" width="0.0250%" height="15" fill="rgb(235,32,4)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="559.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.03%)</title><rect x="67.8250%" y="533" width="0.0250%" height="15" fill="rgb(238,90,54)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="67.8250%" y="517" width="0.0250%" height="15" fill="rgb(213,208,19)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="527.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::{{closure}} (1 samples, 0.03%)</title><rect x="67.8250%" y="501" width="0.0250%" height="15" fill="rgb(233,156,4)" fg:x="2713" fg:w="1"/><text x="68.0750%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7 samples, 0.17%)</title><rect x="78.1500%" y="293" width="0.1750%" height="15" fill="rgb(207,194,5)" fg:x="3126" fg:w="7"/><text x="78.4000%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (7 samples, 0.17%)</title><rect x="78.1500%" y="277" width="0.1750%" height="15" fill="rgb(206,111,30)" fg:x="3126" fg:w="7"/><text x="78.4000%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 2.12%)</title><rect x="76.3750%" y="341" width="2.1250%" height="15" fill="rgb(243,70,54)" fg:x="3055" fg:w="85"/><text x="76.6250%" y="351.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (79 samples, 1.98%)</title><rect x="76.5250%" y="325" width="1.9750%" height="15" fill="rgb(242,28,8)" fg:x="3061" fg:w="79"/><text x="76.7750%" y="335.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (26 samples, 0.65%)</title><rect x="77.8500%" y="309" width="0.6500%" height="15" fill="rgb(219,106,18)" fg:x="3114" fg:w="26"/><text x="78.1000%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (7 samples, 0.17%)</title><rect x="78.3250%" y="293" width="0.1750%" height="15" fill="rgb(244,222,10)" fg:x="3133" fg:w="7"/><text x="78.5750%" y="303.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (25 samples, 0.62%)</title><rect x="78.5000%" y="341" width="0.6250%" height="15" fill="rgb(236,179,52)" fg:x="3140" fg:w="25"/><text x="78.7500%" y="351.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.25%)</title><rect x="79.1250%" y="341" width="0.2500%" height="15" fill="rgb(213,23,39)" fg:x="3165" fg:w="10"/><text x="79.3750%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (274 samples, 6.85%)</title><rect x="73.5250%" y="357" width="6.8500%" height="15" fill="rgb(238,48,10)" fg:x="2941" fg:w="274"/><text x="73.7750%" y="367.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::position::check::{{closure}} (40 samples, 1.00%)</title><rect x="79.3750%" y="341" width="1.0000%" height="15" fill="rgb(251,196,23)" fg:x="3175" fg:w="40"/><text x="79.6250%" y="351.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare::{{closure}} (26 samples, 0.65%)</title><rect x="79.7250%" y="325" width="0.6500%" height="15" fill="rgb(250,152,24)" fg:x="3189" fg:w="26"/><text x="79.9750%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (3 samples, 0.07%)</title><rect x="80.3000%" y="309" width="0.0750%" height="15" fill="rgb(209,150,17)" fg:x="3212" fg:w="3"/><text x="80.5500%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (311 samples, 7.78%)</title><rect x="73.0500%" y="373" width="7.7750%" height="15" fill="rgb(234,202,34)" fg:x="2922" fg:w="311"/><text x="73.3000%" y="383.50">core::iter:..</text></g><g><title>core::ops::control_flow::ControlFlow&lt;B,C&gt;::break_value (18 samples, 0.45%)</title><rect x="80.3750%" y="357" width="0.4500%" height="15" fill="rgb(253,148,53)" fg:x="3215" fg:w="18"/><text x="80.6250%" y="367.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (10 samples, 0.25%)</title><rect x="81.7000%" y="357" width="0.2500%" height="15" fill="rgb(218,129,16)" fg:x="3268" fg:w="10"/><text x="81.9500%" y="367.50"></text></g><g><title>core::cmp::min (114 samples, 2.85%)</title><rect x="83.8500%" y="325" width="2.8500%" height="15" fill="rgb(216,85,19)" fg:x="3354" fg:w="114"/><text x="84.1000%" y="335.50">co..</text></g><g><title>core::cmp::Ord::min (114 samples, 2.85%)</title><rect x="83.8500%" y="309" width="2.8500%" height="15" fill="rgb(235,228,7)" fg:x="3354" fg:w="114"/><text x="84.1000%" y="319.50">co..</text></g><g><title>core::cmp::min_by (104 samples, 2.60%)</title><rect x="84.1000%" y="293" width="2.6000%" height="15" fill="rgb(245,175,0)" fg:x="3364" fg:w="104"/><text x="84.3500%" y="303.50">co..</text></g><g><title>core::ops::function::FnOnce::call_once (51 samples, 1.27%)</title><rect x="85.4250%" y="277" width="1.2750%" height="15" fill="rgb(208,168,36)" fg:x="3417" fg:w="51"/><text x="85.6750%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (39 samples, 0.97%)</title><rect x="85.7250%" y="261" width="0.9750%" height="15" fill="rgb(246,171,24)" fg:x="3429" fg:w="39"/><text x="85.9750%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (255 samples, 6.38%)</title><rect x="80.8250%" y="373" width="6.3750%" height="15" fill="rgb(215,142,24)" fg:x="3233" fg:w="255"/><text x="81.0750%" y="383.50">core::it..</text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (210 samples, 5.25%)</title><rect x="81.9500%" y="357" width="5.2500%" height="15" fill="rgb(250,187,7)" fg:x="3278" fg:w="210"/><text x="82.2000%" y="367.50">core::..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (195 samples, 4.88%)</title><rect x="82.3250%" y="341" width="4.8750%" height="15" fill="rgb(228,66,33)" fg:x="3293" fg:w="195"/><text x="82.5750%" y="351.50">&lt;core:..</text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (20 samples, 0.50%)</title><rect x="86.7000%" y="325" width="0.5000%" height="15" fill="rgb(234,215,21)" fg:x="3468" fg:w="20"/><text x="86.9500%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.07%)</title><rect x="87.1250%" y="309" width="0.0750%" height="15" fill="rgb(222,191,20)" fg:x="3485" fg:w="3"/><text x="87.3750%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (7 samples, 0.17%)</title><rect x="89.6250%" y="341" width="0.1750%" height="15" fill="rgb(245,79,54)" fg:x="3585" fg:w="7"/><text x="89.8750%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.03%)</title><rect x="89.8000%" y="341" width="0.0250%" height="15" fill="rgb(240,10,37)" fg:x="3592" fg:w="1"/><text x="90.0500%" y="351.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (742 samples, 18.55%)</title><rect x="71.3500%" y="389" width="18.5500%" height="15" fill="rgb(214,192,32)" fg:x="2854" fg:w="742"/><text x="71.6000%" y="399.50">&lt;&amp;[u8] as nom::traits::Compar..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (108 samples, 2.70%)</title><rect x="87.2000%" y="373" width="2.7000%" height="15" fill="rgb(209,36,54)" fg:x="3488" fg:w="108"/><text x="87.4500%" y="383.50">co..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (93 samples, 2.33%)</title><rect x="87.5750%" y="357" width="2.3250%" height="15" fill="rgb(220,10,11)" fg:x="3503" fg:w="93"/><text x="87.8250%" y="367.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (3 samples, 0.07%)</title><rect x="89.8250%" y="341" width="0.0750%" height="15" fill="rgb(221,106,17)" fg:x="3593" fg:w="3"/><text x="90.0750%" y="351.50"></text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (758 samples, 18.95%)</title><rect x="71.1000%" y="405" width="18.9500%" height="15" fill="rgb(251,142,44)" fg:x="2844" fg:w="758"/><text x="71.3500%" y="415.50">&lt;&amp;str as nom::traits::Compare&lt;..</text></g><g><title>&lt;&amp;str as nom::traits::AsBytes&gt;::as_bytes (6 samples, 0.15%)</title><rect x="89.9000%" y="389" width="0.1500%" height="15" fill="rgb(238,13,15)" fg:x="3596" fg:w="6"/><text x="90.1500%" y="399.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputLength&gt;::input_len (13 samples, 0.33%)</title><rect x="90.0500%" y="405" width="0.3250%" height="15" fill="rgb(208,107,27)" fg:x="3602" fg:w="13"/><text x="90.3000%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::len (7 samples, 0.17%)</title><rect x="90.2000%" y="389" width="0.1750%" height="15" fill="rgb(205,136,37)" fg:x="3608" fg:w="7"/><text x="90.4500%" y="399.50"></text></g><g><title>&lt;nom::error::Error&lt;I&gt; as nom::error::ParseError&lt;I&gt;&gt;::from_error_kind (3 samples, 0.07%)</title><rect x="90.3750%" y="405" width="0.0750%" height="15" fill="rgb(250,205,27)" fg:x="3615" fg:w="3"/><text x="90.6250%" y="415.50"></text></g><g><title>[libc.so.6] (55 samples, 1.38%)</title><rect x="90.4500%" y="405" width="1.3750%" height="15" fill="rgb(210,80,43)" fg:x="3618" fg:w="55"/><text x="90.7000%" y="415.50"></text></g><g><title>askama_derive::generator::build_template (968 samples, 24.20%)</title><rect x="67.8250%" y="837" width="24.2000%" height="15" fill="rgb(247,160,36)" fg:x="2713" fg:w="968"/><text x="68.0750%" y="847.50">askama_derive::generator::build_template</text></g><g><title>askama_derive::parser::parse (967 samples, 24.18%)</title><rect x="67.8500%" y="821" width="24.1750%" height="15" fill="rgb(234,13,49)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="831.50">askama_derive::parser::parse</text></g><g><title>askama_derive::parser::node::Node::parse (967 samples, 24.18%)</title><rect x="67.8500%" y="805" width="24.1750%" height="15" fill="rgb(234,122,0)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="815.50">askama_derive::parser::node::Node::par..</text></g><g><title>askama_derive::parser::node::parse_template (967 samples, 24.18%)</title><rect x="67.8500%" y="789" width="24.1750%" height="15" fill="rgb(207,146,38)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="799.50">askama_derive::parser::node::parse_tem..</text></g><g><title>nom::multi::many0::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="773" width="24.1750%" height="15" fill="rgb(207,177,25)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="783.50">nom::multi::many0::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (967 samples, 24.18%)</title><rect x="67.8500%" y="757" width="24.1750%" height="15" fill="rgb(211,178,42)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="767.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::p..</text></g><g><title>nom::branch::alt::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="741" width="24.1750%" height="15" fill="rgb(230,69,54)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="751.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (967 samples, 24.18%)</title><rect x="67.8500%" y="725" width="24.1750%" height="15" fill="rgb(214,135,41)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="735.50">&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,O..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (967 samples, 24.18%)</title><rect x="67.8500%" y="709" width="24.1750%" height="15" fill="rgb(237,67,25)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="719.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::p..</text></g><g><title>nom::combinator::complete::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="693" width="24.1750%" height="15" fill="rgb(222,189,50)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="703.50">nom::combinator::complete::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (967 samples, 24.18%)</title><rect x="67.8500%" y="677" width="24.1750%" height="15" fill="rgb(245,148,34)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="687.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::p..</text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="661" width="24.1750%" height="15" fill="rgb(222,29,6)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="671.50">askama_derive::parser::node::parse_tem..</text></g><g><title>askama_derive::parser::take_content (967 samples, 24.18%)</title><rect x="67.8500%" y="645" width="24.1750%" height="15" fill="rgb(221,189,43)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="655.50">askama_derive::parser::take_content</text></g><g><title>nom::combinator::opt::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="629" width="24.1750%" height="15" fill="rgb(207,36,27)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="639.50">nom::combinator::opt::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (967 samples, 24.18%)</title><rect x="67.8500%" y="613" width="24.1750%" height="15" fill="rgb(217,90,24)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="623.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::p..</text></g><g><title>nom::combinator::recognize::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="597" width="24.1750%" height="15" fill="rgb(224,66,35)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="607.50">nom::combinator::recognize::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (967 samples, 24.18%)</title><rect x="67.8500%" y="581" width="24.1750%" height="15" fill="rgb(221,13,50)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="591.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::p..</text></g><g><title>askama_derive::parser::skip_till::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="565" width="24.1750%" height="15" fill="rgb(236,68,49)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="575.50">askama_derive::parser::skip_till::{{cl..</text></g><g><title>nom::branch::alt::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="549" width="24.1750%" height="15" fill="rgb(229,146,28)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="559.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (967 samples, 24.18%)</title><rect x="67.8500%" y="533" width="24.1750%" height="15" fill="rgb(225,31,38)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="543.50">&lt;(A,B) as nom::branch::Alt&lt;Input,Outpu..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (967 samples, 24.18%)</title><rect x="67.8500%" y="517" width="24.1750%" height="15" fill="rgb(250,208,3)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="527.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::p..</text></g><g><title>nom::combinator::map::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="501" width="24.1750%" height="15" fill="rgb(246,54,23)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="511.50">nom::combinator::map::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (967 samples, 24.18%)</title><rect x="67.8500%" y="485" width="24.1750%" height="15" fill="rgb(243,76,11)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="495.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::p..</text></g><g><title>nom::branch::alt::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="469" width="24.1750%" height="15" fill="rgb(245,21,50)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="479.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (967 samples, 24.18%)</title><rect x="67.8500%" y="453" width="24.1750%" height="15" fill="rgb(228,9,43)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="463.50">&lt;(A,B,C) as nom::branch::Alt&lt;Input,Out..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (967 samples, 24.18%)</title><rect x="67.8500%" y="437" width="24.1750%" height="15" fill="rgb(208,100,47)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="447.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::p..</text></g><g><title>nom::bytes::complete::tag::{{closure}} (967 samples, 24.18%)</title><rect x="67.8500%" y="421" width="24.1750%" height="15" fill="rgb(232,26,8)" fg:x="2714" fg:w="967"/><text x="68.1000%" y="431.50">nom::bytes::complete::tag::{{closure}}</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for &amp;T&gt;::clone (8 samples, 0.20%)</title><rect x="91.8250%" y="405" width="0.2000%" height="15" fill="rgb(216,166,38)" fg:x="3673" fg:w="8"/><text x="92.0750%" y="415.50"></text></g><g><title>askama_derive::generator::derive_template (969 samples, 24.23%)</title><rect x="67.8250%" y="853" width="24.2250%" height="15" fill="rgb(251,202,51)" fg:x="2713" fg:w="969"/><text x="68.0750%" y="863.50">askama_derive::generator::derive_templa..</text></g><g><title>syn::parse2 (1 samples, 0.03%)</title><rect x="92.0250%" y="837" width="0.0250%" height="15" fill="rgb(254,216,34)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="847.50"></text></g><g><title>&lt;F as syn::parse::Parser&gt;::parse2 (1 samples, 0.03%)</title><rect x="92.0250%" y="821" width="0.0250%" height="15" fill="rgb(251,32,27)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="831.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="92.0250%" y="805" width="0.0250%" height="15" fill="rgb(208,127,28)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="815.50"></text></g><g><title>syn::derive::parsing::&lt;impl syn::parse::Parse for syn::derive::DeriveInput&gt;::parse (1 samples, 0.03%)</title><rect x="92.0250%" y="789" width="0.0250%" height="15" fill="rgb(224,137,22)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="799.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.03%)</title><rect x="92.0250%" y="773" width="0.0250%" height="15" fill="rgb(254,70,32)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="783.50"></text></g><g><title>syn::generics::parsing::&lt;impl syn::parse::Parse for syn::generics::Generics&gt;::parse (1 samples, 0.03%)</title><rect x="92.0250%" y="757" width="0.0250%" height="15" fill="rgb(229,75,37)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="767.50"></text></g><g><title>syn::parse::ParseBuffer::peek (1 samples, 0.03%)</title><rect x="92.0250%" y="741" width="0.0250%" height="15" fill="rgb(252,64,23)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="751.50"></text></g><g><title>&lt;syn::token::Gt as syn::token::Token&gt;::peek (1 samples, 0.03%)</title><rect x="92.0250%" y="725" width="0.0250%" height="15" fill="rgb(232,162,48)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="735.50"></text></g><g><title>syn::token::parsing::peek_punct (1 samples, 0.03%)</title><rect x="92.0250%" y="709" width="0.0250%" height="15" fill="rgb(246,160,12)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="92.0250%" y="693" width="0.0250%" height="15" fill="rgb(247,166,0)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="703.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="92.0250%" y="677" width="0.0250%" height="15" fill="rgb(249,219,21)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="687.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.03%)</title><rect x="92.0250%" y="661" width="0.0250%" height="15" fill="rgb(205,209,3)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="92.0250%" y="645" width="0.0250%" height="15" fill="rgb(243,44,1)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="655.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="92.0250%" y="629" width="0.0250%" height="15" fill="rgb(206,159,16)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="639.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="92.0250%" y="613" width="0.0250%" height="15" fill="rgb(244,77,30)" fg:x="3681" fg:w="1"/><text x="92.2750%" y="623.50"></text></g><g><title>askama_derive::generator::find_used_templates (1 samples, 0.03%)</title><rect x="92.0500%" y="853" width="0.0250%" height="15" fill="rgb(218,69,12)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="863.50"></text></g><g><title>askama_derive::parser::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="837" width="0.0250%" height="15" fill="rgb(212,87,7)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="847.50"></text></g><g><title>askama_derive::parser::node::Node::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="821" width="0.0250%" height="15" fill="rgb(245,114,25)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="831.50"></text></g><g><title>askama_derive::parser::node::parse_template (1 samples, 0.03%)</title><rect x="92.0500%" y="805" width="0.0250%" height="15" fill="rgb(210,61,42)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="815.50"></text></g><g><title>nom::multi::many0::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="789" width="0.0250%" height="15" fill="rgb(211,52,33)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="799.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="773" width="0.0250%" height="15" fill="rgb(234,58,33)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="783.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="757" width="0.0250%" height="15" fill="rgb(220,115,36)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="767.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="92.0500%" y="741" width="0.0250%" height="15" fill="rgb(243,153,54)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="751.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="725" width="0.0250%" height="15" fill="rgb(251,47,18)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="735.50"></text></g><g><title>nom::combinator::complete::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="709" width="0.0250%" height="15" fill="rgb(242,102,42)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="719.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="693" width="0.0250%" height="15" fill="rgb(234,31,38)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="703.50"></text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="677" width="0.0250%" height="15" fill="rgb(221,117,51)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="687.50"></text></g><g><title>askama_derive::parser::node::expr_node (1 samples, 0.03%)</title><rect x="92.0500%" y="661" width="0.0250%" height="15" fill="rgb(212,20,18)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="671.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="645" width="0.0250%" height="15" fill="rgb(245,133,36)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="655.50"></text></g><g><title>&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="629" width="0.0250%" height="15" fill="rgb(212,6,19)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="613" width="0.0250%" height="15" fill="rgb(218,1,36)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="623.50"></text></g><g><title>nom::combinator::cut::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="597" width="0.0250%" height="15" fill="rgb(246,84,54)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="607.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="581" width="0.0250%" height="15" fill="rgb(242,110,6)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="591.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="565" width="0.0250%" height="15" fill="rgb(214,47,5)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="575.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="549" width="0.0250%" height="15" fill="rgb(218,159,25)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="533" width="0.0250%" height="15" fill="rgb(215,211,28)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="543.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="517" width="0.0250%" height="15" fill="rgb(238,59,32)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="501" width="0.0250%" height="15" fill="rgb(226,82,3)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="511.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.0500%" y="485" width="0.0250%" height="15" fill="rgb(240,164,32)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="495.50"></text></g><g><title>askama_derive::parser::expr::Expr::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="469" width="0.0250%" height="15" fill="rgb(232,46,7)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="479.50"></text></g><g><title>askama_derive::parser::expr::expr_any (1 samples, 0.03%)</title><rect x="92.0500%" y="453" width="0.0250%" height="15" fill="rgb(229,129,53)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="463.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="437" width="0.0250%" height="15" fill="rgb(234,188,29)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="447.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="92.0500%" y="421" width="0.0250%" height="15" fill="rgb(246,141,4)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="405" width="0.0250%" height="15" fill="rgb(229,23,39)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="415.50"></text></g><g><title>nom::combinator::map::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="389" width="0.0250%" height="15" fill="rgb(206,12,3)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="399.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="373" width="0.0250%" height="15" fill="rgb(252,226,20)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="383.50"></text></g><g><title>askama_derive::parser::expr::expr_any::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="357" width="0.0250%" height="15" fill="rgb(216,123,35)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="367.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="341" width="0.0250%" height="15" fill="rgb(212,68,40)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="351.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="325" width="0.0250%" height="15" fill="rgb(254,125,32)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="335.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="309" width="0.0250%" height="15" fill="rgb(253,97,22)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="319.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0500%" y="293" width="0.0250%" height="15" fill="rgb(241,101,14)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="303.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.03%)</title><rect x="92.0500%" y="277" width="0.0250%" height="15" fill="rgb(238,103,29)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="287.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="92.0500%" y="261" width="0.0250%" height="15" fill="rgb(233,195,47)" fg:x="3682" fg:w="1"/><text x="92.3000%" y="271.50"></text></g><g><title>askama_derive::parser::expr::expr_and (1 samples, 0.03%)</title><rect x="92.0750%" y="853" width="0.0250%" height="15" fill="rgb(246,218,30)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="863.50"></text></g><g><title>askama_derive::parser::expr::expr_compare (1 samples, 0.03%)</title><rect x="92.0750%" y="837" width="0.0250%" height="15" fill="rgb(219,145,47)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="847.50"></text></g><g><title>askama_derive::parser::expr::expr_bor (1 samples, 0.03%)</title><rect x="92.0750%" y="821" width="0.0250%" height="15" fill="rgb(243,12,26)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="831.50"></text></g><g><title>askama_derive::parser::expr::expr_bxor (1 samples, 0.03%)</title><rect x="92.0750%" y="805" width="0.0250%" height="15" fill="rgb(214,87,16)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="815.50"></text></g><g><title>askama_derive::parser::expr::expr_band (1 samples, 0.03%)</title><rect x="92.0750%" y="789" width="0.0250%" height="15" fill="rgb(208,99,42)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="799.50"></text></g><g><title>askama_derive::parser::expr::expr_shifts (1 samples, 0.03%)</title><rect x="92.0750%" y="773" width="0.0250%" height="15" fill="rgb(253,99,2)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="783.50"></text></g><g><title>askama_derive::parser::expr::expr_addsub (1 samples, 0.03%)</title><rect x="92.0750%" y="757" width="0.0250%" height="15" fill="rgb(220,168,23)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="767.50"></text></g><g><title>askama_derive::parser::expr::expr_muldivmod (1 samples, 0.03%)</title><rect x="92.0750%" y="741" width="0.0250%" height="15" fill="rgb(242,38,24)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="751.50"></text></g><g><title>askama_derive::parser::expr::expr_filtered (1 samples, 0.03%)</title><rect x="92.0750%" y="725" width="0.0250%" height="15" fill="rgb(225,182,9)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="735.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.03%)</title><rect x="92.0750%" y="709" width="0.0250%" height="15" fill="rgb(243,178,37)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="719.50"></text></g><g><title>&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0750%" y="693" width="0.0250%" height="15" fill="rgb(232,139,19)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="703.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0750%" y="677" width="0.0250%" height="15" fill="rgb(225,201,24)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="687.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.0750%" y="661" width="0.0250%" height="15" fill="rgb(221,47,46)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="671.50"></text></g><g><title>askama_derive::parser::expr::expr_prefix (1 samples, 0.03%)</title><rect x="92.0750%" y="645" width="0.0250%" height="15" fill="rgb(249,23,13)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="655.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1 samples, 0.03%)</title><rect x="92.0750%" y="629" width="0.0250%" height="15" fill="rgb(219,9,5)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0750%" y="613" width="0.0250%" height="15" fill="rgb(254,171,16)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="623.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.0750%" y="597" width="0.0250%" height="15" fill="rgb(230,171,20)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="607.50"></text></g><g><title>askama_derive::parser::expr::expr_suffix (1 samples, 0.03%)</title><rect x="92.0750%" y="581" width="0.0250%" height="15" fill="rgb(210,71,41)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="591.50"></text></g><g><title>askama_derive::parser::expr::expr_single (1 samples, 0.03%)</title><rect x="92.0750%" y="565" width="0.0250%" height="15" fill="rgb(206,173,20)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="575.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.03%)</title><rect x="92.0750%" y="549" width="0.0250%" height="15" fill="rgb(233,88,34)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="559.50"></text></g><g><title>&lt;(A,B,C,D,E,F,G,H,I) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="92.0750%" y="533" width="0.0250%" height="15" fill="rgb(223,209,46)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.0750%" y="517" width="0.0250%" height="15" fill="rgb(250,43,18)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="527.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.0750%" y="501" width="0.0250%" height="15" fill="rgb(208,13,10)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="511.50"></text></g><g><title>askama_derive::parser::expr::expr_str_lit (1 samples, 0.03%)</title><rect x="92.0750%" y="485" width="0.0250%" height="15" fill="rgb(212,200,36)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="495.50"></text></g><g><title>nom::combinator::map::{{closure}} (1 samples, 0.03%)</title><rect x="92.0750%" y="469" width="0.0250%" height="15" fill="rgb(225,90,30)" fg:x="3683" fg:w="1"/><text x="92.3250%" y="479.50"></text></g><g><title>askama_derive::parser::expr::expr_num_lit (1 samples, 0.03%)</title><rect x="92.1000%" y="517" width="0.0250%" height="15" fill="rgb(236,182,39)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="527.50"></text></g><g><title>nom::combinator::map::{{closure}} (1 samples, 0.03%)</title><rect x="92.1000%" y="501" width="0.0250%" height="15" fill="rgb(212,144,35)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.1000%" y="485" width="0.0250%" height="15" fill="rgb(228,63,44)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="495.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.1000%" y="469" width="0.0250%" height="15" fill="rgb(228,109,6)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="479.50"></text></g><g><title>askama_derive::parser::num_lit (1 samples, 0.03%)</title><rect x="92.1000%" y="453" width="0.0250%" height="15" fill="rgb(238,117,24)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="463.50"></text></g><g><title>nom::combinator::recognize::{{closure}} (1 samples, 0.03%)</title><rect x="92.1000%" y="437" width="0.0250%" height="15" fill="rgb(242,26,26)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="447.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.1000%" y="421" width="0.0250%" height="15" fill="rgb(221,92,48)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="431.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1 samples, 0.03%)</title><rect x="92.1000%" y="405" width="0.0250%" height="15" fill="rgb(209,209,32)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="415.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.1000%" y="389" width="0.0250%" height="15" fill="rgb(221,70,22)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="399.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.1000%" y="373" width="0.0250%" height="15" fill="rgb(248,145,5)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="383.50"></text></g><g><title>nom::character::complete::digit1 (1 samples, 0.03%)</title><rect x="92.1000%" y="357" width="0.0250%" height="15" fill="rgb(226,116,26)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="367.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.03%)</title><rect x="92.1000%" y="341" width="0.0250%" height="15" fill="rgb(244,5,17)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::find (1 samples, 0.03%)</title><rect x="92.1000%" y="325" width="0.0250%" height="15" fill="rgb(252,159,33)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="335.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.03%)</title><rect x="92.1000%" y="309" width="0.0250%" height="15" fill="rgb(206,71,0)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="319.50"></text></g><g><title>core::str::pattern::Searcher::next_match (1 samples, 0.03%)</title><rect x="92.1000%" y="293" width="0.0250%" height="15" fill="rgb(233,118,54)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="303.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (1 samples, 0.03%)</title><rect x="92.1000%" y="277" width="0.0250%" height="15" fill="rgb(234,83,48)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="287.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="92.1000%" y="261" width="0.0250%" height="15" fill="rgb(228,3,54)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="271.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="92.1000%" y="245" width="0.0250%" height="15" fill="rgb(226,155,13)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="255.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.03%)</title><rect x="92.1000%" y="229" width="0.0250%" height="15" fill="rgb(241,28,37)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="239.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="92.1000%" y="213" width="0.0250%" height="15" fill="rgb(233,93,10)" fg:x="3684" fg:w="1"/><text x="92.3500%" y="223.50"></text></g><g><title>askama_derive::parser::expr::expr_bor (2 samples, 0.05%)</title><rect x="92.1000%" y="853" width="0.0500%" height="15" fill="rgb(225,113,19)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="863.50"></text></g><g><title>askama_derive::parser::expr::expr_bxor (2 samples, 0.05%)</title><rect x="92.1000%" y="837" width="0.0500%" height="15" fill="rgb(241,2,18)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="847.50"></text></g><g><title>askama_derive::parser::expr::expr_band (2 samples, 0.05%)</title><rect x="92.1000%" y="821" width="0.0500%" height="15" fill="rgb(228,207,21)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="831.50"></text></g><g><title>askama_derive::parser::expr::expr_shifts (2 samples, 0.05%)</title><rect x="92.1000%" y="805" width="0.0500%" height="15" fill="rgb(213,211,35)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="815.50"></text></g><g><title>askama_derive::parser::expr::expr_addsub (2 samples, 0.05%)</title><rect x="92.1000%" y="789" width="0.0500%" height="15" fill="rgb(209,83,10)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="799.50"></text></g><g><title>askama_derive::parser::expr::expr_muldivmod (2 samples, 0.05%)</title><rect x="92.1000%" y="773" width="0.0500%" height="15" fill="rgb(209,164,1)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="783.50"></text></g><g><title>askama_derive::parser::expr::expr_filtered (2 samples, 0.05%)</title><rect x="92.1000%" y="757" width="0.0500%" height="15" fill="rgb(213,184,43)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="767.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (2 samples, 0.05%)</title><rect x="92.1000%" y="741" width="0.0500%" height="15" fill="rgb(231,61,34)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="751.50"></text></g><g><title>&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (2 samples, 0.05%)</title><rect x="92.1000%" y="725" width="0.0500%" height="15" fill="rgb(235,75,3)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="735.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.05%)</title><rect x="92.1000%" y="709" width="0.0500%" height="15" fill="rgb(220,106,47)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="719.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2 samples, 0.05%)</title><rect x="92.1000%" y="693" width="0.0500%" height="15" fill="rgb(210,196,33)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="703.50"></text></g><g><title>askama_derive::parser::expr::expr_prefix (2 samples, 0.05%)</title><rect x="92.1000%" y="677" width="0.0500%" height="15" fill="rgb(229,154,42)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="687.50"></text></g><g><title>nom::sequence::pair::{{closure}} (2 samples, 0.05%)</title><rect x="92.1000%" y="661" width="0.0500%" height="15" fill="rgb(228,114,26)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.05%)</title><rect x="92.1000%" y="645" width="0.0500%" height="15" fill="rgb(208,144,1)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="655.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2 samples, 0.05%)</title><rect x="92.1000%" y="629" width="0.0500%" height="15" fill="rgb(239,112,37)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="639.50"></text></g><g><title>askama_derive::parser::expr::expr_suffix (2 samples, 0.05%)</title><rect x="92.1000%" y="613" width="0.0500%" height="15" fill="rgb(210,96,50)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="623.50"></text></g><g><title>askama_derive::parser::expr::expr_single (2 samples, 0.05%)</title><rect x="92.1000%" y="597" width="0.0500%" height="15" fill="rgb(222,178,2)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="607.50"></text></g><g><title>nom::branch::alt::{{closure}} (2 samples, 0.05%)</title><rect x="92.1000%" y="581" width="0.0500%" height="15" fill="rgb(226,74,18)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="591.50"></text></g><g><title>&lt;(A,B,C,D,E,F,G,H,I) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (2 samples, 0.05%)</title><rect x="92.1000%" y="565" width="0.0500%" height="15" fill="rgb(225,67,54)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.05%)</title><rect x="92.1000%" y="549" width="0.0500%" height="15" fill="rgb(251,92,32)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="559.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2 samples, 0.05%)</title><rect x="92.1000%" y="533" width="0.0500%" height="15" fill="rgb(228,149,22)" fg:x="3684" fg:w="2"/><text x="92.3500%" y="543.50"></text></g><g><title>askama_derive::parser::expr::expr_rust_macro (1 samples, 0.03%)</title><rect x="92.1250%" y="517" width="0.0250%" height="15" fill="rgb(243,54,13)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="527.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.03%)</title><rect x="92.1250%" y="501" width="0.0250%" height="15" fill="rgb(243,180,28)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="511.50"></text></g><g><title>&lt;(FnA,FnB,FnC) as nom::sequence::Tuple&lt;Input,(A,B,C),Error&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.1250%" y="485" width="0.0250%" height="15" fill="rgb(208,167,24)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="495.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.1250%" y="469" width="0.0250%" height="15" fill="rgb(245,73,45)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.1250%" y="453" width="0.0250%" height="15" fill="rgb(237,203,48)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="463.50"></text></g><g><title>askama_derive::parser::identifier (1 samples, 0.03%)</title><rect x="92.1250%" y="437" width="0.0250%" height="15" fill="rgb(211,197,16)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="447.50"></text></g><g><title>nom::combinator::recognize::{{closure}} (1 samples, 0.03%)</title><rect x="92.1250%" y="421" width="0.0250%" height="15" fill="rgb(243,99,51)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.1250%" y="405" width="0.0250%" height="15" fill="rgb(215,123,29)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="415.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1 samples, 0.03%)</title><rect x="92.1250%" y="389" width="0.0250%" height="15" fill="rgb(239,186,37)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="399.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.1250%" y="373" width="0.0250%" height="15" fill="rgb(252,136,39)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="383.50"></text></g><g><title>nom::combinator::opt::{{closure}} (1 samples, 0.03%)</title><rect x="92.1250%" y="357" width="0.0250%" height="15" fill="rgb(223,213,32)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="367.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.1250%" y="341" width="0.0250%" height="15" fill="rgb(233,115,5)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.1250%" y="325" width="0.0250%" height="15" fill="rgb(207,226,44)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="335.50"></text></g><g><title>askama_derive::parser::identifier_tail (1 samples, 0.03%)</title><rect x="92.1250%" y="309" width="0.0250%" height="15" fill="rgb(208,126,0)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="319.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.03%)</title><rect x="92.1250%" y="293" width="0.0250%" height="15" fill="rgb(244,66,21)" fg:x="3685" fg:w="1"/><text x="92.3750%" y="303.50"></text></g><g><title>askama_derive::parser::expr::expr_single (2 samples, 0.05%)</title><rect x="92.1500%" y="549" width="0.0500%" height="15" fill="rgb(222,97,12)" fg:x="3686" fg:w="2"/><text x="92.4000%" y="559.50"></text></g><g><title>nom::branch::alt::{{closure}} (2 samples, 0.05%)</title><rect x="92.1500%" y="533" width="0.0500%" height="15" fill="rgb(219,213,19)" fg:x="3686" fg:w="2"/><text x="92.4000%" y="543.50"></text></g><g><title>&lt;(A,B,C,D,E,F,G,H,I) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (2 samples, 0.05%)</title><rect x="92.1500%" y="517" width="0.0500%" height="15" fill="rgb(252,169,30)" fg:x="3686" fg:w="2"/><text x="92.4000%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.1750%" y="501" width="0.0250%" height="15" fill="rgb(206,32,51)" fg:x="3687" fg:w="1"/><text x="92.4250%" y="511.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.1750%" y="485" width="0.0250%" height="15" fill="rgb(250,172,42)" fg:x="3687" fg:w="1"/><text x="92.4250%" y="495.50"></text></g><g><title>askama_derive::parser::expr::expr_rust_macro (1 samples, 0.03%)</title><rect x="92.1750%" y="469" width="0.0250%" height="15" fill="rgb(209,34,43)" fg:x="3687" fg:w="1"/><text x="92.4250%" y="479.50"></text></g><g><title>askama_derive::parser::expr::expr_or (3 samples, 0.07%)</title><rect x="92.1500%" y="853" width="0.0750%" height="15" fill="rgb(223,11,35)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="863.50"></text></g><g><title>askama_derive::parser::expr::expr_and (3 samples, 0.07%)</title><rect x="92.1500%" y="837" width="0.0750%" height="15" fill="rgb(251,219,26)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="847.50"></text></g><g><title>askama_derive::parser::expr::expr_compare (3 samples, 0.07%)</title><rect x="92.1500%" y="821" width="0.0750%" height="15" fill="rgb(231,119,3)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="831.50"></text></g><g><title>askama_derive::parser::expr::expr_bor (3 samples, 0.07%)</title><rect x="92.1500%" y="805" width="0.0750%" height="15" fill="rgb(216,97,11)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="815.50"></text></g><g><title>askama_derive::parser::expr::expr_bxor (3 samples, 0.07%)</title><rect x="92.1500%" y="789" width="0.0750%" height="15" fill="rgb(223,59,9)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="799.50"></text></g><g><title>askama_derive::parser::expr::expr_band (3 samples, 0.07%)</title><rect x="92.1500%" y="773" width="0.0750%" height="15" fill="rgb(233,93,31)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="783.50"></text></g><g><title>askama_derive::parser::expr::expr_shifts (3 samples, 0.07%)</title><rect x="92.1500%" y="757" width="0.0750%" height="15" fill="rgb(239,81,33)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="767.50"></text></g><g><title>askama_derive::parser::expr::expr_addsub (3 samples, 0.07%)</title><rect x="92.1500%" y="741" width="0.0750%" height="15" fill="rgb(213,120,34)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="751.50"></text></g><g><title>askama_derive::parser::expr::expr_muldivmod (3 samples, 0.07%)</title><rect x="92.1500%" y="725" width="0.0750%" height="15" fill="rgb(243,49,53)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="735.50"></text></g><g><title>askama_derive::parser::expr::expr_filtered (3 samples, 0.07%)</title><rect x="92.1500%" y="709" width="0.0750%" height="15" fill="rgb(247,216,33)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="719.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (3 samples, 0.07%)</title><rect x="92.1500%" y="693" width="0.0750%" height="15" fill="rgb(226,26,14)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="703.50"></text></g><g><title>&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (3 samples, 0.07%)</title><rect x="92.1500%" y="677" width="0.0750%" height="15" fill="rgb(215,49,53)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="687.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3 samples, 0.07%)</title><rect x="92.1500%" y="661" width="0.0750%" height="15" fill="rgb(245,162,40)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="671.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3 samples, 0.07%)</title><rect x="92.1500%" y="645" width="0.0750%" height="15" fill="rgb(229,68,17)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="655.50"></text></g><g><title>askama_derive::parser::expr::expr_prefix (3 samples, 0.07%)</title><rect x="92.1500%" y="629" width="0.0750%" height="15" fill="rgb(213,182,10)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="639.50"></text></g><g><title>nom::sequence::pair::{{closure}} (3 samples, 0.07%)</title><rect x="92.1500%" y="613" width="0.0750%" height="15" fill="rgb(245,125,30)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3 samples, 0.07%)</title><rect x="92.1500%" y="597" width="0.0750%" height="15" fill="rgb(232,202,2)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="607.50"></text></g><g><title>core::ops::function::FnMut::call_mut (3 samples, 0.07%)</title><rect x="92.1500%" y="581" width="0.0750%" height="15" fill="rgb(237,140,51)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="591.50"></text></g><g><title>askama_derive::parser::expr::expr_suffix (3 samples, 0.07%)</title><rect x="92.1500%" y="565" width="0.0750%" height="15" fill="rgb(236,157,25)" fg:x="3686" fg:w="3"/><text x="92.4000%" y="575.50"></text></g><g><title>nom::combinator::opt::{{closure}} (1 samples, 0.03%)</title><rect x="92.2000%" y="549" width="0.0250%" height="15" fill="rgb(219,209,0)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2000%" y="533" width="0.0250%" height="15" fill="rgb(240,116,54)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="543.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.03%)</title><rect x="92.2000%" y="517" width="0.0250%" height="15" fill="rgb(216,10,36)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="527.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="92.2000%" y="501" width="0.0250%" height="15" fill="rgb(222,72,44)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2000%" y="485" width="0.0250%" height="15" fill="rgb(232,159,9)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="495.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.2000%" y="469" width="0.0250%" height="15" fill="rgb(210,39,32)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="479.50"></text></g><g><title>askama_derive::parser::expr::expr_attr (1 samples, 0.03%)</title><rect x="92.2000%" y="453" width="0.0250%" height="15" fill="rgb(216,194,45)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="463.50"></text></g><g><title>nom::combinator::map::{{closure}} (1 samples, 0.03%)</title><rect x="92.2000%" y="437" width="0.0250%" height="15" fill="rgb(218,18,35)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="447.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2000%" y="421" width="0.0250%" height="15" fill="rgb(207,83,51)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="431.50"></text></g><g><title>nom::sequence::preceded::{{closure}} (1 samples, 0.03%)</title><rect x="92.2000%" y="405" width="0.0250%" height="15" fill="rgb(225,63,43)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (1 samples, 0.03%)</title><rect x="92.2000%" y="389" width="0.0250%" height="15" fill="rgb(207,57,36)" fg:x="3688" fg:w="1"/><text x="92.4500%" y="399.50"></text></g><g><title>nom::combinator::complete::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="853" width="0.0250%" height="15" fill="rgb(216,99,33)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="863.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="837" width="0.0250%" height="15" fill="rgb(225,42,16)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="847.50"></text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="821" width="0.0250%" height="15" fill="rgb(220,201,45)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="831.50"></text></g><g><title>askama_derive::parser::node::expr_node (1 samples, 0.03%)</title><rect x="92.2250%" y="805" width="0.0250%" height="15" fill="rgb(225,33,4)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="815.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="789" width="0.0250%" height="15" fill="rgb(224,33,50)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="799.50"></text></g><g><title>&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="773" width="0.0250%" height="15" fill="rgb(246,198,51)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="783.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="757" width="0.0250%" height="15" fill="rgb(205,22,4)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="767.50"></text></g><g><title>nom::combinator::cut::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="741" width="0.0250%" height="15" fill="rgb(206,3,8)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="751.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="725" width="0.0250%" height="15" fill="rgb(251,23,15)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="735.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="709" width="0.0250%" height="15" fill="rgb(252,88,28)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="719.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="693" width="0.0250%" height="15" fill="rgb(212,127,14)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="703.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="677" width="0.0250%" height="15" fill="rgb(247,145,37)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="687.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="661" width="0.0250%" height="15" fill="rgb(209,117,53)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="645" width="0.0250%" height="15" fill="rgb(212,90,42)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="655.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.2250%" y="629" width="0.0250%" height="15" fill="rgb(218,164,37)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="639.50"></text></g><g><title>askama_derive::parser::expr::Expr::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="613" width="0.0250%" height="15" fill="rgb(246,65,34)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="623.50"></text></g><g><title>askama_derive::parser::expr::expr_any (1 samples, 0.03%)</title><rect x="92.2250%" y="597" width="0.0250%" height="15" fill="rgb(231,100,33)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="607.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="581" width="0.0250%" height="15" fill="rgb(228,126,14)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="591.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="92.2250%" y="565" width="0.0250%" height="15" fill="rgb(215,173,21)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="549" width="0.0250%" height="15" fill="rgb(210,6,40)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="559.50"></text></g><g><title>nom::combinator::map::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="533" width="0.0250%" height="15" fill="rgb(212,48,18)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="517" width="0.0250%" height="15" fill="rgb(230,214,11)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="527.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="501" width="0.0250%" height="15" fill="rgb(254,105,39)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="485" width="0.0250%" height="15" fill="rgb(245,158,5)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="495.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.03%)</title><rect x="92.2250%" y="469" width="0.0250%" height="15" fill="rgb(249,208,11)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="479.50"></text></g><g><title>askama_derive::parser::expr::expr_or (1 samples, 0.03%)</title><rect x="92.2250%" y="453" width="0.0250%" height="15" fill="rgb(210,39,28)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="463.50"></text></g><g><title>askama_derive::parser::expr::expr_and (1 samples, 0.03%)</title><rect x="92.2250%" y="437" width="0.0250%" height="15" fill="rgb(211,56,53)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="447.50"></text></g><g><title>askama_derive::parser::expr::expr_compare (1 samples, 0.03%)</title><rect x="92.2250%" y="421" width="0.0250%" height="15" fill="rgb(226,201,30)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="431.50"></text></g><g><title>askama_derive::parser::expr::expr_bor (1 samples, 0.03%)</title><rect x="92.2250%" y="405" width="0.0250%" height="15" fill="rgb(239,101,34)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="415.50"></text></g><g><title>askama_derive::parser::expr::expr_bxor (1 samples, 0.03%)</title><rect x="92.2250%" y="389" width="0.0250%" height="15" fill="rgb(226,209,5)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="399.50"></text></g><g><title>askama_derive::parser::expr::expr_band (1 samples, 0.03%)</title><rect x="92.2250%" y="373" width="0.0250%" height="15" fill="rgb(250,105,47)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="383.50"></text></g><g><title>nom::multi::many0::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="357" width="0.0250%" height="15" fill="rgb(230,72,3)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="367.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="341" width="0.0250%" height="15" fill="rgb(232,218,39)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="351.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="325" width="0.0250%" height="15" fill="rgb(248,166,6)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="335.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="309" width="0.0250%" height="15" fill="rgb(247,89,20)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="319.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="293" width="0.0250%" height="15" fill="rgb(248,130,54)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="303.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="92.2250%" y="277" width="0.0250%" height="15" fill="rgb(234,196,4)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="287.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (1 samples, 0.03%)</title><rect x="92.2250%" y="261" width="0.0250%" height="15" fill="rgb(250,143,31)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="271.50"></text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (1 samples, 0.03%)</title><rect x="92.2250%" y="245" width="0.0250%" height="15" fill="rgb(211,110,34)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="255.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (1 samples, 0.03%)</title><rect x="92.2250%" y="229" width="0.0250%" height="15" fill="rgb(215,124,48)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (1 samples, 0.03%)</title><rect x="92.2250%" y="213" width="0.0250%" height="15" fill="rgb(216,46,13)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.03%)</title><rect x="92.2250%" y="197" width="0.0250%" height="15" fill="rgb(205,184,25)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="92.2250%" y="181" width="0.0250%" height="15" fill="rgb(228,1,10)" fg:x="3689" fg:w="1"/><text x="92.4750%" y="191.50"></text></g><g><title>core::ops::function::FnMut::call_mut (6 samples, 0.15%)</title><rect x="94.3500%" y="245" width="0.1500%" height="15" fill="rgb(213,116,27)" fg:x="3774" fg:w="6"/><text x="94.6000%" y="255.50"></text></g><g><title>nom::character::complete::anychar (3 samples, 0.07%)</title><rect x="94.4250%" y="229" width="0.0750%" height="15" fill="rgb(241,95,50)" fg:x="3777" fg:w="3"/><text x="94.6750%" y="239.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (22 samples, 0.55%)</title><rect x="94.0250%" y="261" width="0.5500%" height="15" fill="rgb(238,48,32)" fg:x="3761" fg:w="22"/><text x="94.2750%" y="271.50"></text></g><g><title>nom::branch::alt::{{closure}} (3 samples, 0.07%)</title><rect x="94.5000%" y="245" width="0.0750%" height="15" fill="rgb(235,113,49)" fg:x="3780" fg:w="3"/><text x="94.7500%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.47%)</title><rect x="94.5750%" y="261" width="0.4750%" height="15" fill="rgb(205,127,43)" fg:x="3783" fg:w="19"/><text x="94.8250%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (10 samples, 0.25%)</title><rect x="95.0500%" y="261" width="0.2500%" height="15" fill="rgb(250,162,2)" fg:x="3802" fg:w="10"/><text x="95.3000%" y="271.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (4 samples, 0.10%)</title><rect x="95.2000%" y="245" width="0.1000%" height="15" fill="rgb(220,13,41)" fg:x="3808" fg:w="4"/><text x="95.4500%" y="255.50"></text></g><g><title>std::rt::lang_start_internal (126 samples, 3.15%)</title><rect x="92.2500%" y="853" width="3.1500%" height="15" fill="rgb(249,221,25)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="863.50">std..</text></g><g><title>std::panic::catch_unwind (126 samples, 3.15%)</title><rect x="92.2500%" y="837" width="3.1500%" height="15" fill="rgb(215,208,19)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="847.50">std..</text></g><g><title>std::panicking::try (126 samples, 3.15%)</title><rect x="92.2500%" y="821" width="3.1500%" height="15" fill="rgb(236,175,2)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="831.50">std..</text></g><g><title>std::panicking::try::do_call (126 samples, 3.15%)</title><rect x="92.2500%" y="805" width="3.1500%" height="15" fill="rgb(241,52,2)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="815.50">std..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="789" width="3.1500%" height="15" fill="rgb(248,140,14)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="799.50">std..</text></g><g><title>std::panic::catch_unwind (126 samples, 3.15%)</title><rect x="92.2500%" y="773" width="3.1500%" height="15" fill="rgb(253,22,42)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="783.50">std..</text></g><g><title>std::panicking::try (126 samples, 3.15%)</title><rect x="92.2500%" y="757" width="3.1500%" height="15" fill="rgb(234,61,47)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="767.50">std..</text></g><g><title>std::panicking::try::do_call (126 samples, 3.15%)</title><rect x="92.2500%" y="741" width="3.1500%" height="15" fill="rgb(208,226,15)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="751.50">std..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (126 samples, 3.15%)</title><rect x="92.2500%" y="725" width="3.1500%" height="15" fill="rgb(217,221,4)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="735.50">cor..</text></g><g><title>std::rt::lang_start::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="709" width="3.1500%" height="15" fill="rgb(212,174,34)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="719.50">std..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (126 samples, 3.15%)</title><rect x="92.2500%" y="693" width="3.1500%" height="15" fill="rgb(253,83,4)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="703.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once (126 samples, 3.15%)</title><rect x="92.2500%" y="677" width="3.1500%" height="15" fill="rgb(250,195,49)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="687.50">cor..</text></g><g><title>askama_bench::main (126 samples, 3.15%)</title><rect x="92.2500%" y="661" width="3.1500%" height="15" fill="rgb(241,192,25)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="671.50">ask..</text></g><g><title>askama_derive::derive_template (126 samples, 3.15%)</title><rect x="92.2500%" y="645" width="3.1500%" height="15" fill="rgb(208,124,10)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="655.50">ask..</text></g><g><title>askama_derive::generator::derive_template (126 samples, 3.15%)</title><rect x="92.2500%" y="629" width="3.1500%" height="15" fill="rgb(222,33,0)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="639.50">ask..</text></g><g><title>askama_derive::generator::build_template (126 samples, 3.15%)</title><rect x="92.2500%" y="613" width="3.1500%" height="15" fill="rgb(234,209,28)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="623.50">ask..</text></g><g><title>askama_derive::parser::parse (126 samples, 3.15%)</title><rect x="92.2500%" y="597" width="3.1500%" height="15" fill="rgb(224,11,23)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="607.50">ask..</text></g><g><title>askama_derive::parser::node::Node::parse (126 samples, 3.15%)</title><rect x="92.2500%" y="581" width="3.1500%" height="15" fill="rgb(232,99,1)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="591.50">ask..</text></g><g><title>askama_derive::parser::node::parse_template (126 samples, 3.15%)</title><rect x="92.2500%" y="565" width="3.1500%" height="15" fill="rgb(237,95,45)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="575.50">ask..</text></g><g><title>nom::multi::many0::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="549" width="3.1500%" height="15" fill="rgb(208,109,11)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="559.50">nom..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (126 samples, 3.15%)</title><rect x="92.2500%" y="533" width="3.1500%" height="15" fill="rgb(216,190,48)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="543.50">&lt;F ..</text></g><g><title>nom::branch::alt::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="517" width="3.1500%" height="15" fill="rgb(251,171,36)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="527.50">nom..</text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (126 samples, 3.15%)</title><rect x="92.2500%" y="501" width="3.1500%" height="15" fill="rgb(230,62,22)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="511.50">&lt;(A..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (126 samples, 3.15%)</title><rect x="92.2500%" y="485" width="3.1500%" height="15" fill="rgb(225,114,35)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="495.50">&lt;F ..</text></g><g><title>nom::combinator::complete::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="469" width="3.1500%" height="15" fill="rgb(215,118,42)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="479.50">nom..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (126 samples, 3.15%)</title><rect x="92.2500%" y="453" width="3.1500%" height="15" fill="rgb(243,119,21)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="463.50">&lt;F ..</text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="437" width="3.1500%" height="15" fill="rgb(252,177,53)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="447.50">ask..</text></g><g><title>askama_derive::parser::take_content (126 samples, 3.15%)</title><rect x="92.2500%" y="421" width="3.1500%" height="15" fill="rgb(237,209,29)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="431.50">ask..</text></g><g><title>nom::combinator::opt::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="405" width="3.1500%" height="15" fill="rgb(212,65,23)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="415.50">nom..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (126 samples, 3.15%)</title><rect x="92.2500%" y="389" width="3.1500%" height="15" fill="rgb(230,222,46)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="399.50">&lt;F ..</text></g><g><title>nom::combinator::recognize::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="373" width="3.1500%" height="15" fill="rgb(215,135,32)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="383.50">nom..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (126 samples, 3.15%)</title><rect x="92.2500%" y="357" width="3.1500%" height="15" fill="rgb(246,101,22)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="367.50">&lt;F ..</text></g><g><title>askama_derive::parser::skip_till::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="341" width="3.1500%" height="15" fill="rgb(206,107,13)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="351.50">ask..</text></g><g><title>nom::branch::alt::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="325" width="3.1500%" height="15" fill="rgb(250,100,44)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="335.50">nom..</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (126 samples, 3.15%)</title><rect x="92.2500%" y="309" width="3.1500%" height="15" fill="rgb(231,147,38)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="319.50">&lt;(A..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (126 samples, 3.15%)</title><rect x="92.2500%" y="293" width="3.1500%" height="15" fill="rgb(229,8,40)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="303.50">&lt;F ..</text></g><g><title>nom::combinator::map::{{closure}} (126 samples, 3.15%)</title><rect x="92.2500%" y="277" width="3.1500%" height="15" fill="rgb(221,135,30)" fg:x="3690" fg:w="126"/><text x="92.5000%" y="287.50">nom..</text></g><g><title>core::ops::function::FnMut::call_mut (4 samples, 0.10%)</title><rect x="95.3000%" y="261" width="0.1000%" height="15" fill="rgb(249,193,18)" fg:x="3812" fg:w="4"/><text x="95.5500%" y="271.50"></text></g><g><title>askama_derive::parser::skip_till::Next::NotEnd (1 samples, 0.03%)</title><rect x="95.3750%" y="245" width="0.0250%" height="15" fill="rgb(209,133,39)" fg:x="3815" fg:w="1"/><text x="95.6250%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="95.4000%" y="837" width="0.0250%" height="15" fill="rgb(232,100,14)" fg:x="3816" fg:w="1"/><text x="95.6500%" y="847.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.03%)</title><rect x="95.4250%" y="837" width="0.0250%" height="15" fill="rgb(224,185,1)" fg:x="3817" fg:w="1"/><text x="95.6750%" y="847.50"></text></g><g><title>syn::ty::parsing::&lt;impl syn::parse::Parse for syn::ty::TypePath&gt;::parse (1 samples, 0.03%)</title><rect x="95.4250%" y="821" width="0.0250%" height="15" fill="rgb(223,139,8)" fg:x="3817" fg:w="1"/><text x="95.6750%" y="831.50"></text></g><g><title>syn::path::parsing::qpath (1 samples, 0.03%)</title><rect x="95.4250%" y="805" width="0.0250%" height="15" fill="rgb(232,213,38)" fg:x="3817" fg:w="1"/><text x="95.6750%" y="815.50"></text></g><g><title>[unknown] (3,808 samples, 95.20%)</title><rect x="0.2750%" y="869" width="95.2000%" height="15" fill="rgb(207,94,22)" fg:x="11" fg:w="3808"/><text x="0.5250%" y="879.50">[unknown]</text></g><g><title>syn::ty::parsing::ambig_ty (3 samples, 0.07%)</title><rect x="95.4000%" y="853" width="0.0750%" height="15" fill="rgb(219,183,54)" fg:x="3816" fg:w="3"/><text x="95.6500%" y="863.50"></text></g><g><title>syn::parse::ParseBuffer::peek (1 samples, 0.03%)</title><rect x="95.4500%" y="837" width="0.0250%" height="15" fill="rgb(216,185,54)" fg:x="3818" fg:w="1"/><text x="95.7000%" y="847.50"></text></g><g><title>&lt;syn::token::Not as syn::token::Token&gt;::peek (1 samples, 0.03%)</title><rect x="95.4500%" y="821" width="0.0250%" height="15" fill="rgb(254,217,39)" fg:x="3818" fg:w="1"/><text x="95.7000%" y="831.50"></text></g><g><title>syn::token::parsing::peek_punct (1 samples, 0.03%)</title><rect x="95.4500%" y="805" width="0.0250%" height="15" fill="rgb(240,178,23)" fg:x="3818" fg:w="1"/><text x="95.7000%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (1 samples, 0.03%)</title><rect x="95.4500%" y="789" width="0.0250%" height="15" fill="rgb(218,11,47)" fg:x="3818" fg:w="1"/><text x="95.7000%" y="799.50"></text></g><g><title>askama_derive::generator::Generator::impl_display (1 samples, 0.03%)</title><rect x="95.5000%" y="517" width="0.0250%" height="15" fill="rgb(218,51,51)" fg:x="3820" fg:w="1"/><text x="95.7500%" y="527.50"></text></g><g><title>askama_derive::generator::Generator::write_header (1 samples, 0.03%)</title><rect x="95.5000%" y="501" width="0.0250%" height="15" fill="rgb(238,126,27)" fg:x="3820" fg:w="1"/><text x="95.7500%" y="511.50"></text></g><g><title>syn::gen::clone::&lt;impl core::clone::Clone for syn::generics::Generics&gt;::clone (1 samples, 0.03%)</title><rect x="95.5000%" y="485" width="0.0250%" height="15" fill="rgb(249,202,22)" fg:x="3820" fg:w="1"/><text x="95.7500%" y="495.50"></text></g><g><title>&lt;syn::punctuated::Punctuated&lt;T,P&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="95.5000%" y="469" width="0.0250%" height="15" fill="rgb(254,195,49)" fg:x="3820" fg:w="1"/><text x="95.7500%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="95.5000%" y="453" width="0.0250%" height="15" fill="rgb(208,123,14)" fg:x="3820" fg:w="1"/><text x="95.7500%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="95.5000%" y="437" width="0.0250%" height="15" fill="rgb(224,200,8)" fg:x="3820" fg:w="1"/><text x="95.7500%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="95.5000%" y="421" width="0.0250%" height="15" fill="rgb(217,61,36)" fg:x="3820" fg:w="1"/><text x="95.7500%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="95.5000%" y="405" width="0.0250%" height="15" fill="rgb(206,35,45)" fg:x="3820" fg:w="1"/><text x="95.7500%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::take (1 samples, 0.03%)</title><rect x="95.5000%" y="389" width="0.0250%" height="15" fill="rgb(217,65,33)" fg:x="3820" fg:w="1"/><text x="95.7500%" y="399.50"></text></g><g><title>core::iter::adapters::take::Take&lt;I&gt;::new (1 samples, 0.03%)</title><rect x="95.5000%" y="373" width="0.0250%" height="15" fill="rgb(222,158,48)" fg:x="3820" fg:w="1"/><text x="95.7500%" y="383.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.03%)</title><rect x="95.5250%" y="501" width="0.0250%" height="15" fill="rgb(254,2,54)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="511.50"></text></g><g><title>&lt;proc_macro2::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.03%)</title><rect x="95.5250%" y="485" width="0.0250%" height="15" fill="rgb(250,143,38)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="495.50"></text></g><g><title>&lt;proc_macro2::imp::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.03%)</title><rect x="95.5250%" y="469" width="0.0250%" height="15" fill="rgb(248,25,0)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="479.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.03%)</title><rect x="95.5250%" y="453" width="0.0250%" height="15" fill="rgb(206,152,27)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="463.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (1 samples, 0.03%)</title><rect x="95.5250%" y="437" width="0.0250%" height="15" fill="rgb(240,77,30)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="447.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (1 samples, 0.03%)</title><rect x="95.5250%" y="421" width="0.0250%" height="15" fill="rgb(231,5,3)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="431.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (1 samples, 0.03%)</title><rect x="95.5250%" y="405" width="0.0250%" height="15" fill="rgb(207,226,32)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="95.5250%" y="389" width="0.0250%" height="15" fill="rgb(222,207,47)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.03%)</title><rect x="95.5250%" y="373" width="0.0250%" height="15" fill="rgb(229,115,45)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="95.5250%" y="357" width="0.0250%" height="15" fill="rgb(224,191,6)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="95.5250%" y="341" width="0.0250%" height="15" fill="rgb(230,227,24)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="95.5250%" y="325" width="0.0250%" height="15" fill="rgb(228,80,19)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="95.5250%" y="309" width="0.0250%" height="15" fill="rgb(247,229,0)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="95.5250%" y="293" width="0.0250%" height="15" fill="rgb(237,194,15)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="95.5250%" y="277" width="0.0250%" height="15" fill="rgb(219,203,20)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="95.5250%" y="261" width="0.0250%" height="15" fill="rgb(234,128,8)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="95.5250%" y="245" width="0.0250%" height="15" fill="rgb(248,202,8)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="95.5250%" y="229" width="0.0250%" height="15" fill="rgb(206,104,37)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="95.5250%" y="213" width="0.0250%" height="15" fill="rgb(223,8,27)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="95.5250%" y="197" width="0.0250%" height="15" fill="rgb(216,217,28)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="207.50"></text></g><g><title>realloc (1 samples, 0.03%)</title><rect x="95.5250%" y="181" width="0.0250%" height="15" fill="rgb(249,199,1)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="95.5250%" y="165" width="0.0250%" height="15" fill="rgb(240,85,17)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="95.5250%" y="149" width="0.0250%" height="15" fill="rgb(206,108,45)" fg:x="3821" fg:w="1"/><text x="95.7750%" y="159.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (1 samples, 0.03%)</title><rect x="95.5500%" y="421" width="0.0250%" height="15" fill="rgb(245,210,41)" fg:x="3822" fg:w="1"/><text x="95.8000%" y="431.50"></text></g><g><title>syn::gen::clone::&lt;impl core::clone::Clone for syn::generics::GenericParam&gt;::clone (1 samples, 0.03%)</title><rect x="95.5500%" y="405" width="0.0250%" height="15" fill="rgb(206,13,37)" fg:x="3822" fg:w="1"/><text x="95.8000%" y="415.50"></text></g><g><title>syn::gen::clone::&lt;impl core::clone::Clone for syn::generics::LifetimeParam&gt;::clone (1 samples, 0.03%)</title><rect x="95.5500%" y="389" width="0.0250%" height="15" fill="rgb(250,61,18)" fg:x="3822" fg:w="1"/><text x="95.8000%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="95.5500%" y="373" width="0.0250%" height="15" fill="rgb(235,172,48)" fg:x="3822" fg:w="1"/><text x="95.8000%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::allocator (1 samples, 0.03%)</title><rect x="95.5500%" y="357" width="0.0250%" height="15" fill="rgb(249,201,17)" fg:x="3822" fg:w="1"/><text x="95.8000%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocator (1 samples, 0.03%)</title><rect x="95.5500%" y="341" width="0.0250%" height="15" fill="rgb(219,208,6)" fg:x="3822" fg:w="1"/><text x="95.8000%" y="351.50"></text></g><g><title>syn::gen::clone::&lt;impl core::clone::Clone for syn::generics::Generics&gt;::clone (2 samples, 0.05%)</title><rect x="95.5500%" y="485" width="0.0500%" height="15" fill="rgb(248,31,23)" fg:x="3822" fg:w="2"/><text x="95.8000%" y="495.50"></text></g><g><title>&lt;syn::punctuated::Punctuated&lt;T,P&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="95.5500%" y="469" width="0.0500%" height="15" fill="rgb(245,15,42)" fg:x="3822" fg:w="2"/><text x="95.8000%" y="479.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="95.5500%" y="453" width="0.0500%" height="15" fill="rgb(222,217,39)" fg:x="3822" fg:w="2"/><text x="95.8000%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="95.5500%" y="437" width="0.0500%" height="15" fill="rgb(210,219,27)" fg:x="3822" fg:w="2"/><text x="95.8000%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;core::mem::maybe_uninit::MaybeUninit&lt;T&gt;,A&gt;::assume_init (1 samples, 0.03%)</title><rect x="95.5750%" y="421" width="0.0250%" height="15" fill="rgb(252,166,36)" fg:x="3823" fg:w="1"/><text x="95.8250%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_raw_with_allocator (1 samples, 0.03%)</title><rect x="95.5750%" y="405" width="0.0250%" height="15" fill="rgb(245,132,34)" fg:x="3823" fg:w="1"/><text x="95.8250%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_unique (1 samples, 0.03%)</title><rect x="95.5750%" y="389" width="0.0250%" height="15" fill="rgb(236,54,3)" fg:x="3823" fg:w="1"/><text x="95.8250%" y="399.50"></text></g><g><title>askama_derive::generator::Generator::build (5 samples, 0.12%)</title><rect x="95.5000%" y="533" width="0.1250%" height="15" fill="rgb(241,173,43)" fg:x="3820" fg:w="5"/><text x="95.7500%" y="543.50"></text></g><g><title>askama_derive::generator::Generator::impl_template (4 samples, 0.10%)</title><rect x="95.5250%" y="517" width="0.1000%" height="15" fill="rgb(215,190,9)" fg:x="3821" fg:w="4"/><text x="95.7750%" y="527.50"></text></g><g><title>askama_derive::generator::Generator::write_header (3 samples, 0.07%)</title><rect x="95.5500%" y="501" width="0.0750%" height="15" fill="rgb(242,101,16)" fg:x="3822" fg:w="3"/><text x="95.8000%" y="511.50"></text></g><g><title>syn::generics::printing::&lt;impl quote::to_tokens::ToTokens for syn::generics::ImplGenerics&gt;::to_tokens (1 samples, 0.03%)</title><rect x="95.6000%" y="485" width="0.0250%" height="15" fill="rgb(223,190,21)" fg:x="3824" fg:w="1"/><text x="95.8500%" y="495.50"></text></g><g><title>syn::punctuated::printing::&lt;impl quote::to_tokens::ToTokens for syn::punctuated::Pair&lt;T,P&gt;&gt;::to_tokens (1 samples, 0.03%)</title><rect x="95.6000%" y="469" width="0.0250%" height="15" fill="rgb(215,228,25)" fg:x="3824" fg:w="1"/><text x="95.8500%" y="479.50"></text></g><g><title>&lt;&amp;T as quote::to_tokens::ToTokens&gt;::to_tokens (1 samples, 0.03%)</title><rect x="95.6000%" y="453" width="0.0250%" height="15" fill="rgb(225,36,22)" fg:x="3824" fg:w="1"/><text x="95.8500%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::into_vec (1 samples, 0.03%)</title><rect x="95.6250%" y="517" width="0.0250%" height="15" fill="rgb(251,106,46)" fg:x="3825" fg:w="1"/><text x="95.8750%" y="527.50"></text></g><g><title>alloc::slice::hack::into_vec (1 samples, 0.03%)</title><rect x="95.6250%" y="501" width="0.0250%" height="15" fill="rgb(208,90,1)" fg:x="3825" fg:w="1"/><text x="95.8750%" y="511.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::into_raw_with_allocator (1 samples, 0.03%)</title><rect x="95.6250%" y="485" width="0.0250%" height="15" fill="rgb(243,10,4)" fg:x="3825" fg:w="1"/><text x="95.8750%" y="495.50"></text></g><g><title>askama_derive::parser::parse (1 samples, 0.03%)</title><rect x="95.6500%" y="517" width="0.0250%" height="15" fill="rgb(212,137,27)" fg:x="3826" fg:w="1"/><text x="95.9000%" y="527.50"></text></g><g><title>askama_derive::parser::node::Node::parse (1 samples, 0.03%)</title><rect x="95.6500%" y="501" width="0.0250%" height="15" fill="rgb(231,220,49)" fg:x="3826" fg:w="1"/><text x="95.9000%" y="511.50"></text></g><g><title>askama_derive::parser::node::parse_template (1 samples, 0.03%)</title><rect x="95.6500%" y="485" width="0.0250%" height="15" fill="rgb(237,96,20)" fg:x="3826" fg:w="1"/><text x="95.9000%" y="495.50"></text></g><g><title>nom::multi::many0::{{closure}} (1 samples, 0.03%)</title><rect x="95.6500%" y="469" width="0.0250%" height="15" fill="rgb(239,229,30)" fg:x="3826" fg:w="1"/><text x="95.9000%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="95.6500%" y="453" width="0.0250%" height="15" fill="rgb(219,65,33)" fg:x="3826" fg:w="1"/><text x="95.9000%" y="463.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.03%)</title><rect x="95.6500%" y="437" width="0.0250%" height="15" fill="rgb(243,134,7)" fg:x="3826" fg:w="1"/><text x="95.9000%" y="447.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.03%)</title><rect x="95.6500%" y="421" width="0.0250%" height="15" fill="rgb(216,177,54)" fg:x="3826" fg:w="1"/><text x="95.9000%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="95.6500%" y="405" width="0.0250%" height="15" fill="rgb(211,160,20)" fg:x="3826" fg:w="1"/><text x="95.9000%" y="415.50"></text></g><g><title>nom::combinator::complete::{{closure}} (1 samples, 0.03%)</title><rect x="95.6500%" y="389" width="0.0250%" height="15" fill="rgb(239,85,39)" fg:x="3826" fg:w="1"/><text x="95.9000%" y="399.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.03%)</title><rect x="95.6500%" y="373" width="0.0250%" height="15" fill="rgb(232,125,22)" fg:x="3826" fg:w="1"/><text x="95.9000%" y="383.50"></text></g><g><title>askama_derive::generator::find_used_templates (3 samples, 0.07%)</title><rect x="95.6250%" y="533" width="0.0750%" height="15" fill="rgb(244,57,34)" fg:x="3825" fg:w="3"/><text x="95.8750%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;askama_derive::parser::node::Node&gt;&gt; (1 samples, 0.03%)</title><rect x="95.6750%" y="517" width="0.0250%" height="15" fill="rgb(214,203,32)" fg:x="3827" fg:w="1"/><text x="95.9250%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="95.6750%" y="501" width="0.0250%" height="15" fill="rgb(207,58,43)" fg:x="3827" fg:w="1"/><text x="95.9250%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;askama_derive::parser::node::Node,alloc::alloc::Global&gt;&gt; (1 samples, 0.03%)</title><rect x="95.6750%" y="485" width="0.0250%" height="15" fill="rgb(215,193,15)" fg:x="3827" fg:w="1"/><text x="95.9250%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="95.6750%" y="469" width="0.0250%" height="15" fill="rgb(232,15,44)" fg:x="3827" fg:w="1"/><text x="95.9250%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;askama_derive::parser::node::Node&gt;&gt; (1 samples, 0.03%)</title><rect x="95.6750%" y="453" width="0.0250%" height="15" fill="rgb(212,3,48)" fg:x="3827" fg:w="1"/><text x="95.9250%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="95.6750%" y="437" width="0.0250%" height="15" fill="rgb(218,128,7)" fg:x="3827" fg:w="1"/><text x="95.9250%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="95.6750%" y="421" width="0.0250%" height="15" fill="rgb(226,216,39)" fg:x="3827" fg:w="1"/><text x="95.9250%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="95.6750%" y="405" width="0.0250%" height="15" fill="rgb(243,47,51)" fg:x="3827" fg:w="1"/><text x="95.9250%" y="415.50"></text></g><g><title>free (1 samples, 0.03%)</title><rect x="95.6750%" y="389" width="0.0250%" height="15" fill="rgb(241,183,40)" fg:x="3827" fg:w="1"/><text x="95.9250%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="95.6750%" y="373" width="0.0250%" height="15" fill="rgb(231,217,32)" fg:x="3827" fg:w="1"/><text x="95.9250%" y="383.50"></text></g><g><title>askama_derive::input::extension_to_mime_type (1 samples, 0.03%)</title><rect x="95.7000%" y="517" width="0.0250%" height="15" fill="rgb(229,61,38)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="527.50"></text></g><g><title>mime_guess::from_ext (1 samples, 0.03%)</title><rect x="95.7000%" y="501" width="0.0250%" height="15" fill="rgb(225,210,5)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="511.50"></text></g><g><title>mime_guess::MimeGuess::from_ext (1 samples, 0.03%)</title><rect x="95.7000%" y="485" width="0.0250%" height="15" fill="rgb(231,79,45)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="495.50"></text></g><g><title>mime_guess::impl_::get_mime_types (1 samples, 0.03%)</title><rect x="95.7000%" y="469" width="0.0250%" height="15" fill="rgb(224,100,7)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="479.50"></text></g><g><title>mime_guess::impl_::map_lookup (1 samples, 0.03%)</title><rect x="95.7000%" y="453" width="0.0250%" height="15" fill="rgb(241,198,18)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (1 samples, 0.03%)</title><rect x="95.7000%" y="437" width="0.0250%" height="15" fill="rgb(252,97,53)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (1 samples, 0.03%)</title><rect x="95.7000%" y="421" width="0.0250%" height="15" fill="rgb(220,88,7)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (1 samples, 0.03%)</title><rect x="95.7000%" y="405" width="0.0250%" height="15" fill="rgb(213,176,14)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="415.50"></text></g><g><title>&lt;unicase::UniCase&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.03%)</title><rect x="95.7000%" y="389" width="0.0250%" height="15" fill="rgb(246,73,7)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="399.50"></text></g><g><title>&lt;unicase::unicode::Unicode&lt;T&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.03%)</title><rect x="95.7000%" y="373" width="0.0250%" height="15" fill="rgb(245,64,36)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (1 samples, 0.03%)</title><rect x="95.7000%" y="357" width="0.0250%" height="15" fill="rgb(245,80,10)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.03%)</title><rect x="95.7000%" y="341" width="0.0250%" height="15" fill="rgb(232,107,50)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="351.50"></text></g><g><title>core::iter::traits::iterator::iter_compare (1 samples, 0.03%)</title><rect x="95.7000%" y="325" width="0.0250%" height="15" fill="rgb(253,3,0)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.03%)</title><rect x="95.7000%" y="309" width="0.0250%" height="15" fill="rgb(212,99,53)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="95.7000%" y="293" width="0.0250%" height="15" fill="rgb(249,111,54)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="95.7000%" y="277" width="0.0250%" height="15" fill="rgb(249,55,30)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="287.50"></text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_try_fold (1 samples, 0.03%)</title><rect x="95.7000%" y="261" width="0.0250%" height="15" fill="rgb(237,47,42)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="95.7000%" y="245" width="0.0250%" height="15" fill="rgb(211,20,18)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::try_fold (1 samples, 0.03%)</title><rect x="95.7000%" y="229" width="0.0250%" height="15" fill="rgb(231,203,46)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="95.7000%" y="213" width="0.0250%" height="15" fill="rgb(237,142,3)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.03%)</title><rect x="95.7000%" y="197" width="0.0250%" height="15" fill="rgb(241,107,1)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="207.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (1 samples, 0.03%)</title><rect x="95.7000%" y="181" width="0.0250%" height="15" fill="rgb(229,83,13)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="191.50"></text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_try_fold::flatten::{{closure}} (1 samples, 0.03%)</title><rect x="95.7000%" y="165" width="0.0250%" height="15" fill="rgb(241,91,40)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::flatten::{{closure}} (1 samples, 0.03%)</title><rect x="95.7000%" y="149" width="0.0250%" height="15" fill="rgb(225,3,45)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.03%)</title><rect x="95.7000%" y="133" width="0.0250%" height="15" fill="rgb(244,223,14)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.03%)</title><rect x="95.7000%" y="117" width="0.0250%" height="15" fill="rgb(224,124,37)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.03%)</title><rect x="95.7000%" y="101" width="0.0250%" height="15" fill="rgb(251,171,30)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="111.50"></text></g><g><title>core::iter::traits::iterator::iter_compare::compare::{{closure}} (1 samples, 0.03%)</title><rect x="95.7000%" y="85" width="0.0250%" height="15" fill="rgb(236,46,54)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="95.7000%" y="69" width="0.0250%" height="15" fill="rgb(245,213,5)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="95.7000%" y="53" width="0.0250%" height="15" fill="rgb(230,144,27)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="63.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (1 samples, 0.03%)</title><rect x="95.7000%" y="37" width="0.0250%" height="15" fill="rgb(220,86,6)" fg:x="3828" fg:w="1"/><text x="95.9500%" y="47.50"></text></g><g><title>askama_derive::input::TemplateInput::new (2 samples, 0.05%)</title><rect x="95.7000%" y="533" width="0.0500%" height="15" fill="rgb(240,20,13)" fg:x="3828" fg:w="2"/><text x="95.9500%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.03%)</title><rect x="95.7250%" y="517" width="0.0250%" height="15" fill="rgb(217,89,34)" fg:x="3829" fg:w="1"/><text x="95.9750%" y="527.50"></text></g><g><title>askama_derive::input::TemplateInput::new::{{closure}} (1 samples, 0.03%)</title><rect x="95.7250%" y="501" width="0.0250%" height="15" fill="rgb(229,13,5)" fg:x="3829" fg:w="1"/><text x="95.9750%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1 samples, 0.03%)</title><rect x="95.7250%" y="485" width="0.0250%" height="15" fill="rgb(244,67,35)" fg:x="3829" fg:w="1"/><text x="95.9750%" y="495.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.03%)</title><rect x="95.7250%" y="469" width="0.0250%" height="15" fill="rgb(221,40,2)" fg:x="3829" fg:w="1"/><text x="95.9750%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.03%)</title><rect x="95.7250%" y="453" width="0.0250%" height="15" fill="rgb(237,157,21)" fg:x="3829" fg:w="1"/><text x="95.9750%" y="463.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.03%)</title><rect x="95.7250%" y="437" width="0.0250%" height="15" fill="rgb(222,94,11)" fg:x="3829" fg:w="1"/><text x="95.9750%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (1 samples, 0.03%)</title><rect x="95.7250%" y="421" width="0.0250%" height="15" fill="rgb(249,113,6)" fg:x="3829" fg:w="1"/><text x="95.9750%" y="431.50"></text></g><g><title>core::iter::adapters::enumerate::Enumerate&lt;I&gt;::new (1 samples, 0.03%)</title><rect x="95.7250%" y="405" width="0.0250%" height="15" fill="rgb(238,137,36)" fg:x="3829" fg:w="1"/><text x="95.9750%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.15%)</title><rect x="95.9500%" y="261" width="0.1500%" height="15" fill="rgb(210,102,26)" fg:x="3838" fg:w="6"/><text x="96.2000%" y="271.50"></text></g><g><title>askama_derive::parser::parse (17 samples, 0.42%)</title><rect x="95.7500%" y="533" width="0.4250%" height="15" fill="rgb(218,30,30)" fg:x="3830" fg:w="17"/><text x="96.0000%" y="543.50"></text></g><g><title>askama_derive::parser::node::Node::parse (17 samples, 0.42%)</title><rect x="95.7500%" y="517" width="0.4250%" height="15" fill="rgb(214,67,26)" fg:x="3830" fg:w="17"/><text x="96.0000%" y="527.50"></text></g><g><title>askama_derive::parser::node::parse_template (17 samples, 0.42%)</title><rect x="95.7500%" y="501" width="0.4250%" height="15" fill="rgb(251,9,53)" fg:x="3830" fg:w="17"/><text x="96.0000%" y="511.50"></text></g><g><title>nom::multi::many0::{{closure}} (17 samples, 0.42%)</title><rect x="95.7500%" y="485" width="0.4250%" height="15" fill="rgb(228,204,25)" fg:x="3830" fg:w="17"/><text x="96.0000%" y="495.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (17 samples, 0.42%)</title><rect x="95.7500%" y="469" width="0.4250%" height="15" fill="rgb(207,153,8)" fg:x="3830" fg:w="17"/><text x="96.0000%" y="479.50"></text></g><g><title>nom::branch::alt::{{closure}} (17 samples, 0.42%)</title><rect x="95.7500%" y="453" width="0.4250%" height="15" fill="rgb(242,9,16)" fg:x="3830" fg:w="17"/><text x="96.0000%" y="463.50"></text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (17 samples, 0.42%)</title><rect x="95.7500%" y="437" width="0.4250%" height="15" fill="rgb(217,211,10)" fg:x="3830" fg:w="17"/><text x="96.0000%" y="447.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (17 samples, 0.42%)</title><rect x="95.7500%" y="421" width="0.4250%" height="15" fill="rgb(219,228,52)" fg:x="3830" fg:w="17"/><text x="96.0000%" y="431.50"></text></g><g><title>nom::combinator::complete::{{closure}} (17 samples, 0.42%)</title><rect x="95.7500%" y="405" width="0.4250%" height="15" fill="rgb(231,92,29)" fg:x="3830" fg:w="17"/><text x="96.0000%" y="415.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (16 samples, 0.40%)</title><rect x="95.7750%" y="389" width="0.4000%" height="15" fill="rgb(232,8,23)" fg:x="3831" fg:w="16"/><text x="96.0250%" y="399.50"></text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (16 samples, 0.40%)</title><rect x="95.7750%" y="373" width="0.4000%" height="15" fill="rgb(216,211,34)" fg:x="3831" fg:w="16"/><text x="96.0250%" y="383.50"></text></g><g><title>askama_derive::parser::take_content (16 samples, 0.40%)</title><rect x="95.7750%" y="357" width="0.4000%" height="15" fill="rgb(236,151,0)" fg:x="3831" fg:w="16"/><text x="96.0250%" y="367.50"></text></g><g><title>nom::combinator::opt::{{closure}} (16 samples, 0.40%)</title><rect x="95.7750%" y="341" width="0.4000%" height="15" fill="rgb(209,168,3)" fg:x="3831" fg:w="16"/><text x="96.0250%" y="351.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (16 samples, 0.40%)</title><rect x="95.7750%" y="325" width="0.4000%" height="15" fill="rgb(208,129,28)" fg:x="3831" fg:w="16"/><text x="96.0250%" y="335.50"></text></g><g><title>nom::combinator::recognize::{{closure}} (16 samples, 0.40%)</title><rect x="95.7750%" y="309" width="0.4000%" height="15" fill="rgb(229,78,22)" fg:x="3831" fg:w="16"/><text x="96.0250%" y="319.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (16 samples, 0.40%)</title><rect x="95.7750%" y="293" width="0.4000%" height="15" fill="rgb(228,187,13)" fg:x="3831" fg:w="16"/><text x="96.0250%" y="303.50"></text></g><g><title>askama_derive::parser::skip_till::{{closure}} (16 samples, 0.40%)</title><rect x="95.7750%" y="277" width="0.4000%" height="15" fill="rgb(240,119,24)" fg:x="3831" fg:w="16"/><text x="96.0250%" y="287.50"></text></g><g><title>nom::branch::alt::{{closure}} (3 samples, 0.07%)</title><rect x="96.1000%" y="261" width="0.0750%" height="15" fill="rgb(209,194,42)" fg:x="3844" fg:w="3"/><text x="96.3500%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;std::path::PathBuf,alloc::string::String&gt;&gt; (1 samples, 0.03%)</title><rect x="96.1750%" y="533" width="0.0250%" height="15" fill="rgb(247,200,46)" fg:x="3847" fg:w="1"/><text x="96.4250%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;std::path::PathBuf,alloc::string::String,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.03%)</title><rect x="96.1750%" y="517" width="0.0250%" height="15" fill="rgb(218,76,16)" fg:x="3847" fg:w="1"/><text x="96.4250%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(std::path::PathBuf,alloc::string::String)&gt;&gt; (1 samples, 0.03%)</title><rect x="96.1750%" y="501" width="0.0250%" height="15" fill="rgb(225,21,48)" fg:x="3847" fg:w="1"/><text x="96.4250%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="96.1750%" y="485" width="0.0250%" height="15" fill="rgb(239,223,50)" fg:x="3847" fg:w="1"/><text x="96.4250%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.03%)</title><rect x="96.1750%" y="469" width="0.0250%" height="15" fill="rgb(244,45,21)" fg:x="3847" fg:w="1"/><text x="96.4250%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.03%)</title><rect x="96.1750%" y="453" width="0.0250%" height="15" fill="rgb(232,33,43)" fg:x="3847" fg:w="1"/><text x="96.4250%" y="463.50"></text></g><g><title>askama_derive::generator::build_template (29 samples, 0.72%)</title><rect x="95.5000%" y="549" width="0.7250%" height="15" fill="rgb(209,8,3)" fg:x="3820" fg:w="29"/><text x="95.7500%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.03%)</title><rect x="96.2000%" y="533" width="0.0250%" height="15" fill="rgb(214,25,53)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="96.2000%" y="517" width="0.0250%" height="15" fill="rgb(254,186,54)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.03%)</title><rect x="96.2000%" y="501" width="0.0250%" height="15" fill="rgb(208,174,49)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="96.2000%" y="485" width="0.0250%" height="15" fill="rgb(233,191,51)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="96.2000%" y="469" width="0.0250%" height="15" fill="rgb(222,134,10)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.03%)</title><rect x="96.2000%" y="453" width="0.0250%" height="15" fill="rgb(230,226,20)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.03%)</title><rect x="96.2000%" y="437" width="0.0250%" height="15" fill="rgb(251,111,25)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.03%)</title><rect x="96.2000%" y="421" width="0.0250%" height="15" fill="rgb(224,40,46)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.03%)</title><rect x="96.2000%" y="405" width="0.0250%" height="15" fill="rgb(236,108,47)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.03%)</title><rect x="96.2000%" y="389" width="0.0250%" height="15" fill="rgb(234,93,0)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="399.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.03%)</title><rect x="96.2000%" y="373" width="0.0250%" height="15" fill="rgb(224,213,32)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="96.2000%" y="357" width="0.0250%" height="15" fill="rgb(251,11,48)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="96.2000%" y="341" width="0.0250%" height="15" fill="rgb(236,173,5)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="96.2000%" y="325" width="0.0250%" height="15" fill="rgb(230,95,12)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="335.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="96.2000%" y="309" width="0.0250%" height="15" fill="rgb(232,209,1)" fg:x="3848" fg:w="1"/><text x="96.4500%" y="319.50"></text></g><g><title>proc_macro2::fallback::TokenStreamBuilder::push_token_from_parser (1 samples, 0.03%)</title><rect x="96.2500%" y="437" width="0.0250%" height="15" fill="rgb(232,6,1)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="447.50"></text></g><g><title>proc_macro2::rcvec::RcVecBuilder&lt;T&gt;::push (1 samples, 0.03%)</title><rect x="96.2500%" y="421" width="0.0250%" height="15" fill="rgb(210,224,50)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="96.2500%" y="405" width="0.0250%" height="15" fill="rgb(228,127,35)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="96.2500%" y="389" width="0.0250%" height="15" fill="rgb(245,102,45)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="96.2500%" y="373" width="0.0250%" height="15" fill="rgb(214,1,49)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="96.2500%" y="357" width="0.0250%" height="15" fill="rgb(226,163,40)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="96.2500%" y="341" width="0.0250%" height="15" fill="rgb(239,212,28)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="96.2500%" y="325" width="0.0250%" height="15" fill="rgb(220,20,13)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="335.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="96.2500%" y="309" width="0.0250%" height="15" fill="rgb(210,164,35)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="319.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="96.2500%" y="293" width="0.0250%" height="15" fill="rgb(248,109,41)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="96.2500%" y="277" width="0.0250%" height="15" fill="rgb(238,23,50)" fg:x="3850" fg:w="1"/><text x="96.5000%" y="287.50"></text></g><g><title>proc_macro2::parse::Cursor::bytes (1 samples, 0.03%)</title><rect x="96.2750%" y="437" width="0.0250%" height="15" fill="rgb(211,48,49)" fg:x="3851" fg:w="1"/><text x="96.5250%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::bytes (1 samples, 0.03%)</title><rect x="96.2750%" y="421" width="0.0250%" height="15" fill="rgb(223,36,21)" fg:x="3851" fg:w="1"/><text x="96.5250%" y="431.50"></text></g><g><title>proc_macro2::parse::doc_comment (1 samples, 0.03%)</title><rect x="96.3000%" y="437" width="0.0250%" height="15" fill="rgb(207,123,46)" fg:x="3852" fg:w="1"/><text x="96.5500%" y="447.50"></text></g><g><title>proc_macro2::parse::doc_comment_contents (1 samples, 0.03%)</title><rect x="96.3000%" y="421" width="0.0250%" height="15" fill="rgb(240,218,32)" fg:x="3852" fg:w="1"/><text x="96.5500%" y="431.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (1 samples, 0.03%)</title><rect x="96.3000%" y="405" width="0.0250%" height="15" fill="rgb(252,5,43)" fg:x="3852" fg:w="1"/><text x="96.5500%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (1 samples, 0.03%)</title><rect x="96.3000%" y="389" width="0.0250%" height="15" fill="rgb(252,84,19)" fg:x="3852" fg:w="1"/><text x="96.5500%" y="399.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (1 samples, 0.03%)</title><rect x="96.3000%" y="373" width="0.0250%" height="15" fill="rgb(243,152,39)" fg:x="3852" fg:w="1"/><text x="96.5500%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (1 samples, 0.03%)</title><rect x="96.3000%" y="357" width="0.0250%" height="15" fill="rgb(234,160,15)" fg:x="3852" fg:w="1"/><text x="96.5500%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="96.3250%" y="421" width="0.0250%" height="15" fill="rgb(237,34,20)" fg:x="3853" fg:w="1"/><text x="96.5750%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 0.03%)</title><rect x="96.3500%" y="405" width="0.0250%" height="15" fill="rgb(229,97,13)" fg:x="3854" fg:w="1"/><text x="96.6000%" y="415.50"></text></g><g><title>proc_macro2::parse::ident::{{closure}} (1 samples, 0.03%)</title><rect x="96.3500%" y="389" width="0.0250%" height="15" fill="rgb(234,71,50)" fg:x="3854" fg:w="1"/><text x="96.6000%" y="399.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (1 samples, 0.03%)</title><rect x="96.3500%" y="373" width="0.0250%" height="15" fill="rgb(253,155,4)" fg:x="3854" fg:w="1"/><text x="96.6000%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (1 samples, 0.03%)</title><rect x="96.3500%" y="357" width="0.0250%" height="15" fill="rgb(222,185,37)" fg:x="3854" fg:w="1"/><text x="96.6000%" y="367.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (1 samples, 0.03%)</title><rect x="96.3500%" y="341" width="0.0250%" height="15" fill="rgb(251,177,13)" fg:x="3854" fg:w="1"/><text x="96.6000%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (1 samples, 0.03%)</title><rect x="96.3500%" y="325" width="0.0250%" height="15" fill="rgb(250,179,40)" fg:x="3854" fg:w="1"/><text x="96.6000%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="96.3500%" y="309" width="0.0250%" height="15" fill="rgb(242,44,2)" fg:x="3854" fg:w="1"/><text x="96.6000%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="96.3500%" y="293" width="0.0250%" height="15" fill="rgb(216,177,13)" fg:x="3854" fg:w="1"/><text x="96.6000%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="96.3750%" y="389" width="0.0250%" height="15" fill="rgb(216,106,43)" fg:x="3855" fg:w="1"/><text x="96.6250%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="96.4000%" y="389" width="0.0250%" height="15" fill="rgb(216,183,2)" fg:x="3856" fg:w="1"/><text x="96.6500%" y="399.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.03%)</title><rect x="96.4250%" y="325" width="0.0250%" height="15" fill="rgb(249,75,3)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.03%)</title><rect x="96.4250%" y="309" width="0.0250%" height="15" fill="rgb(219,67,39)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="96.4250%" y="293" width="0.0250%" height="15" fill="rgb(253,228,2)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="96.4250%" y="277" width="0.0250%" height="15" fill="rgb(235,138,27)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="96.4250%" y="261" width="0.0250%" height="15" fill="rgb(236,97,51)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="96.4250%" y="245" width="0.0250%" height="15" fill="rgb(240,80,30)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="96.4250%" y="229" width="0.0250%" height="15" fill="rgb(230,178,19)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="96.4250%" y="213" width="0.0250%" height="15" fill="rgb(210,190,27)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="96.4250%" y="197" width="0.0250%" height="15" fill="rgb(222,107,31)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="96.4250%" y="181" width="0.0250%" height="15" fill="rgb(216,127,34)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="96.4250%" y="165" width="0.0250%" height="15" fill="rgb(234,116,52)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="96.4250%" y="149" width="0.0250%" height="15" fill="rgb(222,124,15)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="159.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="96.4250%" y="133" width="0.0250%" height="15" fill="rgb(231,179,28)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="96.4250%" y="117" width="0.0250%" height="15" fill="rgb(226,93,45)" fg:x="3857" fg:w="1"/><text x="96.6750%" y="127.50"></text></g><g><title>proc_macro2::Ident::new (2 samples, 0.05%)</title><rect x="96.4250%" y="389" width="0.0500%" height="15" fill="rgb(215,8,51)" fg:x="3857" fg:w="2"/><text x="96.6750%" y="399.50"></text></g><g><title>proc_macro2::imp::Ident::new (2 samples, 0.05%)</title><rect x="96.4250%" y="373" width="0.0500%" height="15" fill="rgb(223,106,5)" fg:x="3857" fg:w="2"/><text x="96.6750%" y="383.50"></text></g><g><title>proc_macro2::fallback::Ident::new (2 samples, 0.05%)</title><rect x="96.4250%" y="357" width="0.0500%" height="15" fill="rgb(250,191,5)" fg:x="3857" fg:w="2"/><text x="96.6750%" y="367.50"></text></g><g><title>proc_macro2::fallback::Ident::_new (2 samples, 0.05%)</title><rect x="96.4250%" y="341" width="0.0500%" height="15" fill="rgb(242,132,44)" fg:x="3857" fg:w="2"/><text x="96.6750%" y="351.50"></text></g><g><title>proc_macro2::fallback::validate_ident (1 samples, 0.03%)</title><rect x="96.4500%" y="325" width="0.0250%" height="15" fill="rgb(251,152,29)" fg:x="3858" fg:w="1"/><text x="96.7000%" y="335.50"></text></g><g><title>proc_macro2::fallback::validate_ident::ident_ok (1 samples, 0.03%)</title><rect x="96.4500%" y="309" width="0.0250%" height="15" fill="rgb(218,179,5)" fg:x="3858" fg:w="1"/><text x="96.7000%" y="319.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="96.4500%" y="293" width="0.0250%" height="15" fill="rgb(227,67,19)" fg:x="3858" fg:w="1"/><text x="96.7000%" y="303.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.03%)</title><rect x="96.4500%" y="277" width="0.0250%" height="15" fill="rgb(233,119,31)" fg:x="3858" fg:w="1"/><text x="96.7000%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="96.4500%" y="261" width="0.0250%" height="15" fill="rgb(241,120,22)" fg:x="3858" fg:w="1"/><text x="96.7000%" y="271.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="96.4500%" y="245" width="0.0250%" height="15" fill="rgb(224,102,30)" fg:x="3858" fg:w="1"/><text x="96.7000%" y="255.50"></text></g><g><title>proc_macro2::Span::call_site (1 samples, 0.03%)</title><rect x="96.4750%" y="389" width="0.0250%" height="15" fill="rgb(210,164,37)" fg:x="3859" fg:w="1"/><text x="96.7250%" y="399.50"></text></g><g><title>proc_macro2::imp::Span::call_site (1 samples, 0.03%)</title><rect x="96.4750%" y="373" width="0.0250%" height="15" fill="rgb(226,191,16)" fg:x="3859" fg:w="1"/><text x="96.7250%" y="383.50"></text></g><g><title>proc_macro2::detection::inside_proc_macro (1 samples, 0.03%)</title><rect x="96.4750%" y="357" width="0.0250%" height="15" fill="rgb(214,40,45)" fg:x="3859" fg:w="1"/><text x="96.7250%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.03%)</title><rect x="96.4750%" y="341" width="0.0250%" height="15" fill="rgb(244,29,26)" fg:x="3859" fg:w="1"/><text x="96.7250%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.03%)</title><rect x="96.4750%" y="325" width="0.0250%" height="15" fill="rgb(216,16,5)" fg:x="3859" fg:w="1"/><text x="96.7250%" y="335.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (1 samples, 0.03%)</title><rect x="96.5000%" y="389" width="0.0250%" height="15" fill="rgb(249,76,35)" fg:x="3860" fg:w="1"/><text x="96.7500%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="96.5250%" y="341" width="0.0250%" height="15" fill="rgb(207,11,44)" fg:x="3861" fg:w="1"/><text x="96.7750%" y="351.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.03%)</title><rect x="96.5250%" y="325" width="0.0250%" height="15" fill="rgb(228,190,49)" fg:x="3861" fg:w="1"/><text x="96.7750%" y="335.50"></text></g><g><title>proc_macro2::parse::ident (9 samples, 0.23%)</title><rect x="96.3500%" y="421" width="0.2250%" height="15" fill="rgb(214,173,12)" fg:x="3854" fg:w="9"/><text x="96.6000%" y="431.50"></text></g><g><title>proc_macro2::parse::ident_any (8 samples, 0.20%)</title><rect x="96.3750%" y="405" width="0.2000%" height="15" fill="rgb(218,26,35)" fg:x="3855" fg:w="8"/><text x="96.6250%" y="415.50"></text></g><g><title>proc_macro2::parse::ident_not_raw (2 samples, 0.05%)</title><rect x="96.5250%" y="389" width="0.0500%" height="15" fill="rgb(220,200,19)" fg:x="3861" fg:w="2"/><text x="96.7750%" y="399.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="96.5250%" y="373" width="0.0500%" height="15" fill="rgb(239,95,49)" fg:x="3861" fg:w="2"/><text x="96.7750%" y="383.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="96.5250%" y="357" width="0.0500%" height="15" fill="rgb(235,85,53)" fg:x="3861" fg:w="2"/><text x="96.7750%" y="367.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.03%)</title><rect x="96.5500%" y="341" width="0.0250%" height="15" fill="rgb(233,133,31)" fg:x="3862" fg:w="1"/><text x="96.8000%" y="351.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="96.5500%" y="325" width="0.0250%" height="15" fill="rgb(218,25,20)" fg:x="3862" fg:w="1"/><text x="96.8000%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="96.5750%" y="293" width="0.0250%" height="15" fill="rgb(252,210,38)" fg:x="3863" fg:w="1"/><text x="96.8250%" y="303.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.03%)</title><rect x="96.5750%" y="277" width="0.0250%" height="15" fill="rgb(242,134,21)" fg:x="3863" fg:w="1"/><text x="96.8250%" y="287.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.03%)</title><rect x="96.5750%" y="261" width="0.0250%" height="15" fill="rgb(213,28,48)" fg:x="3863" fg:w="1"/><text x="96.8250%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="96.5750%" y="245" width="0.0250%" height="15" fill="rgb(250,196,2)" fg:x="3863" fg:w="1"/><text x="96.8250%" y="255.50"></text></g><g><title>proc_macro2::parse::byte (2 samples, 0.05%)</title><rect x="96.5750%" y="389" width="0.0500%" height="15" fill="rgb(227,5,17)" fg:x="3863" fg:w="2"/><text x="96.8250%" y="399.50"></text></g><g><title>proc_macro2::parse::Cursor::parse (2 samples, 0.05%)</title><rect x="96.5750%" y="373" width="0.0500%" height="15" fill="rgb(221,226,24)" fg:x="3863" fg:w="2"/><text x="96.8250%" y="383.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (2 samples, 0.05%)</title><rect x="96.5750%" y="357" width="0.0500%" height="15" fill="rgb(211,5,48)" fg:x="3863" fg:w="2"/><text x="96.8250%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (2 samples, 0.05%)</title><rect x="96.5750%" y="341" width="0.0500%" height="15" fill="rgb(219,150,6)" fg:x="3863" fg:w="2"/><text x="96.8250%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (2 samples, 0.05%)</title><rect x="96.5750%" y="325" width="0.0500%" height="15" fill="rgb(251,46,16)" fg:x="3863" fg:w="2"/><text x="96.8250%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (2 samples, 0.05%)</title><rect x="96.5750%" y="309" width="0.0500%" height="15" fill="rgb(220,204,40)" fg:x="3863" fg:w="2"/><text x="96.8250%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="96.6000%" y="293" width="0.0250%" height="15" fill="rgb(211,85,2)" fg:x="3864" fg:w="1"/><text x="96.8500%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="96.6000%" y="277" width="0.0250%" height="15" fill="rgb(229,17,7)" fg:x="3864" fg:w="1"/><text x="96.8500%" y="287.50"></text></g><g><title>proc_macro2::parse::character (1 samples, 0.03%)</title><rect x="96.6250%" y="389" width="0.0250%" height="15" fill="rgb(239,72,28)" fg:x="3865" fg:w="1"/><text x="96.8750%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (1 samples, 0.03%)</title><rect x="96.6250%" y="373" width="0.0250%" height="15" fill="rgb(230,47,54)" fg:x="3865" fg:w="1"/><text x="96.8750%" y="383.50"></text></g><g><title>proc_macro2::parse::int (2 samples, 0.05%)</title><rect x="96.6500%" y="389" width="0.0500%" height="15" fill="rgb(214,50,8)" fg:x="3866" fg:w="2"/><text x="96.9000%" y="399.50"></text></g><g><title>proc_macro2::parse::digits (2 samples, 0.05%)</title><rect x="96.6500%" y="373" width="0.0500%" height="15" fill="rgb(216,198,43)" fg:x="3866" fg:w="2"/><text x="96.9000%" y="383.50"></text></g><g><title>proc_macro2::parse::Cursor::starts_with (2 samples, 0.05%)</title><rect x="96.6500%" y="357" width="0.0500%" height="15" fill="rgb(234,20,35)" fg:x="3866" fg:w="2"/><text x="96.9000%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (2 samples, 0.05%)</title><rect x="96.6500%" y="341" width="0.0500%" height="15" fill="rgb(254,45,19)" fg:x="3866" fg:w="2"/><text x="96.9000%" y="351.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (1 samples, 0.03%)</title><rect x="96.6750%" y="325" width="0.0250%" height="15" fill="rgb(219,14,44)" fg:x="3867" fg:w="1"/><text x="96.9250%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (1 samples, 0.03%)</title><rect x="96.6750%" y="309" width="0.0250%" height="15" fill="rgb(217,220,26)" fg:x="3867" fg:w="1"/><text x="96.9250%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="96.6750%" y="293" width="0.0250%" height="15" fill="rgb(213,158,28)" fg:x="3867" fg:w="1"/><text x="96.9250%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="96.6750%" y="277" width="0.0250%" height="15" fill="rgb(252,51,52)" fg:x="3867" fg:w="1"/><text x="96.9250%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="96.6750%" y="261" width="0.0250%" height="15" fill="rgb(246,89,16)" fg:x="3867" fg:w="1"/><text x="96.9250%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="96.6750%" y="245" width="0.0250%" height="15" fill="rgb(216,158,49)" fg:x="3867" fg:w="1"/><text x="96.9250%" y="255.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.03%)</title><rect x="96.6750%" y="229" width="0.0250%" height="15" fill="rgb(236,107,19)" fg:x="3867" fg:w="1"/><text x="96.9250%" y="239.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.03%)</title><rect x="96.6750%" y="213" width="0.0250%" height="15" fill="rgb(228,185,30)" fg:x="3867" fg:w="1"/><text x="96.9250%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (12 samples, 0.30%)</title><rect x="97.6000%" y="325" width="0.3000%" height="15" fill="rgb(246,134,8)" fg:x="3904" fg:w="12"/><text x="97.8500%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (9 samples, 0.23%)</title><rect x="97.6750%" y="309" width="0.2250%" height="15" fill="rgb(214,143,50)" fg:x="3907" fg:w="9"/><text x="97.9250%" y="319.50"></text></g><g><title>core::mem::size_of (1 samples, 0.03%)</title><rect x="97.8750%" y="293" width="0.0250%" height="15" fill="rgb(228,75,8)" fg:x="3915" fg:w="1"/><text x="98.1250%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.47%)</title><rect x="97.9250%" y="309" width="0.4750%" height="15" fill="rgb(207,175,4)" fg:x="3917" fg:w="19"/><text x="98.1750%" y="319.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (4 samples, 0.10%)</title><rect x="98.3000%" y="293" width="0.1000%" height="15" fill="rgb(205,108,24)" fg:x="3932" fg:w="4"/><text x="98.5500%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::from_u32_unchecked (1 samples, 0.03%)</title><rect x="98.3750%" y="277" width="0.0250%" height="15" fill="rgb(244,120,49)" fg:x="3935" fg:w="1"/><text x="98.6250%" y="287.50"></text></g><g><title>core::char::convert::from_u32_unchecked (1 samples, 0.03%)</title><rect x="98.3750%" y="261" width="0.0250%" height="15" fill="rgb(223,47,38)" fg:x="3935" fg:w="1"/><text x="98.6250%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.07%)</title><rect x="98.6250%" y="293" width="0.0750%" height="15" fill="rgb(229,179,11)" fg:x="3945" fg:w="3"/><text x="98.8750%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (2 samples, 0.05%)</title><rect x="98.9750%" y="277" width="0.0500%" height="15" fill="rgb(231,122,1)" fg:x="3959" fg:w="2"/><text x="99.2250%" y="287.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 1.93%)</title><rect x="97.1750%" y="341" width="1.9250%" height="15" fill="rgb(245,119,9)" fg:x="3887" fg:w="77"/><text x="97.4250%" y="351.50">&lt;..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 1.20%)</title><rect x="97.9000%" y="325" width="1.2000%" height="15" fill="rgb(241,163,25)" fg:x="3916" fg:w="48"/><text x="98.1500%" y="335.50"></text></g><g><title>core::str::validations::next_code_point (28 samples, 0.70%)</title><rect x="98.4000%" y="309" width="0.7000%" height="15" fill="rgb(217,214,3)" fg:x="3936" fg:w="28"/><text x="98.6500%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.40%)</title><rect x="98.7000%" y="293" width="0.4000%" height="15" fill="rgb(240,86,28)" fg:x="3948" fg:w="16"/><text x="98.9500%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3 samples, 0.07%)</title><rect x="99.0250%" y="277" width="0.0750%" height="15" fill="rgb(215,47,9)" fg:x="3961" fg:w="3"/><text x="99.2750%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.03%)</title><rect x="99.0750%" y="261" width="0.0250%" height="15" fill="rgb(252,25,45)" fg:x="3963" fg:w="1"/><text x="99.3250%" y="271.50"></text></g><g><title>core::ptr::read (2 samples, 0.05%)</title><rect x="99.1500%" y="309" width="0.0500%" height="15" fill="rgb(251,164,9)" fg:x="3966" fg:w="2"/><text x="99.4000%" y="319.50"></text></g><g><title>proc_macro2::parse::literal (131 samples, 3.27%)</title><rect x="96.5750%" y="421" width="3.2750%" height="15" fill="rgb(233,194,0)" fg:x="3863" fg:w="131"/><text x="96.8250%" y="431.50">pro..</text></g><g><title>proc_macro2::parse::literal_nocapture (131 samples, 3.27%)</title><rect x="96.5750%" y="405" width="3.2750%" height="15" fill="rgb(249,111,24)" fg:x="3863" fg:w="131"/><text x="96.8250%" y="415.50">pro..</text></g><g><title>proc_macro2::parse::string (126 samples, 3.15%)</title><rect x="96.7000%" y="389" width="3.1500%" height="15" fill="rgb(250,223,3)" fg:x="3868" fg:w="126"/><text x="96.9500%" y="399.50">pro..</text></g><g><title>proc_macro2::parse::cooked_string (126 samples, 3.15%)</title><rect x="96.7000%" y="373" width="3.1500%" height="15" fill="rgb(236,178,37)" fg:x="3868" fg:w="126"/><text x="96.9500%" y="383.50">pro..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (115 samples, 2.88%)</title><rect x="96.9750%" y="357" width="2.8750%" height="15" fill="rgb(241,158,50)" fg:x="3879" fg:w="115"/><text x="97.2250%" y="367.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::take (30 samples, 0.75%)</title><rect x="99.1000%" y="341" width="0.7500%" height="15" fill="rgb(213,121,41)" fg:x="3964" fg:w="30"/><text x="99.3500%" y="351.50"></text></g><g><title>core::mem::replace (30 samples, 0.75%)</title><rect x="99.1000%" y="325" width="0.7500%" height="15" fill="rgb(240,92,3)" fg:x="3964" fg:w="30"/><text x="99.3500%" y="335.50"></text></g><g><title>core::ptr::write (26 samples, 0.65%)</title><rect x="99.2000%" y="309" width="0.6500%" height="15" fill="rgb(205,123,3)" fg:x="3968" fg:w="26"/><text x="99.4500%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (146 samples, 3.65%)</title><rect x="96.2250%" y="549" width="3.6500%" height="15" fill="rgb(205,97,47)" fg:x="3849" fg:w="146"/><text x="96.4750%" y="559.50">core..</text></g><g><title>&lt;proc_macro2::TokenStream as core::str::traits::FromStr&gt;::from_str (146 samples, 3.65%)</title><rect x="96.2250%" y="533" width="3.6500%" height="15" fill="rgb(247,152,14)" fg:x="3849" fg:w="146"/><text x="96.4750%" y="543.50">&lt;pro..</text></g><g><title>core::str::&lt;impl str&gt;::parse (146 samples, 3.65%)</title><rect x="96.2250%" y="517" width="3.6500%" height="15" fill="rgb(248,195,53)" fg:x="3849" fg:w="146"/><text x="96.4750%" y="527.50">core..</text></g><g><title>&lt;proc_macro2::imp::TokenStream as core::str::traits::FromStr&gt;::from_str (146 samples, 3.65%)</title><rect x="96.2250%" y="501" width="3.6500%" height="15" fill="rgb(226,201,16)" fg:x="3849" fg:w="146"/><text x="96.4750%" y="511.50">&lt;pro..</text></g><g><title>core::str::&lt;impl str&gt;::parse (146 samples, 3.65%)</title><rect x="96.2250%" y="485" width="3.6500%" height="15" fill="rgb(205,98,0)" fg:x="3849" fg:w="146"/><text x="96.4750%" y="495.50">core..</text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::str::traits::FromStr&gt;::from_str (146 samples, 3.65%)</title><rect x="96.2250%" y="469" width="3.6500%" height="15" fill="rgb(214,191,48)" fg:x="3849" fg:w="146"/><text x="96.4750%" y="479.50">&lt;pro..</text></g><g><title>proc_macro2::parse::token_stream (146 samples, 3.65%)</title><rect x="96.2250%" y="453" width="3.6500%" height="15" fill="rgb(237,112,39)" fg:x="3849" fg:w="146"/><text x="96.4750%" y="463.50">proc..</text></g><g><title>proc_macro2::parse::leaf_token (142 samples, 3.55%)</title><rect x="96.3250%" y="437" width="3.5500%" height="15" fill="rgb(247,203,27)" fg:x="3853" fg:w="142"/><text x="96.5750%" y="447.50">proc..</text></g><g><title>proc_macro2::parse::punct (1 samples, 0.03%)</title><rect x="99.8500%" y="421" width="0.0250%" height="15" fill="rgb(235,124,28)" fg:x="3994" fg:w="1"/><text x="100.1000%" y="431.50"></text></g><g><title>proc_macro2::parse::punct_char (1 samples, 0.03%)</title><rect x="99.8500%" y="405" width="0.0250%" height="15" fill="rgb(208,207,46)" fg:x="3994" fg:w="1"/><text x="100.1000%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (1 samples, 0.03%)</title><rect x="99.8500%" y="389" width="0.0250%" height="15" fill="rgb(234,176,4)" fg:x="3994" fg:w="1"/><text x="100.1000%" y="399.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.03%)</title><rect x="99.8500%" y="373" width="0.0250%" height="15" fill="rgb(230,133,28)" fg:x="3994" fg:w="1"/><text x="100.1000%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1 samples, 0.03%)</title><rect x="99.8500%" y="357" width="0.0250%" height="15" fill="rgb(211,137,40)" fg:x="3994" fg:w="1"/><text x="100.1000%" y="367.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.03%)</title><rect x="99.8500%" y="341" width="0.0250%" height="15" fill="rgb(254,35,13)" fg:x="3994" fg:w="1"/><text x="100.1000%" y="351.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.03%)</title><rect x="99.8500%" y="325" width="0.0250%" height="15" fill="rgb(225,49,51)" fg:x="3994" fg:w="1"/><text x="100.1000%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.03%)</title><rect x="99.8500%" y="309" width="0.0250%" height="15" fill="rgb(251,10,15)" fg:x="3994" fg:w="1"/><text x="100.1000%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.03%)</title><rect x="99.8500%" y="293" width="0.0250%" height="15" fill="rgb(228,207,15)" fg:x="3994" fg:w="1"/><text x="100.1000%" y="303.50"></text></g><g><title>syn::derive::parsing::data_struct (1 samples, 0.03%)</title><rect x="99.8750%" y="485" width="0.0250%" height="15" fill="rgb(241,99,19)" fg:x="3995" fg:w="1"/><text x="100.1250%" y="495.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.03%)</title><rect x="99.8750%" y="469" width="0.0250%" height="15" fill="rgb(207,104,49)" fg:x="3995" fg:w="1"/><text x="100.1250%" y="479.50"></text></g><g><title>syn::data::parsing::&lt;impl syn::parse::Parse for syn::data::FieldsNamed&gt;::parse (1 samples, 0.03%)</title><rect x="99.8750%" y="453" width="0.0250%" height="15" fill="rgb(234,99,18)" fg:x="3995" fg:w="1"/><text x="100.1250%" y="463.50"></text></g><g><title>syn::parse::ParseBuffer::parse_terminated (1 samples, 0.03%)</title><rect x="99.8750%" y="437" width="0.0250%" height="15" fill="rgb(213,191,49)" fg:x="3995" fg:w="1"/><text x="100.1250%" y="447.50"></text></g><g><title>syn::punctuated::Punctuated&lt;T,P&gt;::parse_terminated_with (1 samples, 0.03%)</title><rect x="99.8750%" y="421" width="0.0250%" height="15" fill="rgb(210,226,19)" fg:x="3995" fg:w="1"/><text x="100.1250%" y="431.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.03%)</title><rect x="99.8750%" y="405" width="0.0250%" height="15" fill="rgb(229,97,18)" fg:x="3995" fg:w="1"/><text x="100.1250%" y="415.50"></text></g><g><title>&lt;syn::token::Comma as syn::parse::Parse&gt;::parse (1 samples, 0.03%)</title><rect x="99.8750%" y="389" width="0.0250%" height="15" fill="rgb(211,167,15)" fg:x="3995" fg:w="1"/><text x="100.1250%" y="399.50"></text></g><g><title>syn::token::parsing::punct (1 samples, 0.03%)</title><rect x="99.8750%" y="373" width="0.0250%" height="15" fill="rgb(210,169,34)" fg:x="3995" fg:w="1"/><text x="100.1250%" y="383.50"></text></g><g><title>syn::token::parsing::punct_helper (1 samples, 0.03%)</title><rect x="99.8750%" y="357" width="0.0250%" height="15" fill="rgb(241,121,31)" fg:x="3995" fg:w="1"/><text x="100.1250%" y="367.50"></text></g><g><title>syn::parse::ParseBuffer::step (1 samples, 0.03%)</title><rect x="99.8750%" y="341" width="0.0250%" height="15" fill="rgb(232,40,11)" fg:x="3995" fg:w="1"/><text x="100.1250%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;syn::parse::ParseBuffer&gt; (1 samples, 0.03%)</title><rect x="99.9000%" y="421" width="0.0250%" height="15" fill="rgb(205,86,26)" fg:x="3996" fg:w="1"/><text x="100.1500%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Cell&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::Cell&lt;syn::parse::Unexpected&gt;&gt;&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="99.9000%" y="405" width="0.0250%" height="15" fill="rgb(231,126,28)" fg:x="3996" fg:w="1"/><text x="100.1500%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::Cell&lt;syn::parse::Unexpected&gt;&gt;&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="99.9000%" y="389" width="0.0250%" height="15" fill="rgb(219,221,18)" fg:x="3996" fg:w="1"/><text x="100.1500%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::Cell&lt;syn::parse::Unexpected&gt;&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="99.9000%" y="373" width="0.0250%" height="15" fill="rgb(211,40,0)" fg:x="3996" fg:w="1"/><text x="100.1500%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::Cell&lt;syn::parse::Unexpected&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="99.9000%" y="357" width="0.0250%" height="15" fill="rgb(239,85,43)" fg:x="3996" fg:w="1"/><text x="100.1500%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="99.9000%" y="341" width="0.0250%" height="15" fill="rgb(231,55,21)" fg:x="3996" fg:w="1"/><text x="100.1500%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (1 samples, 0.03%)</title><rect x="99.9000%" y="325" width="0.0250%" height="15" fill="rgb(225,184,43)" fg:x="3996" fg:w="1"/><text x="100.1500%" y="335.50"></text></g><g><title>askama_derive::derive_template (179 samples, 4.47%)</title><rect x="95.4750%" y="581" width="4.4750%" height="15" fill="rgb(251,158,41)" fg:x="3819" fg:w="179"/><text x="95.7250%" y="591.50">askam..</text></g><g><title>askama_derive::generator::derive_template (179 samples, 4.47%)</title><rect x="95.4750%" y="565" width="4.4750%" height="15" fill="rgb(234,159,37)" fg:x="3819" fg:w="179"/><text x="95.7250%" y="575.50">askam..</text></g><g><title>syn::parse2 (3 samples, 0.07%)</title><rect x="99.8750%" y="549" width="0.0750%" height="15" fill="rgb(216,204,22)" fg:x="3995" fg:w="3"/><text x="100.1250%" y="559.50"></text></g><g><title>&lt;F as syn::parse::Parser&gt;::parse2 (3 samples, 0.07%)</title><rect x="99.8750%" y="533" width="0.0750%" height="15" fill="rgb(214,17,3)" fg:x="3995" fg:w="3"/><text x="100.1250%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.07%)</title><rect x="99.8750%" y="517" width="0.0750%" height="15" fill="rgb(212,111,17)" fg:x="3995" fg:w="3"/><text x="100.1250%" y="527.50"></text></g><g><title>syn::derive::parsing::&lt;impl syn::parse::Parse for syn::derive::DeriveInput&gt;::parse (3 samples, 0.07%)</title><rect x="99.8750%" y="501" width="0.0750%" height="15" fill="rgb(221,157,24)" fg:x="3995" fg:w="3"/><text x="100.1250%" y="511.50"></text></g><g><title>syn::parse::ParseBuffer::call (2 samples, 0.05%)</title><rect x="99.9000%" y="485" width="0.0500%" height="15" fill="rgb(252,16,13)" fg:x="3996" fg:w="2"/><text x="100.1500%" y="495.50"></text></g><g><title>syn::attr::Attribute::parse_outer (2 samples, 0.05%)</title><rect x="99.9000%" y="469" width="0.0500%" height="15" fill="rgb(221,62,2)" fg:x="3996" fg:w="2"/><text x="100.1500%" y="479.50"></text></g><g><title>syn::parse::ParseBuffer::call (2 samples, 0.05%)</title><rect x="99.9000%" y="453" width="0.0500%" height="15" fill="rgb(247,87,22)" fg:x="3996" fg:w="2"/><text x="100.1500%" y="463.50"></text></g><g><title>syn::attr::parsing::single_parse_outer (2 samples, 0.05%)</title><rect x="99.9000%" y="437" width="0.0500%" height="15" fill="rgb(215,73,9)" fg:x="3996" fg:w="2"/><text x="100.1500%" y="447.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.03%)</title><rect x="99.9250%" y="421" width="0.0250%" height="15" fill="rgb(207,175,33)" fg:x="3997" fg:w="1"/><text x="100.1750%" y="431.50"></text></g><g><title>syn::attr::parsing::&lt;impl syn::parse::Parse for syn::attr::Meta&gt;::parse (1 samples, 0.03%)</title><rect x="99.9250%" y="405" width="0.0250%" height="15" fill="rgb(243,129,54)" fg:x="3997" fg:w="1"/><text x="100.1750%" y="415.50"></text></g><g><title>syn::parse::ParseBuffer::call (1 samples, 0.03%)</title><rect x="99.9250%" y="389" width="0.0250%" height="15" fill="rgb(227,119,45)" fg:x="3997" fg:w="1"/><text x="100.1750%" y="399.50"></text></g><g><title>syn::path::parsing::&lt;impl syn::path::Path&gt;::parse_mod_style (1 samples, 0.03%)</title><rect x="99.9250%" y="373" width="0.0250%" height="15" fill="rgb(205,109,36)" fg:x="3997" fg:w="1"/><text x="100.1750%" y="383.50"></text></g><g><title>syn::parse::ParseBuffer::peek (1 samples, 0.03%)</title><rect x="99.9250%" y="357" width="0.0250%" height="15" fill="rgb(205,6,39)" fg:x="3997" fg:w="1"/><text x="100.1750%" y="367.50"></text></g><g><title>syn::ident::parsing::&lt;impl syn::token::Token for proc_macro2::Ident&gt;::peek (1 samples, 0.03%)</title><rect x="99.9250%" y="341" width="0.0250%" height="15" fill="rgb(221,32,16)" fg:x="3997" fg:w="1"/><text x="100.1750%" y="351.50"></text></g><g><title>syn::ident::parsing::accept_as_ident (1 samples, 0.03%)</title><rect x="99.9250%" y="325" width="0.0250%" height="15" fill="rgb(228,144,50)" fg:x="3997" fg:w="1"/><text x="100.1750%" y="335.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.03%)</title><rect x="99.9250%" y="309" width="0.0250%" height="15" fill="rgb(229,201,53)" fg:x="3997" fg:w="1"/><text x="100.1750%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="99.9250%" y="293" width="0.0250%" height="15" fill="rgb(249,153,27)" fg:x="3997" fg:w="1"/><text x="100.1750%" y="303.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.03%)</title><rect x="99.9250%" y="277" width="0.0250%" height="15" fill="rgb(227,106,25)" fg:x="3997" fg:w="1"/><text x="100.1750%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::TokenTree&gt; (1 samples, 0.03%)</title><rect x="99.9500%" y="517" width="0.0250%" height="15" fill="rgb(230,65,29)" fg:x="3998" fg:w="1"/><text x="100.2000%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::Ident&gt; (1 samples, 0.03%)</title><rect x="99.9500%" y="501" width="0.0250%" height="15" fill="rgb(221,57,46)" fg:x="3998" fg:w="1"/><text x="100.2000%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::imp::Ident&gt; (1 samples, 0.03%)</title><rect x="99.9500%" y="485" width="0.0250%" height="15" fill="rgb(229,161,17)" fg:x="3998" fg:w="1"/><text x="100.2000%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::fallback::Ident&gt; (1 samples, 0.03%)</title><rect x="99.9500%" y="469" width="0.0250%" height="15" fill="rgb(222,213,11)" fg:x="3998" fg:w="1"/><text x="100.2000%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="99.9500%" y="453" width="0.0250%" height="15" fill="rgb(235,35,13)" fg:x="3998" fg:w="1"/><text x="100.2000%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="99.9500%" y="437" width="0.0250%" height="15" fill="rgb(233,158,34)" fg:x="3998" fg:w="1"/><text x="100.2000%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="99.9500%" y="421" width="0.0250%" height="15" fill="rgb(215,151,48)" fg:x="3998" fg:w="1"/><text x="100.2000%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="99.9500%" y="405" width="0.0250%" height="15" fill="rgb(229,84,14)" fg:x="3998" fg:w="1"/><text x="100.2000%" y="415.50"></text></g><g><title>all (4,000 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(229,68,14)" fg:x="0" fg:w="4000"/><text x="0.2500%" y="911.50"></text></g><g><title>askama_bench (4,000 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(243,106,26)" fg:x="0" fg:w="4000"/><text x="0.2500%" y="895.50">askama_bench</text></g><g><title>_start (181 samples, 4.53%)</title><rect x="95.4750%" y="869" width="4.5250%" height="15" fill="rgb(206,45,38)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="879.50">_start</text></g><g><title>__libc_start_main (181 samples, 4.53%)</title><rect x="95.4750%" y="853" width="4.5250%" height="15" fill="rgb(226,6,15)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="863.50">__lib..</text></g><g><title>[libc.so.6] (181 samples, 4.53%)</title><rect x="95.4750%" y="837" width="4.5250%" height="15" fill="rgb(232,22,54)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="847.50">[libc..</text></g><g><title>main (181 samples, 4.53%)</title><rect x="95.4750%" y="821" width="4.5250%" height="15" fill="rgb(229,222,32)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="831.50">main</text></g><g><title>std::rt::lang_start (181 samples, 4.53%)</title><rect x="95.4750%" y="805" width="4.5250%" height="15" fill="rgb(228,62,29)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="815.50">std::..</text></g><g><title>std::rt::lang_start_internal (181 samples, 4.53%)</title><rect x="95.4750%" y="789" width="4.5250%" height="15" fill="rgb(251,103,34)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="799.50">std::..</text></g><g><title>std::panic::catch_unwind (181 samples, 4.53%)</title><rect x="95.4750%" y="773" width="4.5250%" height="15" fill="rgb(233,12,30)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="783.50">std::..</text></g><g><title>std::panicking::try (181 samples, 4.53%)</title><rect x="95.4750%" y="757" width="4.5250%" height="15" fill="rgb(238,52,0)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="767.50">std::..</text></g><g><title>std::panicking::try::do_call (181 samples, 4.53%)</title><rect x="95.4750%" y="741" width="4.5250%" height="15" fill="rgb(223,98,5)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="751.50">std::..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (181 samples, 4.53%)</title><rect x="95.4750%" y="725" width="4.5250%" height="15" fill="rgb(228,75,37)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="735.50">std::..</text></g><g><title>std::panic::catch_unwind (181 samples, 4.53%)</title><rect x="95.4750%" y="709" width="4.5250%" height="15" fill="rgb(205,115,49)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="719.50">std::..</text></g><g><title>std::panicking::try (181 samples, 4.53%)</title><rect x="95.4750%" y="693" width="4.5250%" height="15" fill="rgb(250,154,43)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="703.50">std::..</text></g><g><title>std::panicking::try::do_call (181 samples, 4.53%)</title><rect x="95.4750%" y="677" width="4.5250%" height="15" fill="rgb(226,43,29)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="687.50">std::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (181 samples, 4.53%)</title><rect x="95.4750%" y="661" width="4.5250%" height="15" fill="rgb(249,228,39)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="671.50">core:..</text></g><g><title>std::rt::lang_start::{{closure}} (181 samples, 4.53%)</title><rect x="95.4750%" y="645" width="4.5250%" height="15" fill="rgb(216,79,43)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="655.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (181 samples, 4.53%)</title><rect x="95.4750%" y="629" width="4.5250%" height="15" fill="rgb(228,95,12)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="639.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once (181 samples, 4.53%)</title><rect x="95.4750%" y="613" width="4.5250%" height="15" fill="rgb(249,221,15)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="623.50">core:..</text></g><g><title>askama_bench::main (181 samples, 4.53%)</title><rect x="95.4750%" y="597" width="4.5250%" height="15" fill="rgb(233,34,13)" fg:x="3819" fg:w="181"/><text x="95.7250%" y="607.50">askam..</text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::TokenStream&gt; (2 samples, 0.05%)</title><rect x="99.9500%" y="581" width="0.0500%" height="15" fill="rgb(214,103,39)" fg:x="3998" fg:w="2"/><text x="100.2000%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::imp::TokenStream&gt; (2 samples, 0.05%)</title><rect x="99.9500%" y="565" width="0.0500%" height="15" fill="rgb(251,126,39)" fg:x="3998" fg:w="2"/><text x="100.2000%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;proc_macro2::fallback::TokenStream&gt; (2 samples, 0.05%)</title><rect x="99.9500%" y="549" width="0.0500%" height="15" fill="rgb(214,216,36)" fg:x="3998" fg:w="2"/><text x="100.2000%" y="559.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="99.9500%" y="533" width="0.0500%" height="15" fill="rgb(220,221,8)" fg:x="3998" fg:w="2"/><text x="100.2000%" y="543.50"></text></g><g><title>proc_macro2::rcvec::RcVecMut&lt;T&gt;::extend (1 samples, 0.03%)</title><rect x="99.9750%" y="517" width="0.0250%" height="15" fill="rgb(240,216,3)" fg:x="3999" fg:w="1"/><text x="100.2250%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.03%)</title><rect x="99.9750%" y="501" width="0.0250%" height="15" fill="rgb(232,218,17)" fg:x="3999" fg:w="1"/><text x="100.2250%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="99.9750%" y="485" width="0.0250%" height="15" fill="rgb(229,163,45)" fg:x="3999" fg:w="1"/><text x="100.2250%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.03%)</title><rect x="99.9750%" y="469" width="0.0250%" height="15" fill="rgb(231,110,42)" fg:x="3999" fg:w="1"/><text x="100.2250%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="99.9750%" y="453" width="0.0250%" height="15" fill="rgb(208,170,48)" fg:x="3999" fg:w="1"/><text x="100.2250%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="99.9750%" y="437" width="0.0250%" height="15" fill="rgb(239,116,25)" fg:x="3999" fg:w="1"/><text x="100.2250%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="99.9750%" y="421" width="0.0250%" height="15" fill="rgb(219,200,50)" fg:x="3999" fg:w="1"/><text x="100.2250%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="99.9750%" y="405" width="0.0250%" height="15" fill="rgb(245,200,0)" fg:x="3999" fg:w="1"/><text x="100.2250%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="99.9750%" y="389" width="0.0250%" height="15" fill="rgb(245,119,33)" fg:x="3999" fg:w="1"/><text x="100.2250%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="99.9750%" y="373" width="0.0250%" height="15" fill="rgb(231,125,12)" fg:x="3999" fg:w="1"/><text x="100.2250%" y="383.50"></text></g></svg></svg>