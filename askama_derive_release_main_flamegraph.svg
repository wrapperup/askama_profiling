<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1174" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1157.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1157.00"> </text><svg id="frames" x="10" width="1180" total_samples="140"><g><title>[ld-linux-x86-64.so.2] (2 samples, 1.43%)</title><rect x="2.8571%" y="1077" width="1.4286%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="2"/><text x="3.1071%" y="1087.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.71%)</title><rect x="3.5714%" y="1061" width="0.7143%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="1"/><text x="3.8214%" y="1071.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.71%)</title><rect x="3.5714%" y="1045" width="0.7143%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="3.8214%" y="1055.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.71%)</title><rect x="3.5714%" y="1029" width="0.7143%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="3.8214%" y="1039.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.71%)</title><rect x="3.5714%" y="1013" width="0.7143%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="3.8214%" y="1023.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.71%)</title><rect x="3.5714%" y="997" width="0.7143%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="3.8214%" y="1007.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.71%)</title><rect x="3.5714%" y="981" width="0.7143%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="3.8214%" y="991.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 5.00%)</title><rect x="0.0000%" y="1093" width="5.0000%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="7"/><text x="0.2500%" y="1103.50">[ld-li..</text></g><g><title>[unknown] (1 samples, 0.71%)</title><rect x="4.2857%" y="1077" width="0.7143%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="4.5357%" y="1087.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (2 samples, 1.43%)</title><rect x="5.0000%" y="821" width="1.4286%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="2"/><text x="5.2500%" y="831.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="805" width="1.4286%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="2"/><text x="5.2500%" y="815.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="789" width="1.4286%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="2"/><text x="5.2500%" y="799.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="773" width="1.4286%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="2"/><text x="5.2500%" y="783.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="757" width="1.4286%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="2"/><text x="5.2500%" y="767.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="741" width="1.4286%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="2"/><text x="5.2500%" y="751.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="725" width="1.4286%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="2"/><text x="5.2500%" y="735.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="709" width="1.4286%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="2"/><text x="5.2500%" y="719.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="693" width="1.4286%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="2"/><text x="5.2500%" y="703.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="677" width="1.4286%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="2"/><text x="5.2500%" y="687.50"></text></g><g><title>&lt;proc_macro2::Group as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="661" width="1.4286%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="2"/><text x="5.2500%" y="671.50"></text></g><g><title>&lt;proc_macro2::imp::Group as core::fmt::Display&gt;::fmt (2 samples, 1.43%)</title><rect x="5.0000%" y="645" width="1.4286%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="2"/><text x="5.2500%" y="655.50"></text></g><g><title>&lt;proc_macro2::fallback::Group as core::fmt::Display&gt;::fmt (1 samples, 0.71%)</title><rect x="5.7143%" y="629" width="0.7143%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="5.9643%" y="639.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.71%)</title><rect x="5.7143%" y="613" width="0.7143%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="1"/><text x="5.9643%" y="623.50"></text></g><g><title>&lt;proc_macro2::Literal as core::fmt::Display&gt;::fmt (1 samples, 0.71%)</title><rect x="5.7143%" y="597" width="0.7143%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="1"/><text x="5.9643%" y="607.50"></text></g><g><title>&lt;proc_macro2::imp::Literal as core::fmt::Display&gt;::fmt (1 samples, 0.71%)</title><rect x="5.7143%" y="581" width="0.7143%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="1"/><text x="5.9643%" y="591.50"></text></g><g><title>&lt;proc_macro2::fallback::Literal as core::fmt::Display&gt;::fmt (1 samples, 0.71%)</title><rect x="5.7143%" y="565" width="0.7143%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="1"/><text x="5.9643%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.71%)</title><rect x="5.7143%" y="549" width="0.7143%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="1"/><text x="5.9643%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.71%)</title><rect x="5.7143%" y="533" width="0.7143%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="1"/><text x="5.9643%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.71%)</title><rect x="5.7143%" y="517" width="0.7143%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="5.9643%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.71%)</title><rect x="5.7143%" y="501" width="0.7143%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="1"/><text x="5.9643%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.71%)</title><rect x="5.7143%" y="485" width="0.7143%" height="15" fill="rgb(209,103,24)" fg:x="8" fg:w="1"/><text x="5.9643%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.71%)</title><rect x="5.7143%" y="469" width="0.7143%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="1"/><text x="5.9643%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.71%)</title><rect x="5.7143%" y="453" width="0.7143%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="5.9643%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.71%)</title><rect x="5.7143%" y="437" width="0.7143%" height="15" fill="rgb(254,191,54)" fg:x="8" fg:w="1"/><text x="5.9643%" y="447.50"></text></g><g><title>&lt;std::path::PathBuf as core::convert::From&lt;alloc::string::String&gt;&gt;::from (1 samples, 0.71%)</title><rect x="6.4286%" y="757" width="0.7143%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="6.6786%" y="767.50"></text></g><g><title>&lt;std::ffi::os_str::OsString as core::convert::From&lt;alloc::string::String&gt;&gt;::from (1 samples, 0.71%)</title><rect x="6.4286%" y="741" width="0.7143%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="6.6786%" y="751.50"></text></g><g><title>std::sys::unix::os_str::Buf::from_string (1 samples, 0.71%)</title><rect x="6.4286%" y="725" width="0.7143%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="1"/><text x="6.6786%" y="735.50"></text></g><g><title>askama_derive::config::read_config_file (2 samples, 1.43%)</title><rect x="6.4286%" y="773" width="1.4286%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="2"/><text x="6.6786%" y="783.50"></text></g><g><title>std::path::Path::exists (1 samples, 0.71%)</title><rect x="7.1429%" y="757" width="0.7143%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="1"/><text x="7.3929%" y="767.50"></text></g><g><title>std::fs::metadata (1 samples, 0.71%)</title><rect x="7.1429%" y="741" width="0.7143%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="1"/><text x="7.3929%" y="751.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.71%)</title><rect x="7.1429%" y="725" width="0.7143%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="1"/><text x="7.3929%" y="735.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.71%)</title><rect x="7.1429%" y="709" width="0.7143%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="7.3929%" y="719.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.71%)</title><rect x="7.1429%" y="693" width="0.7143%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="1"/><text x="7.3929%" y="703.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.71%)</title><rect x="7.1429%" y="677" width="0.7143%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="1"/><text x="7.3929%" y="687.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.71%)</title><rect x="7.1429%" y="661" width="0.7143%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="7.3929%" y="671.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.71%)</title><rect x="7.1429%" y="645" width="0.7143%" height="15" fill="rgb(206,96,30)" fg:x="10" fg:w="1"/><text x="7.3929%" y="655.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.71%)</title><rect x="7.1429%" y="629" width="0.7143%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="1"/><text x="7.3929%" y="639.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.71%)</title><rect x="7.1429%" y="613" width="0.7143%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="7.3929%" y="623.50"></text></g><g><title>__errno_location (1 samples, 0.71%)</title><rect x="7.1429%" y="597" width="0.7143%" height="15" fill="rgb(239,60,40)" fg:x="10" fg:w="1"/><text x="7.3929%" y="607.50"></text></g><g><title>askama_derive::generator::Generator::impl_display (1 samples, 0.71%)</title><rect x="7.8571%" y="757" width="0.7143%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="1"/><text x="8.1071%" y="767.50"></text></g><g><title>askama_derive::generator::Generator::write_header (1 samples, 0.71%)</title><rect x="7.8571%" y="741" width="0.7143%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="1"/><text x="8.1071%" y="751.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.71%)</title><rect x="7.8571%" y="725" width="0.7143%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="8.1071%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.71%)</title><rect x="7.8571%" y="709" width="0.7143%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="8.1071%" y="719.50"></text></g><g><title>alloc::fmt::format::{{closure}} (1 samples, 0.71%)</title><rect x="7.8571%" y="693" width="0.7143%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="1"/><text x="8.1071%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.71%)</title><rect x="7.8571%" y="677" width="0.7143%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="1"/><text x="8.1071%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.71%)</title><rect x="7.8571%" y="661" width="0.7143%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="1"/><text x="8.1071%" y="671.50"></text></g><g><title>core::fmt::write (1 samples, 0.71%)</title><rect x="7.8571%" y="645" width="0.7143%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="1"/><text x="8.1071%" y="655.50"></text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::fmt::Display&gt;::fmt (1 samples, 0.71%)</title><rect x="7.8571%" y="629" width="0.7143%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="1"/><text x="8.1071%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.71%)</title><rect x="7.8571%" y="613" width="0.7143%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="1"/><text x="8.1071%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.71%)</title><rect x="7.8571%" y="597" width="0.7143%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="1"/><text x="8.1071%" y="607.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (2 samples, 1.43%)</title><rect x="8.5714%" y="581" width="1.4286%" height="15" fill="rgb(248,47,43)" fg:x="12" fg:w="2"/><text x="8.8214%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (2 samples, 1.43%)</title><rect x="8.5714%" y="565" width="1.4286%" height="15" fill="rgb(221,10,30)" fg:x="12" fg:w="2"/><text x="8.8214%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (1 samples, 0.71%)</title><rect x="9.2857%" y="549" width="0.7143%" height="15" fill="rgb(210,229,1)" fg:x="13" fg:w="1"/><text x="9.5357%" y="559.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.71%)</title><rect x="9.2857%" y="533" width="0.7143%" height="15" fill="rgb(222,148,37)" fg:x="13" fg:w="1"/><text x="9.5357%" y="543.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.43%)</title><rect x="10.0000%" y="581" width="1.4286%" height="15" fill="rgb(234,67,33)" fg:x="14" fg:w="2"/><text x="10.2500%" y="591.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.43%)</title><rect x="10.0000%" y="565" width="1.4286%" height="15" fill="rgb(247,98,35)" fg:x="14" fg:w="2"/><text x="10.2500%" y="575.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 1.43%)</title><rect x="10.0000%" y="549" width="1.4286%" height="15" fill="rgb(247,138,52)" fg:x="14" fg:w="2"/><text x="10.2500%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 1.43%)</title><rect x="25.0000%" y="517" width="1.4286%" height="15" fill="rgb(213,79,30)" fg:x="35" fg:w="2"/><text x="25.2500%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 1.43%)</title><rect x="25.0000%" y="501" width="1.4286%" height="15" fill="rgb(246,177,23)" fg:x="35" fg:w="2"/><text x="25.2500%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 1.43%)</title><rect x="25.0000%" y="485" width="1.4286%" height="15" fill="rgb(230,62,27)" fg:x="35" fg:w="2"/><text x="25.2500%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.71%)</title><rect x="26.4286%" y="517" width="0.7143%" height="15" fill="rgb(216,154,8)" fg:x="37" fg:w="1"/><text x="26.6786%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (11 samples, 7.86%)</title><rect x="31.4286%" y="469" width="7.8571%" height="15" fill="rgb(244,35,45)" fg:x="44" fg:w="11"/><text x="31.6786%" y="479.50">core::cmp::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (18 samples, 12.86%)</title><rect x="27.1429%" y="517" width="12.8571%" height="15" fill="rgb(251,115,12)" fg:x="38" fg:w="18"/><text x="27.3929%" y="527.50">core::slice::&lt;impl ..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (18 samples, 12.86%)</title><rect x="27.1429%" y="501" width="12.8571%" height="15" fill="rgb(240,54,50)" fg:x="38" fg:w="18"/><text x="27.3929%" y="511.50">core::slice::&lt;impl ..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key::{{closure}} (12 samples, 8.57%)</title><rect x="31.4286%" y="485" width="8.5714%" height="15" fill="rgb(233,84,52)" fg:x="44" fg:w="12"/><text x="31.6786%" y="495.50">core::slice:..</text></g><g><title>core::unicode::unicode_data::skip_search::{{closure}} (1 samples, 0.71%)</title><rect x="39.2857%" y="469" width="0.7143%" height="15" fill="rgb(207,117,47)" fg:x="55" fg:w="1"/><text x="39.5357%" y="479.50"></text></g><g><title>&lt;&amp;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (1 samples, 0.71%)</title><rect x="39.2857%" y="453" width="0.7143%" height="15" fill="rgb(249,43,39)" fg:x="55" fg:w="1"/><text x="39.5357%" y="463.50"></text></g><g><title>&lt;u32 as core::ops::bit::Shl&lt;i32&gt;&gt;::shl (1 samples, 0.71%)</title><rect x="39.2857%" y="437" width="0.7143%" height="15" fill="rgb(209,38,44)" fg:x="55" fg:w="1"/><text x="39.5357%" y="447.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (29 samples, 20.71%)</title><rect x="20.0000%" y="565" width="20.7143%" height="15" fill="rgb(236,212,23)" fg:x="28" fg:w="29"/><text x="20.2500%" y="575.50">core::char::methods::&lt;impl char&gt;:..</text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (28 samples, 20.00%)</title><rect x="20.7143%" y="549" width="20.0000%" height="15" fill="rgb(242,79,21)" fg:x="29" fg:w="28"/><text x="20.9643%" y="559.50">core::unicode::unicode_data::gr..</text></g><g><title>core::unicode::unicode_data::skip_search (28 samples, 20.00%)</title><rect x="20.7143%" y="533" width="20.0000%" height="15" fill="rgb(211,96,35)" fg:x="29" fg:w="28"/><text x="20.9643%" y="543.50">core::unicode::unicode_data::sk..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.71%)</title><rect x="40.0000%" y="517" width="0.7143%" height="15" fill="rgb(253,215,40)" fg:x="56" fg:w="1"/><text x="40.2500%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.71%)</title><rect x="40.0000%" y="501" width="0.7143%" height="15" fill="rgb(211,81,21)" fg:x="56" fg:w="1"/><text x="40.2500%" y="511.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (44 samples, 31.43%)</title><rect x="11.4286%" y="581" width="31.4286%" height="15" fill="rgb(208,190,38)" fg:x="16" fg:w="44"/><text x="11.6786%" y="591.50">core::char::methods::&lt;impl char&gt;::escape_debug_ext</text></g><g><title>core::unicode::printable::is_printable (3 samples, 2.14%)</title><rect x="40.7143%" y="565" width="2.1429%" height="15" fill="rgb(235,213,38)" fg:x="57" fg:w="3"/><text x="40.9643%" y="575.50">c..</text></g><g><title>core::fmt::Formatter::write_str (3 samples, 2.14%)</title><rect x="42.8571%" y="581" width="2.1429%" height="15" fill="rgb(237,122,38)" fg:x="60" fg:w="3"/><text x="43.1071%" y="591.50">c..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 2.14%)</title><rect x="42.8571%" y="565" width="2.1429%" height="15" fill="rgb(244,218,35)" fg:x="60" fg:w="3"/><text x="43.1071%" y="575.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 2.14%)</title><rect x="42.8571%" y="549" width="2.1429%" height="15" fill="rgb(240,68,47)" fg:x="60" fg:w="3"/><text x="43.1071%" y="559.50">&lt;..</text></g><g><title>alloc::string::String::push_str (3 samples, 2.14%)</title><rect x="42.8571%" y="533" width="2.1429%" height="15" fill="rgb(210,16,53)" fg:x="60" fg:w="3"/><text x="43.1071%" y="543.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 2.14%)</title><rect x="42.8571%" y="517" width="2.1429%" height="15" fill="rgb(235,124,12)" fg:x="60" fg:w="3"/><text x="43.1071%" y="527.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 2.14%)</title><rect x="42.8571%" y="501" width="2.1429%" height="15" fill="rgb(224,169,11)" fg:x="60" fg:w="3"/><text x="43.1071%" y="511.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 2.14%)</title><rect x="42.8571%" y="485" width="2.1429%" height="15" fill="rgb(250,166,2)" fg:x="60" fg:w="3"/><text x="43.1071%" y="495.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 2.14%)</title><rect x="42.8571%" y="469" width="2.1429%" height="15" fill="rgb(242,216,29)" fg:x="60" fg:w="3"/><text x="43.1071%" y="479.50">c..</text></g><g><title>[libc.so.6] (3 samples, 2.14%)</title><rect x="42.8571%" y="453" width="2.1429%" height="15" fill="rgb(230,116,27)" fg:x="60" fg:w="3"/><text x="43.1071%" y="463.50">[..</text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (1 samples, 0.71%)</title><rect x="45.0000%" y="581" width="0.7143%" height="15" fill="rgb(228,99,48)" fg:x="63" fg:w="1"/><text x="45.2500%" y="591.50"></text></g><g><title>&lt;core::char::EscapeDebug as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.71%)</title><rect x="45.0000%" y="565" width="0.7143%" height="15" fill="rgb(253,11,6)" fg:x="63" fg:w="1"/><text x="45.2500%" y="575.50"></text></g><g><title>&lt;core::char::EscapeDefault as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.71%)</title><rect x="45.0000%" y="549" width="0.7143%" height="15" fill="rgb(247,143,39)" fg:x="63" fg:w="1"/><text x="45.2500%" y="559.50"></text></g><g><title>&lt;core::char::EscapeDefault as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.71%)</title><rect x="45.0000%" y="533" width="0.7143%" height="15" fill="rgb(236,97,10)" fg:x="63" fg:w="1"/><text x="45.2500%" y="543.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.71%)</title><rect x="45.7143%" y="533" width="0.7143%" height="15" fill="rgb(233,208,19)" fg:x="64" fg:w="1"/><text x="45.9643%" y="543.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (1 samples, 0.71%)</title><rect x="45.7143%" y="517" width="0.7143%" height="15" fill="rgb(216,164,2)" fg:x="64" fg:w="1"/><text x="45.9643%" y="527.50"></text></g><g><title>askama_derive::generator::Generator::build (55 samples, 39.29%)</title><rect x="7.8571%" y="773" width="39.2857%" height="15" fill="rgb(220,129,5)" fg:x="11" fg:w="55"/><text x="8.1071%" y="783.50">askama_derive::generator::Generator::build</text></g><g><title>askama_derive::generator::Generator::impl_template (54 samples, 38.57%)</title><rect x="8.5714%" y="757" width="38.5714%" height="15" fill="rgb(242,17,10)" fg:x="12" fg:w="54"/><text x="8.8214%" y="767.50">askama_derive::generator::Generator::impl_template</text></g><g><title>askama_derive::generator::Generator::handle (54 samples, 38.57%)</title><rect x="8.5714%" y="741" width="38.5714%" height="15" fill="rgb(242,107,0)" fg:x="12" fg:w="54"/><text x="8.8214%" y="751.50">askama_derive::generator::Generator::handle</text></g><g><title>askama_derive::generator::Generator::write_buf_writable (54 samples, 38.57%)</title><rect x="8.5714%" y="725" width="38.5714%" height="15" fill="rgb(251,28,31)" fg:x="12" fg:w="54"/><text x="8.8214%" y="735.50">askama_derive::generator::Generator::write_buf_writable</text></g><g><title>alloc::fmt::format (54 samples, 38.57%)</title><rect x="8.5714%" y="709" width="38.5714%" height="15" fill="rgb(233,223,10)" fg:x="12" fg:w="54"/><text x="8.8214%" y="719.50">alloc::fmt::format</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (54 samples, 38.57%)</title><rect x="8.5714%" y="693" width="38.5714%" height="15" fill="rgb(215,21,27)" fg:x="12" fg:w="54"/><text x="8.8214%" y="703.50">core::option::Option&lt;T&gt;::map_or_else</text></g><g><title>alloc::fmt::format::{{closure}} (54 samples, 38.57%)</title><rect x="8.5714%" y="677" width="38.5714%" height="15" fill="rgb(232,23,21)" fg:x="12" fg:w="54"/><text x="8.8214%" y="687.50">alloc::fmt::format::{{closure}}</text></g><g><title>alloc::fmt::format::format_inner (54 samples, 38.57%)</title><rect x="8.5714%" y="661" width="38.5714%" height="15" fill="rgb(244,5,23)" fg:x="12" fg:w="54"/><text x="8.8214%" y="671.50">alloc::fmt::format::format_inner</text></g><g><title>core::fmt::Write::write_fmt (54 samples, 38.57%)</title><rect x="8.5714%" y="645" width="38.5714%" height="15" fill="rgb(226,81,46)" fg:x="12" fg:w="54"/><text x="8.8214%" y="655.50">core::fmt::Write::write_fmt</text></g><g><title>core::fmt::write (54 samples, 38.57%)</title><rect x="8.5714%" y="629" width="38.5714%" height="15" fill="rgb(247,70,30)" fg:x="12" fg:w="54"/><text x="8.8214%" y="639.50">core::fmt::write</text></g><g><title>core::fmt::run (54 samples, 38.57%)</title><rect x="8.5714%" y="613" width="38.5714%" height="15" fill="rgb(212,68,19)" fg:x="12" fg:w="54"/><text x="8.8214%" y="623.50">core::fmt::run</text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (54 samples, 38.57%)</title><rect x="8.5714%" y="597" width="38.5714%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="54"/><text x="8.8214%" y="607.50">&lt;str as core::fmt::Debug&gt;::fmt</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (2 samples, 1.43%)</title><rect x="45.7143%" y="581" width="1.4286%" height="15" fill="rgb(223,113,26)" fg:x="64" fg:w="2"/><text x="45.9643%" y="591.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (2 samples, 1.43%)</title><rect x="45.7143%" y="565" width="1.4286%" height="15" fill="rgb(206,192,2)" fg:x="64" fg:w="2"/><text x="45.9643%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (2 samples, 1.43%)</title><rect x="45.7143%" y="549" width="1.4286%" height="15" fill="rgb(241,108,4)" fg:x="64" fg:w="2"/><text x="45.9643%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (1 samples, 0.71%)</title><rect x="46.4286%" y="533" width="0.7143%" height="15" fill="rgb(247,173,49)" fg:x="65" fg:w="1"/><text x="46.6786%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.71%)</title><rect x="46.4286%" y="517" width="0.7143%" height="15" fill="rgb(224,114,35)" fg:x="65" fg:w="1"/><text x="46.6786%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.71%)</title><rect x="46.4286%" y="501" width="0.7143%" height="15" fill="rgb(245,159,27)" fg:x="65" fg:w="1"/><text x="46.6786%" y="511.50"></text></g><g><title>nom::combinator::opt::{{closure}} (1 samples, 0.71%)</title><rect x="47.1429%" y="421" width="0.7143%" height="15" fill="rgb(245,172,44)" fg:x="66" fg:w="1"/><text x="47.3929%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.71%)</title><rect x="47.1429%" y="405" width="0.7143%" height="15" fill="rgb(236,23,11)" fg:x="66" fg:w="1"/><text x="47.3929%" y="415.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.71%)</title><rect x="47.1429%" y="389" width="0.7143%" height="15" fill="rgb(205,117,38)" fg:x="66" fg:w="1"/><text x="47.3929%" y="399.50"></text></g><g><title>askama_derive::parser::node::expr_handle_ws (1 samples, 0.71%)</title><rect x="47.1429%" y="373" width="0.7143%" height="15" fill="rgb(237,72,25)" fg:x="66" fg:w="1"/><text x="47.3929%" y="383.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.71%)</title><rect x="47.1429%" y="357" width="0.7143%" height="15" fill="rgb(244,70,9)" fg:x="66" fg:w="1"/><text x="47.3929%" y="367.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.71%)</title><rect x="47.1429%" y="341" width="0.7143%" height="15" fill="rgb(217,125,39)" fg:x="66" fg:w="1"/><text x="47.3929%" y="351.50"></text></g><g><title>askama_derive::parser::node::expr_node (2 samples, 1.43%)</title><rect x="47.1429%" y="565" width="1.4286%" height="15" fill="rgb(235,36,10)" fg:x="66" fg:w="2"/><text x="47.3929%" y="575.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (2 samples, 1.43%)</title><rect x="47.1429%" y="549" width="1.4286%" height="15" fill="rgb(251,123,47)" fg:x="66" fg:w="2"/><text x="47.3929%" y="559.50"></text></g><g><title>&lt;(FnA,FnB) as nom::sequence::Tuple&lt;Input,(A,B),Error&gt;&gt;::parse (2 samples, 1.43%)</title><rect x="47.1429%" y="533" width="1.4286%" height="15" fill="rgb(221,13,13)" fg:x="66" fg:w="2"/><text x="47.3929%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 1.43%)</title><rect x="47.1429%" y="517" width="1.4286%" height="15" fill="rgb(238,131,9)" fg:x="66" fg:w="2"/><text x="47.3929%" y="527.50"></text></g><g><title>nom::combinator::cut::{{closure}} (2 samples, 1.43%)</title><rect x="47.1429%" y="501" width="1.4286%" height="15" fill="rgb(211,50,8)" fg:x="66" fg:w="2"/><text x="47.3929%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 1.43%)</title><rect x="47.1429%" y="485" width="1.4286%" height="15" fill="rgb(245,182,24)" fg:x="66" fg:w="2"/><text x="47.3929%" y="495.50"></text></g><g><title>nom::sequence::tuple::{{closure}} (2 samples, 1.43%)</title><rect x="47.1429%" y="469" width="1.4286%" height="15" fill="rgb(242,14,37)" fg:x="66" fg:w="2"/><text x="47.3929%" y="479.50"></text></g><g><title>&lt;(FnA,FnB,FnC,FnD) as nom::sequence::Tuple&lt;Input,(A,B,C,D),Error&gt;&gt;::parse (2 samples, 1.43%)</title><rect x="47.1429%" y="453" width="1.4286%" height="15" fill="rgb(246,228,12)" fg:x="66" fg:w="2"/><text x="47.3929%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 1.43%)</title><rect x="47.1429%" y="437" width="1.4286%" height="15" fill="rgb(213,55,15)" fg:x="66" fg:w="2"/><text x="47.3929%" y="447.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1 samples, 0.71%)</title><rect x="47.8571%" y="421" width="0.7143%" height="15" fill="rgb(209,9,3)" fg:x="67" fg:w="1"/><text x="48.1071%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.71%)</title><rect x="47.8571%" y="405" width="0.7143%" height="15" fill="rgb(230,59,30)" fg:x="67" fg:w="1"/><text x="48.1071%" y="415.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.71%)</title><rect x="47.8571%" y="389" width="0.7143%" height="15" fill="rgb(209,121,21)" fg:x="67" fg:w="1"/><text x="48.1071%" y="399.50"></text></g><g><title>askama_derive::parser::expr::Expr::parse (1 samples, 0.71%)</title><rect x="47.8571%" y="373" width="0.7143%" height="15" fill="rgb(220,109,13)" fg:x="67" fg:w="1"/><text x="48.1071%" y="383.50"></text></g><g><title>askama_derive::parser::expr::expr_any (1 samples, 0.71%)</title><rect x="47.8571%" y="357" width="0.7143%" height="15" fill="rgb(232,18,1)" fg:x="67" fg:w="1"/><text x="48.1071%" y="367.50"></text></g><g><title>nom::branch::alt::{{closure}} (1 samples, 0.71%)</title><rect x="47.8571%" y="341" width="0.7143%" height="15" fill="rgb(215,41,42)" fg:x="67" fg:w="1"/><text x="48.1071%" y="351.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.71%)</title><rect x="47.8571%" y="325" width="0.7143%" height="15" fill="rgb(224,123,36)" fg:x="67" fg:w="1"/><text x="48.1071%" y="335.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.71%)</title><rect x="47.8571%" y="309" width="0.7143%" height="15" fill="rgb(240,125,3)" fg:x="67" fg:w="1"/><text x="48.1071%" y="319.50"></text></g><g><title>nom::combinator::map::{{closure}} (1 samples, 0.71%)</title><rect x="47.8571%" y="293" width="0.7143%" height="15" fill="rgb(205,98,50)" fg:x="67" fg:w="1"/><text x="48.1071%" y="303.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.71%)</title><rect x="47.8571%" y="277" width="0.7143%" height="15" fill="rgb(205,185,37)" fg:x="67" fg:w="1"/><text x="48.1071%" y="287.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1 samples, 0.71%)</title><rect x="47.8571%" y="261" width="0.7143%" height="15" fill="rgb(238,207,15)" fg:x="67" fg:w="1"/><text x="48.1071%" y="271.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.71%)</title><rect x="47.8571%" y="245" width="0.7143%" height="15" fill="rgb(213,199,42)" fg:x="67" fg:w="1"/><text x="48.1071%" y="255.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.71%)</title><rect x="47.8571%" y="229" width="0.7143%" height="15" fill="rgb(235,201,11)" fg:x="67" fg:w="1"/><text x="48.1071%" y="239.50"></text></g><g><title>askama_derive::parser::expr::expr_or (1 samples, 0.71%)</title><rect x="47.8571%" y="213" width="0.7143%" height="15" fill="rgb(207,46,11)" fg:x="67" fg:w="1"/><text x="48.1071%" y="223.50"></text></g><g><title>askama_derive::parser::expr::expr_and (1 samples, 0.71%)</title><rect x="47.8571%" y="197" width="0.7143%" height="15" fill="rgb(241,35,35)" fg:x="67" fg:w="1"/><text x="48.1071%" y="207.50"></text></g><g><title>askama_derive::parser::expr::expr_compare (1 samples, 0.71%)</title><rect x="47.8571%" y="181" width="0.7143%" height="15" fill="rgb(243,32,47)" fg:x="67" fg:w="1"/><text x="48.1071%" y="191.50"></text></g><g><title>nom::multi::many0::{{closure}} (1 samples, 0.71%)</title><rect x="47.8571%" y="165" width="0.7143%" height="15" fill="rgb(247,202,23)" fg:x="67" fg:w="1"/><text x="48.1071%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.71%)</title><rect x="47.8571%" y="149" width="0.7143%" height="15" fill="rgb(219,102,11)" fg:x="67" fg:w="1"/><text x="48.1071%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.71%)</title><rect x="47.8571%" y="133" width="0.7143%" height="15" fill="rgb(243,110,44)" fg:x="67" fg:w="1"/><text x="48.1071%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.71%)</title><rect x="47.8571%" y="117" width="0.7143%" height="15" fill="rgb(222,74,54)" fg:x="67" fg:w="1"/><text x="48.1071%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.71%)</title><rect x="47.8571%" y="101" width="0.7143%" height="15" fill="rgb(216,99,12)" fg:x="67" fg:w="1"/><text x="48.1071%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.71%)</title><rect x="47.8571%" y="85" width="0.7143%" height="15" fill="rgb(226,22,26)" fg:x="67" fg:w="1"/><text x="48.1071%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.71%)</title><rect x="47.8571%" y="69" width="0.7143%" height="15" fill="rgb(217,163,10)" fg:x="67" fg:w="1"/><text x="48.1071%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.71%)</title><rect x="47.8571%" y="53" width="0.7143%" height="15" fill="rgb(213,25,53)" fg:x="67" fg:w="1"/><text x="48.1071%" y="63.50"></text></g><g><title>malloc (1 samples, 0.71%)</title><rect x="47.8571%" y="37" width="0.7143%" height="15" fill="rgb(252,105,26)" fg:x="67" fg:w="1"/><text x="48.1071%" y="47.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.71%)</title><rect x="50.7143%" y="469" width="0.7143%" height="15" fill="rgb(220,39,43)" fg:x="71" fg:w="1"/><text x="50.9643%" y="479.50"></text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (6 samples, 4.29%)</title><rect x="59.2857%" y="357" width="4.2857%" height="15" fill="rgb(229,68,48)" fg:x="83" fg:w="6"/><text x="59.5357%" y="367.50">&lt;&amp;str..</text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (3 samples, 2.14%)</title><rect x="61.4286%" y="341" width="2.1429%" height="15" fill="rgb(252,8,32)" fg:x="86" fg:w="3"/><text x="61.6786%" y="351.50">c..</text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (3 samples, 2.14%)</title><rect x="61.4286%" y="325" width="2.1429%" height="15" fill="rgb(223,20,43)" fg:x="86" fg:w="3"/><text x="61.6786%" y="335.50">c..</text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (3 samples, 2.14%)</title><rect x="61.4286%" y="309" width="2.1429%" height="15" fill="rgb(229,81,49)" fg:x="86" fg:w="3"/><text x="61.6786%" y="319.50">c..</text></g><g><title>core::ops::function::FnMut::call_mut (8 samples, 5.71%)</title><rect x="59.2857%" y="389" width="5.7143%" height="15" fill="rgb(236,28,36)" fg:x="83" fg:w="8"/><text x="59.5357%" y="399.50">core::o..</text></g><g><title>nom::character::complete::anychar (8 samples, 5.71%)</title><rect x="59.2857%" y="373" width="5.7143%" height="15" fill="rgb(249,185,26)" fg:x="83" fg:w="8"/><text x="59.5357%" y="383.50">nom::ch..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.43%)</title><rect x="63.5714%" y="357" width="1.4286%" height="15" fill="rgb(249,174,33)" fg:x="89" fg:w="2"/><text x="63.8214%" y="367.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.43%)</title><rect x="63.5714%" y="341" width="1.4286%" height="15" fill="rgb(233,201,37)" fg:x="89" fg:w="2"/><text x="63.8214%" y="351.50"></text></g><g><title>core::str::validations::next_code_point (2 samples, 1.43%)</title><rect x="63.5714%" y="325" width="1.4286%" height="15" fill="rgb(221,78,26)" fg:x="89" fg:w="2"/><text x="63.8214%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.71%)</title><rect x="64.2857%" y="309" width="0.7143%" height="15" fill="rgb(250,127,30)" fg:x="90" fg:w="1"/><text x="64.5357%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::position (3 samples, 2.14%)</title><rect x="84.2857%" y="293" width="2.1429%" height="15" fill="rgb(230,49,44)" fg:x="118" fg:w="3"/><text x="84.5357%" y="303.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 2.14%)</title><rect x="84.2857%" y="277" width="2.1429%" height="15" fill="rgb(229,67,23)" fg:x="118" fg:w="3"/><text x="84.5357%" y="287.50">c..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (42 samples, 30.00%)</title><rect x="57.8571%" y="405" width="30.0000%" height="15" fill="rgb(249,83,47)" fg:x="81" fg:w="42"/><text x="58.1071%" y="415.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::branch::alt::{{closure}} (32 samples, 22.86%)</title><rect x="65.0000%" y="389" width="22.8571%" height="15" fill="rgb(215,43,3)" fg:x="91" fg:w="32"/><text x="65.2500%" y="399.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (32 samples, 22.86%)</title><rect x="65.0000%" y="373" width="22.8571%" height="15" fill="rgb(238,154,13)" fg:x="91" fg:w="32"/><text x="65.2500%" y="383.50">&lt;(A,B,C) as nom::branch::Alt&lt;Input,O..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (25 samples, 17.86%)</title><rect x="70.0000%" y="357" width="17.8571%" height="15" fill="rgb(219,56,2)" fg:x="98" fg:w="25"/><text x="70.2500%" y="367.50">&lt;F as nom::internal::Parser&lt;..</text></g><g><title>nom::bytes::complete::tag::{{closure}} (14 samples, 10.00%)</title><rect x="77.8571%" y="341" width="10.0000%" height="15" fill="rgb(233,0,4)" fg:x="109" fg:w="14"/><text x="78.1071%" y="351.50">nom::bytes::co..</text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (5 samples, 3.57%)</title><rect x="84.2857%" y="325" width="3.5714%" height="15" fill="rgb(235,30,7)" fg:x="118" fg:w="5"/><text x="84.5357%" y="335.50">&lt;&amp;st..</text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (5 samples, 3.57%)</title><rect x="84.2857%" y="309" width="3.5714%" height="15" fill="rgb(250,79,13)" fg:x="118" fg:w="5"/><text x="84.5357%" y="319.50">&lt;&amp;[u..</text></g><g><title>core::iter::traits::iterator::Iterator::zip (2 samples, 1.43%)</title><rect x="86.4286%" y="293" width="1.4286%" height="15" fill="rgb(211,146,34)" fg:x="121" fg:w="2"/><text x="86.6786%" y="303.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (2 samples, 1.43%)</title><rect x="86.4286%" y="277" width="1.4286%" height="15" fill="rgb(228,22,38)" fg:x="121" fg:w="2"/><text x="86.6786%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (2 samples, 1.43%)</title><rect x="86.4286%" y="261" width="1.4286%" height="15" fill="rgb(235,168,5)" fg:x="121" fg:w="2"/><text x="86.6786%" y="271.50"></text></g><g><title>core::cmp::min (2 samples, 1.43%)</title><rect x="86.4286%" y="245" width="1.4286%" height="15" fill="rgb(221,155,16)" fg:x="121" fg:w="2"/><text x="86.6786%" y="255.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 1.43%)</title><rect x="86.4286%" y="229" width="1.4286%" height="15" fill="rgb(215,215,53)" fg:x="121" fg:w="2"/><text x="86.6786%" y="239.50"></text></g><g><title>core::cmp::min_by (2 samples, 1.43%)</title><rect x="86.4286%" y="213" width="1.4286%" height="15" fill="rgb(223,4,10)" fg:x="121" fg:w="2"/><text x="86.6786%" y="223.50"></text></g><g><title>askama_derive::generator::_parsed::Parsed::new (61 samples, 43.57%)</title><rect x="47.1429%" y="757" width="43.5714%" height="15" fill="rgb(234,103,6)" fg:x="66" fg:w="61"/><text x="47.3929%" y="767.50">askama_derive::generator::_parsed::Parsed::new</text></g><g><title>askama_derive::parser::parse (61 samples, 43.57%)</title><rect x="47.1429%" y="741" width="43.5714%" height="15" fill="rgb(227,97,0)" fg:x="66" fg:w="61"/><text x="47.3929%" y="751.50">askama_derive::parser::parse</text></g><g><title>askama_derive::parser::node::Node::parse (61 samples, 43.57%)</title><rect x="47.1429%" y="725" width="43.5714%" height="15" fill="rgb(234,150,53)" fg:x="66" fg:w="61"/><text x="47.3929%" y="735.50">askama_derive::parser::node::Node::parse</text></g><g><title>askama_derive::parser::node::parse_template (61 samples, 43.57%)</title><rect x="47.1429%" y="709" width="43.5714%" height="15" fill="rgb(228,201,54)" fg:x="66" fg:w="61"/><text x="47.3929%" y="719.50">askama_derive::parser::node::parse_template</text></g><g><title>nom::multi::many0::{{closure}} (61 samples, 43.57%)</title><rect x="47.1429%" y="693" width="43.5714%" height="15" fill="rgb(222,22,37)" fg:x="66" fg:w="61"/><text x="47.3929%" y="703.50">nom::multi::many0::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (61 samples, 43.57%)</title><rect x="47.1429%" y="677" width="43.5714%" height="15" fill="rgb(237,53,32)" fg:x="66" fg:w="61"/><text x="47.3929%" y="687.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::branch::alt::{{closure}} (61 samples, 43.57%)</title><rect x="47.1429%" y="661" width="43.5714%" height="15" fill="rgb(233,25,53)" fg:x="66" fg:w="61"/><text x="47.3929%" y="671.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (61 samples, 43.57%)</title><rect x="47.1429%" y="645" width="43.5714%" height="15" fill="rgb(210,40,34)" fg:x="66" fg:w="61"/><text x="47.3929%" y="655.50">&lt;(A,B,C,D) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (61 samples, 43.57%)</title><rect x="47.1429%" y="629" width="43.5714%" height="15" fill="rgb(241,220,44)" fg:x="66" fg:w="61"/><text x="47.3929%" y="639.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::complete::{{closure}} (61 samples, 43.57%)</title><rect x="47.1429%" y="613" width="43.5714%" height="15" fill="rgb(235,28,35)" fg:x="66" fg:w="61"/><text x="47.3929%" y="623.50">nom::combinator::complete::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (61 samples, 43.57%)</title><rect x="47.1429%" y="597" width="43.5714%" height="15" fill="rgb(210,56,17)" fg:x="66" fg:w="61"/><text x="47.3929%" y="607.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>askama_derive::parser::node::parse_template::{{closure}} (61 samples, 43.57%)</title><rect x="47.1429%" y="581" width="43.5714%" height="15" fill="rgb(224,130,29)" fg:x="66" fg:w="61"/><text x="47.3929%" y="591.50">askama_derive::parser::node::parse_template::{{closure}}</text></g><g><title>askama_derive::parser::take_content (59 samples, 42.14%)</title><rect x="48.5714%" y="565" width="42.1429%" height="15" fill="rgb(235,212,8)" fg:x="68" fg:w="59"/><text x="48.8214%" y="575.50">askama_derive::parser::take_content</text></g><g><title>nom::combinator::opt::{{closure}} (59 samples, 42.14%)</title><rect x="48.5714%" y="549" width="42.1429%" height="15" fill="rgb(223,33,50)" fg:x="68" fg:w="59"/><text x="48.8214%" y="559.50">nom::combinator::opt::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (59 samples, 42.14%)</title><rect x="48.5714%" y="533" width="42.1429%" height="15" fill="rgb(219,149,13)" fg:x="68" fg:w="59"/><text x="48.8214%" y="543.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::recognize::{{closure}} (59 samples, 42.14%)</title><rect x="48.5714%" y="517" width="42.1429%" height="15" fill="rgb(250,156,29)" fg:x="68" fg:w="59"/><text x="48.8214%" y="527.50">nom::combinator::recognize::{{closure}}</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (59 samples, 42.14%)</title><rect x="48.5714%" y="501" width="42.1429%" height="15" fill="rgb(216,193,19)" fg:x="68" fg:w="59"/><text x="48.8214%" y="511.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>askama_derive::parser::skip_till::{{closure}} (59 samples, 42.14%)</title><rect x="48.5714%" y="485" width="42.1429%" height="15" fill="rgb(216,135,14)" fg:x="68" fg:w="59"/><text x="48.8214%" y="495.50">askama_derive::parser::skip_till::{{closure}}</text></g><g><title>nom::branch::alt::{{closure}} (55 samples, 39.29%)</title><rect x="51.4286%" y="469" width="39.2857%" height="15" fill="rgb(241,47,5)" fg:x="72" fg:w="55"/><text x="51.6786%" y="479.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (54 samples, 38.57%)</title><rect x="52.1429%" y="453" width="38.5714%" height="15" fill="rgb(233,42,35)" fg:x="73" fg:w="54"/><text x="52.3929%" y="463.50">&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (48 samples, 34.29%)</title><rect x="56.4286%" y="437" width="34.2857%" height="15" fill="rgb(231,13,6)" fg:x="79" fg:w="48"/><text x="56.6786%" y="447.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse</text></g><g><title>nom::combinator::map::{{closure}} (48 samples, 34.29%)</title><rect x="56.4286%" y="421" width="34.2857%" height="15" fill="rgb(207,181,40)" fg:x="79" fg:w="48"/><text x="56.6786%" y="431.50">nom::combinator::map::{{closure}}</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 2.86%)</title><rect x="87.8571%" y="405" width="2.8571%" height="15" fill="rgb(254,173,49)" fg:x="123" fg:w="4"/><text x="88.1071%" y="415.50">&lt;c..</text></g><g><title>askama_derive::generator::build_template (119 samples, 85.00%)</title><rect x="6.4286%" y="789" width="85.0000%" height="15" fill="rgb(221,1,38)" fg:x="9" fg:w="119"/><text x="6.6786%" y="799.50">askama_derive::generator::build_template</text></g><g><title>askama_derive::generator::find_used_templates (62 samples, 44.29%)</title><rect x="47.1429%" y="773" width="44.2857%" height="15" fill="rgb(206,124,46)" fg:x="66" fg:w="62"/><text x="47.3929%" y="783.50">askama_derive::generator::find_used_templates</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.71%)</title><rect x="90.7143%" y="757" width="0.7143%" height="15" fill="rgb(249,21,11)" fg:x="127" fg:w="1"/><text x="90.9643%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.71%)</title><rect x="90.7143%" y="741" width="0.7143%" height="15" fill="rgb(222,201,40)" fg:x="127" fg:w="1"/><text x="90.9643%" y="751.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.71%)</title><rect x="90.7143%" y="725" width="0.7143%" height="15" fill="rgb(235,61,29)" fg:x="127" fg:w="1"/><text x="90.9643%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.71%)</title><rect x="90.7143%" y="709" width="0.7143%" height="15" fill="rgb(219,207,3)" fg:x="127" fg:w="1"/><text x="90.9643%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.71%)</title><rect x="90.7143%" y="693" width="0.7143%" height="15" fill="rgb(222,56,46)" fg:x="127" fg:w="1"/><text x="90.9643%" y="703.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (1 samples, 0.71%)</title><rect x="90.7143%" y="677" width="0.7143%" height="15" fill="rgb(239,76,54)" fg:x="127" fg:w="1"/><text x="90.9643%" y="687.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (1 samples, 0.71%)</title><rect x="90.7143%" y="661" width="0.7143%" height="15" fill="rgb(231,124,27)" fg:x="127" fg:w="1"/><text x="90.9643%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.71%)</title><rect x="90.7143%" y="645" width="0.7143%" height="15" fill="rgb(249,195,6)" fg:x="127" fg:w="1"/><text x="90.9643%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.71%)</title><rect x="90.7143%" y="629" width="0.7143%" height="15" fill="rgb(237,174,47)" fg:x="127" fg:w="1"/><text x="90.9643%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.71%)</title><rect x="90.7143%" y="613" width="0.7143%" height="15" fill="rgb(206,201,31)" fg:x="127" fg:w="1"/><text x="90.9643%" y="623.50"></text></g><g><title>proc_macro2::fallback::TokenStreamBuilder::push_token_from_parser (1 samples, 0.71%)</title><rect x="91.4286%" y="677" width="0.7143%" height="15" fill="rgb(231,57,52)" fg:x="128" fg:w="1"/><text x="91.6786%" y="687.50"></text></g><g><title>proc_macro2::rcvec::RcVecBuilder&lt;T&gt;::push (1 samples, 0.71%)</title><rect x="91.4286%" y="661" width="0.7143%" height="15" fill="rgb(248,177,22)" fg:x="128" fg:w="1"/><text x="91.6786%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.71%)</title><rect x="91.4286%" y="645" width="0.7143%" height="15" fill="rgb(215,211,37)" fg:x="128" fg:w="1"/><text x="91.6786%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.71%)</title><rect x="91.4286%" y="629" width="0.7143%" height="15" fill="rgb(241,128,51)" fg:x="128" fg:w="1"/><text x="91.6786%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.71%)</title><rect x="91.4286%" y="613" width="0.7143%" height="15" fill="rgb(227,165,31)" fg:x="128" fg:w="1"/><text x="91.6786%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.71%)</title><rect x="91.4286%" y="597" width="0.7143%" height="15" fill="rgb(228,167,24)" fg:x="128" fg:w="1"/><text x="91.6786%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.71%)</title><rect x="91.4286%" y="581" width="0.7143%" height="15" fill="rgb(228,143,12)" fg:x="128" fg:w="1"/><text x="91.6786%" y="591.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.71%)</title><rect x="91.4286%" y="565" width="0.7143%" height="15" fill="rgb(249,149,8)" fg:x="128" fg:w="1"/><text x="91.6786%" y="575.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.71%)</title><rect x="91.4286%" y="549" width="0.7143%" height="15" fill="rgb(243,35,44)" fg:x="128" fg:w="1"/><text x="91.6786%" y="559.50"></text></g><g><title>realloc (1 samples, 0.71%)</title><rect x="91.4286%" y="533" width="0.7143%" height="15" fill="rgb(246,89,9)" fg:x="128" fg:w="1"/><text x="91.6786%" y="543.50"></text></g><g><title>[libc.so.6] (1 samples, 0.71%)</title><rect x="91.4286%" y="517" width="0.7143%" height="15" fill="rgb(233,213,13)" fg:x="128" fg:w="1"/><text x="91.6786%" y="527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.71%)</title><rect x="91.4286%" y="501" width="0.7143%" height="15" fill="rgb(233,141,41)" fg:x="128" fg:w="1"/><text x="91.6786%" y="511.50"></text></g><g><title>[libc.so.6] (1 samples, 0.71%)</title><rect x="91.4286%" y="485" width="0.7143%" height="15" fill="rgb(239,167,4)" fg:x="128" fg:w="1"/><text x="91.6786%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (10 samples, 7.14%)</title><rect x="91.4286%" y="789" width="7.1429%" height="15" fill="rgb(209,217,16)" fg:x="128" fg:w="10"/><text x="91.6786%" y="799.50">core::str:..</text></g><g><title>&lt;proc_macro2::TokenStream as core::str::traits::FromStr&gt;::from_str (10 samples, 7.14%)</title><rect x="91.4286%" y="773" width="7.1429%" height="15" fill="rgb(219,88,35)" fg:x="128" fg:w="10"/><text x="91.6786%" y="783.50">&lt;proc_macr..</text></g><g><title>core::str::&lt;impl str&gt;::parse (10 samples, 7.14%)</title><rect x="91.4286%" y="757" width="7.1429%" height="15" fill="rgb(220,193,23)" fg:x="128" fg:w="10"/><text x="91.6786%" y="767.50">core::str:..</text></g><g><title>&lt;proc_macro2::imp::TokenStream as core::str::traits::FromStr&gt;::from_str (10 samples, 7.14%)</title><rect x="91.4286%" y="741" width="7.1429%" height="15" fill="rgb(230,90,52)" fg:x="128" fg:w="10"/><text x="91.6786%" y="751.50">&lt;proc_macr..</text></g><g><title>core::str::&lt;impl str&gt;::parse (10 samples, 7.14%)</title><rect x="91.4286%" y="725" width="7.1429%" height="15" fill="rgb(252,106,19)" fg:x="128" fg:w="10"/><text x="91.6786%" y="735.50">core::str:..</text></g><g><title>&lt;proc_macro2::fallback::TokenStream as core::str::traits::FromStr&gt;::from_str (10 samples, 7.14%)</title><rect x="91.4286%" y="709" width="7.1429%" height="15" fill="rgb(206,74,20)" fg:x="128" fg:w="10"/><text x="91.6786%" y="719.50">&lt;proc_macr..</text></g><g><title>proc_macro2::parse::token_stream (10 samples, 7.14%)</title><rect x="91.4286%" y="693" width="7.1429%" height="15" fill="rgb(230,138,44)" fg:x="128" fg:w="10"/><text x="91.6786%" y="703.50">proc_macro..</text></g><g><title>proc_macro2::parse::leaf_token (9 samples, 6.43%)</title><rect x="92.1429%" y="677" width="6.4286%" height="15" fill="rgb(235,182,43)" fg:x="129" fg:w="9"/><text x="92.3929%" y="687.50">proc_mac..</text></g><g><title>proc_macro2::parse::literal (9 samples, 6.43%)</title><rect x="92.1429%" y="661" width="6.4286%" height="15" fill="rgb(242,16,51)" fg:x="129" fg:w="9"/><text x="92.3929%" y="671.50">proc_mac..</text></g><g><title>proc_macro2::parse::literal_nocapture (9 samples, 6.43%)</title><rect x="92.1429%" y="645" width="6.4286%" height="15" fill="rgb(248,9,4)" fg:x="129" fg:w="9"/><text x="92.3929%" y="655.50">proc_mac..</text></g><g><title>proc_macro2::parse::string (9 samples, 6.43%)</title><rect x="92.1429%" y="629" width="6.4286%" height="15" fill="rgb(210,31,22)" fg:x="129" fg:w="9"/><text x="92.3929%" y="639.50">proc_mac..</text></g><g><title>proc_macro2::parse::cooked_string (9 samples, 6.43%)</title><rect x="92.1429%" y="613" width="6.4286%" height="15" fill="rgb(239,54,39)" fg:x="129" fg:w="9"/><text x="92.3929%" y="623.50">proc_mac..</text></g><g><title>&lt;core::iter::adapters::peekable::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 3.57%)</title><rect x="95.0000%" y="597" width="3.5714%" height="15" fill="rgb(230,99,41)" fg:x="133" fg:w="5"/><text x="95.2500%" y="607.50">&lt;cor..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 3.57%)</title><rect x="95.0000%" y="581" width="3.5714%" height="15" fill="rgb(253,106,12)" fg:x="133" fg:w="5"/><text x="95.2500%" y="591.50">&lt;cor..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.86%)</title><rect x="95.7143%" y="565" width="2.8571%" height="15" fill="rgb(213,46,41)" fg:x="134" fg:w="4"/><text x="95.9643%" y="575.50">&lt;c..</text></g><g><title>core::str::validations::next_code_point (4 samples, 2.86%)</title><rect x="95.7143%" y="549" width="2.8571%" height="15" fill="rgb(215,133,35)" fg:x="134" fg:w="4"/><text x="95.9643%" y="559.50">co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.71%)</title><rect x="97.8571%" y="533" width="0.7143%" height="15" fill="rgb(213,28,5)" fg:x="137" fg:w="1"/><text x="98.1071%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.71%)</title><rect x="98.5714%" y="757" width="0.7143%" height="15" fill="rgb(215,77,49)" fg:x="138" fg:w="1"/><text x="98.8214%" y="767.50"></text></g><g><title>syn::derive::parsing::&lt;impl syn::parse::Parse for syn::derive::DeriveInput&gt;::parse (1 samples, 0.71%)</title><rect x="98.5714%" y="741" width="0.7143%" height="15" fill="rgb(248,100,22)" fg:x="138" fg:w="1"/><text x="98.8214%" y="751.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.71%)</title><rect x="98.5714%" y="725" width="0.7143%" height="15" fill="rgb(208,67,9)" fg:x="138" fg:w="1"/><text x="98.8214%" y="735.50"></text></g><g><title>syn::generics::parsing::&lt;impl syn::parse::Parse for syn::generics::Generics&gt;::parse (1 samples, 0.71%)</title><rect x="98.5714%" y="709" width="0.7143%" height="15" fill="rgb(219,133,21)" fg:x="138" fg:w="1"/><text x="98.8214%" y="719.50"></text></g><g><title>syn::parse::ParseBuffer::parse (1 samples, 0.71%)</title><rect x="98.5714%" y="693" width="0.7143%" height="15" fill="rgb(246,46,29)" fg:x="138" fg:w="1"/><text x="98.8214%" y="703.50"></text></g><g><title>syn::generics::parsing::&lt;impl syn::parse::Parse for syn::generics::LifetimeParam&gt;::parse (1 samples, 0.71%)</title><rect x="98.5714%" y="677" width="0.7143%" height="15" fill="rgb(246,185,52)" fg:x="138" fg:w="1"/><text x="98.8214%" y="687.50"></text></g><g><title>syn::parse::ParseBuffer::call (1 samples, 0.71%)</title><rect x="98.5714%" y="661" width="0.7143%" height="15" fill="rgb(252,136,11)" fg:x="138" fg:w="1"/><text x="98.8214%" y="671.50"></text></g><g><title>syn::attr::Attribute::parse_outer (1 samples, 0.71%)</title><rect x="98.5714%" y="645" width="0.7143%" height="15" fill="rgb(219,138,53)" fg:x="138" fg:w="1"/><text x="98.8214%" y="655.50"></text></g><g><title>all (140 samples, 100%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(211,51,23)" fg:x="0" fg:w="140"/><text x="0.2500%" y="1135.50"></text></g><g><title>askama_bench (140 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="140"/><text x="0.2500%" y="1119.50">askama_bench</text></g><g><title>_start (133 samples, 95.00%)</title><rect x="5.0000%" y="1093" width="95.0000%" height="15" fill="rgb(251,222,45)" fg:x="7" fg:w="133"/><text x="5.2500%" y="1103.50">_start</text></g><g><title>__libc_start_main (133 samples, 95.00%)</title><rect x="5.0000%" y="1077" width="95.0000%" height="15" fill="rgb(217,162,53)" fg:x="7" fg:w="133"/><text x="5.2500%" y="1087.50">__libc_start_main</text></g><g><title>[libc.so.6] (133 samples, 95.00%)</title><rect x="5.0000%" y="1061" width="95.0000%" height="15" fill="rgb(229,93,14)" fg:x="7" fg:w="133"/><text x="5.2500%" y="1071.50">[libc.so.6]</text></g><g><title>main (133 samples, 95.00%)</title><rect x="5.0000%" y="1045" width="95.0000%" height="15" fill="rgb(209,67,49)" fg:x="7" fg:w="133"/><text x="5.2500%" y="1055.50">main</text></g><g><title>std::rt::lang_start_internal (133 samples, 95.00%)</title><rect x="5.0000%" y="1029" width="95.0000%" height="15" fill="rgb(213,87,29)" fg:x="7" fg:w="133"/><text x="5.2500%" y="1039.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (133 samples, 95.00%)</title><rect x="5.0000%" y="1013" width="95.0000%" height="15" fill="rgb(205,151,52)" fg:x="7" fg:w="133"/><text x="5.2500%" y="1023.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (133 samples, 95.00%)</title><rect x="5.0000%" y="997" width="95.0000%" height="15" fill="rgb(253,215,39)" fg:x="7" fg:w="133"/><text x="5.2500%" y="1007.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (133 samples, 95.00%)</title><rect x="5.0000%" y="981" width="95.0000%" height="15" fill="rgb(221,220,41)" fg:x="7" fg:w="133"/><text x="5.2500%" y="991.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (133 samples, 95.00%)</title><rect x="5.0000%" y="965" width="95.0000%" height="15" fill="rgb(218,133,21)" fg:x="7" fg:w="133"/><text x="5.2500%" y="975.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (133 samples, 95.00%)</title><rect x="5.0000%" y="949" width="95.0000%" height="15" fill="rgb(221,193,43)" fg:x="7" fg:w="133"/><text x="5.2500%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (133 samples, 95.00%)</title><rect x="5.0000%" y="933" width="95.0000%" height="15" fill="rgb(240,128,52)" fg:x="7" fg:w="133"/><text x="5.2500%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (133 samples, 95.00%)</title><rect x="5.0000%" y="917" width="95.0000%" height="15" fill="rgb(253,114,12)" fg:x="7" fg:w="133"/><text x="5.2500%" y="927.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (133 samples, 95.00%)</title><rect x="5.0000%" y="901" width="95.0000%" height="15" fill="rgb(215,223,47)" fg:x="7" fg:w="133"/><text x="5.2500%" y="911.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (133 samples, 95.00%)</title><rect x="5.0000%" y="885" width="95.0000%" height="15" fill="rgb(248,225,23)" fg:x="7" fg:w="133"/><text x="5.2500%" y="895.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (133 samples, 95.00%)</title><rect x="5.0000%" y="869" width="95.0000%" height="15" fill="rgb(250,108,0)" fg:x="7" fg:w="133"/><text x="5.2500%" y="879.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (133 samples, 95.00%)</title><rect x="5.0000%" y="853" width="95.0000%" height="15" fill="rgb(228,208,7)" fg:x="7" fg:w="133"/><text x="5.2500%" y="863.50">core::ops::function::FnOnce::call_once</text></g><g><title>askama_bench::main (133 samples, 95.00%)</title><rect x="5.0000%" y="837" width="95.0000%" height="15" fill="rgb(244,45,10)" fg:x="7" fg:w="133"/><text x="5.2500%" y="847.50">askama_bench::main</text></g><g><title>askama_derive::derive_template (131 samples, 93.57%)</title><rect x="6.4286%" y="821" width="93.5714%" height="15" fill="rgb(207,125,25)" fg:x="9" fg:w="131"/><text x="6.6786%" y="831.50">askama_derive::derive_template</text></g><g><title>askama_derive::generator::derive_template (131 samples, 93.57%)</title><rect x="6.4286%" y="805" width="93.5714%" height="15" fill="rgb(210,195,18)" fg:x="9" fg:w="131"/><text x="6.6786%" y="815.50">askama_derive::generator::derive_template</text></g><g><title>syn::parse2 (2 samples, 1.43%)</title><rect x="98.5714%" y="789" width="1.4286%" height="15" fill="rgb(249,80,12)" fg:x="138" fg:w="2"/><text x="98.8214%" y="799.50"></text></g><g><title>&lt;F as syn::parse::Parser&gt;::parse2 (2 samples, 1.43%)</title><rect x="98.5714%" y="773" width="1.4286%" height="15" fill="rgb(221,65,9)" fg:x="138" fg:w="2"/><text x="98.8214%" y="783.50"></text></g><g><title>syn::buffer::TokenBuffer::new2 (1 samples, 0.71%)</title><rect x="99.2857%" y="757" width="0.7143%" height="15" fill="rgb(235,49,36)" fg:x="139" fg:w="1"/><text x="99.5357%" y="767.50"></text></g><g><title>syn::buffer::TokenBuffer::recursive_new (1 samples, 0.71%)</title><rect x="99.2857%" y="741" width="0.7143%" height="15" fill="rgb(225,32,20)" fg:x="139" fg:w="1"/><text x="99.5357%" y="751.50"></text></g><g><title>syn::buffer::TokenBuffer::recursive_new (1 samples, 0.71%)</title><rect x="99.2857%" y="725" width="0.7143%" height="15" fill="rgb(215,141,46)" fg:x="139" fg:w="1"/><text x="99.5357%" y="735.50"></text></g></svg></svg>